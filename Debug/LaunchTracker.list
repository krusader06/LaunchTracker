
LaunchTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ea8  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  08009fe4  08009fe4  0000afe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a278  0800a278  0000b278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a280  0800a280  0000b280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a284  0800a284  0000b284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000044  20000008  0800a288  0000c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  2000004c  0800a2cc  0000c04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000008c  0800a309  0000c08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  200000a0  0800a31a  0000c0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  0800a31a  0000c4d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ca67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000d000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0800a31a  0000c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002fb8e  00000000  00000000  0000ca97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000687c  00000000  00000000  0003c625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002bf0  00000000  00000000  00042ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000021c2  00000000  00000000  00045a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000289c4  00000000  00000000  00047c5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000335fa  00000000  00000000  0007061e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000daec8  00000000  00000000  000a3c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0017eae0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b7c4  00000000  00000000  0017eb24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  0018a2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000a0 	.word	0x200000a0
 8000158:	00000000 	.word	0x00000000
 800015c:	08009fcc 	.word	0x08009fcc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000a4 	.word	0x200000a4
 8000178:	08009fcc 	.word	0x08009fcc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000192:	4b15      	ldr	r3, [pc, #84]	@ (80001e8 <APPD_EnableCPU2+0x5c>)
 8000194:	881a      	ldrh	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <APPD_EnableCPU2+0x60>)
 8000198:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800019a:	4b15      	ldr	r3, [pc, #84]	@ (80001f0 <APPD_EnableCPU2+0x64>)
 800019c:	881a      	ldrh	r2, [r3, #0]
 800019e:	4b13      	ldr	r3, [pc, #76]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a0:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80001a2:	4b14      	ldr	r3, [pc, #80]	@ (80001f4 <APPD_EnableCPU2+0x68>)
 80001a4:	881a      	ldrh	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a8:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80001aa:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <APPD_EnableCPU2+0x6c>)
 80001ac:	881a      	ldrh	r2, [r3, #0]
 80001ae:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b0:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80001b2:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <APPD_EnableCPU2+0x70>)
 80001b4:	881a      	ldrh	r2, [r3, #0]
 80001b6:	4b0d      	ldr	r3, [pc, #52]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b8:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80001ba:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <APPD_EnableCPU2+0x74>)
 80001bc:	1d3c      	adds	r4, r7, #4
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	c403      	stmia	r4!, {r0, r1}
 80001ca:	8022      	strh	r2, [r4, #0]
 80001cc:	3402      	adds	r4, #2
 80001ce:	0c13      	lsrs	r3, r2, #16
 80001d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001d2:	f008 fc5d 	bl	8008a90 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f007 fec0 	bl	8007f5e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001de:	bf00      	nop
}
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000008 	.word	0x20000008
 80001ec:	200301e8 	.word	0x200301e8
 80001f0:	2000000a 	.word	0x2000000a
 80001f4:	2000000c 	.word	0x2000000c
 80001f8:	2000000e 	.word	0x2000000e
 80001fc:	20000010 	.word	0x20000010
 8000200:	08009fe4 	.word	0x08009fe4

08000204 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 800020e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000212:	f023 0207 	bic.w	r2, r3, #7
 8000216:	4905      	ldr	r1, [pc, #20]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4313      	orrs	r3, r2
 800021c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	58000400 	.word	0x58000400

08000230 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 800023a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800023e:	4905      	ldr	r1, [pc, #20]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4313      	orrs	r3, r2
 8000244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	58000800 	.word	0x58000800

08000258 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000266:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800026e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000272:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800027e:	4313      	orrs	r3, r2
 8000280:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	cafecafe 	.word	0xcafecafe

08000294 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800029c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80002a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	608b      	str	r3, [r1, #8]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <LL_DBGMCU_GetDeviceID+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e0042000 	.word	0xe0042000

080002d8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <LL_DBGMCU_GetRevisionID+0x18>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	b29b      	uxth	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e0042000 	.word	0xe0042000

080002f4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80002f8:	4b05      	ldr	r3, [pc, #20]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fa:	691b      	ldr	r3, [r3, #16]
 80002fc:	4a04      	ldr	r2, [pc, #16]	@ (8000310 <LL_LPM_EnableSleep+0x1c>)
 80002fe:	f023 0304 	bic.w	r3, r3, #4
 8000302:	6113      	str	r3, [r2, #16]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000ed00 	.word	0xe000ed00

08000314 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	22ff      	movs	r2, #255	@ 0xff
 8000320:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	22ca      	movs	r2, #202	@ 0xca
 800033a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2253      	movs	r2, #83	@ 0x53
 8000340:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800034e:	b480      	push	{r7}
 8000350:	b083      	sub	sp, #12
 8000352:	af00      	add	r7, sp, #0
 8000354:	6078      	str	r0, [r7, #4]
 8000356:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	f023 0207 	bic.w	r2, r3, #7
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	431a      	orrs	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	609a      	str	r2, [r3, #8]
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000378:	4b04      	ldr	r3, [pc, #16]	@ (800038c <MX_APPE_Config+0x18>)
 800037a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800037e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000380:	f000 f81d 	bl	80003be <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000384:	f000 f822 	bl	80003cc <Config_HSE>

  return;
 8000388:	bf00      	nop
}
 800038a:	bd80      	pop	{r7, pc}
 800038c:	58004000 	.word	0x58004000

08000390 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000394:	f000 f82e 	bl	80003f4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000398:	f000 f844 	bl	8000424 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800039c:	4903      	ldr	r1, [pc, #12]	@ (80003ac <MX_APPE_Init+0x1c>)
 800039e:	2000      	movs	r0, #0
 80003a0:	f000 fdaa 	bl	8000ef8 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80003a4:	f000 f84e 	bl	8000444 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80003a8:	bf00      	nop
}
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	200001ec 	.word	0x200001ec

080003b0 <Init_Exti>:

void Init_Exti(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80003b4:	2050      	movs	r0, #80	@ 0x50
 80003b6:	f7ff ff3b 	bl	8000230 <LL_EXTI_EnableIT_32_63>

  return;
 80003ba:	bf00      	nop
}
 80003bc:	bd80      	pop	{r7, pc}

080003be <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80003c2:	bf00      	nop
}
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80003d2:	2000      	movs	r0, #0
 80003d4:	f008 fbe8 	bl	8008ba8 <OTP_Read>
 80003d8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d005      	beq.n	80003ec <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	799b      	ldrb	r3, [r3, #6]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ff37 	bl	8000258 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80003ea:	bf00      	nop
 80003ec:	bf00      	nop
}
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <System_Init>:

static void System_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  Init_Exti();
 80003f8:	f7ff ffda 	bl	80003b0 <Init_Exti>

  Init_Rtc();
 80003fc:	f000 f802 	bl	8000404 <Init_Rtc>

  return;
 8000400:	bf00      	nop
}
 8000402:	bd80      	pop	{r7, pc}

08000404 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8000408:	4805      	ldr	r0, [pc, #20]	@ (8000420 <Init_Rtc+0x1c>)
 800040a:	f7ff ff90 	bl	800032e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800040e:	2100      	movs	r1, #0
 8000410:	4803      	ldr	r0, [pc, #12]	@ (8000420 <Init_Rtc+0x1c>)
 8000412:	f7ff ff9c 	bl	800034e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8000416:	4802      	ldr	r0, [pc, #8]	@ (8000420 <Init_Rtc+0x1c>)
 8000418:	f7ff ff7c 	bl	8000314 <LL_RTC_EnableWriteProtection>

  return;
 800041c:	bf00      	nop
}
 800041e:	bd80      	pop	{r7, pc}
 8000420:	40002800 	.word	0x40002800

08000424 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000428:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800042c:	f7ff ff32 	bl	8000294 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000430:	f009 fa98 	bl	8009964 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000434:	2004      	movs	r0, #4
 8000436:	f7ff fee5 	bl	8000204 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800043a:	f004 f945 	bl	80046c8 <HAL_PWREx_EnableSRAMRetention>

  return;
 800043e:	bf00      	nop
}
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800044a:	f008 f96b 	bl	8008724 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800044e:	4a11      	ldr	r2, [pc, #68]	@ (8000494 <appe_Tl_Init+0x50>)
 8000450:	2100      	movs	r1, #0
 8000452:	2008      	movs	r0, #8
 8000454:	f009 fbfa 	bl	8009c4c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <appe_Tl_Init+0x54>)
 800045a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <appe_Tl_Init+0x58>)
 800045e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000460:	463b      	mov	r3, r7
 8000462:	4619      	mov	r1, r3
 8000464:	480e      	ldr	r0, [pc, #56]	@ (80004a0 <appe_Tl_Init+0x5c>)
 8000466:	f008 f81f 	bl	80084a8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800046a:	4b0e      	ldr	r3, [pc, #56]	@ (80004a4 <appe_Tl_Init+0x60>)
 800046c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800046e:	4b0e      	ldr	r3, [pc, #56]	@ (80004a8 <appe_Tl_Init+0x64>)
 8000470:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <appe_Tl_Init+0x68>)
 8000474:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000476:	f240 533c 	movw	r3, #1340	@ 0x53c
 800047a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	4618      	mov	r0, r3
 8000482:	f008 fa91 	bl	80089a8 <TL_MM_Init>

  TL_Enable();
 8000486:	f008 f947 	bl	8008718 <TL_Enable>

  return;
 800048a:	bf00      	nop
}
 800048c:	3720      	adds	r7, #32
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	080084e1 	.word	0x080084e1
 8000498:	20030734 	.word	0x20030734
 800049c:	080004b1 	.word	0x080004b1
 80004a0:	080004c9 	.word	0x080004c9
 80004a4:	2003094c 	.word	0x2003094c
 80004a8:	20030840 	.word	0x20030840
 80004ac:	200301f8 	.word	0x200301f8

080004b0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80004ba:	bf00      	nop
}
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
	...

080004c8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	330b      	adds	r3, #11
 80004d6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	881b      	ldrh	r3, [r3, #0]
 80004dc:	b29b      	uxth	r3, r3
 80004de:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80004e2:	2b07      	cmp	r3, #7
 80004e4:	d81f      	bhi.n	8000526 <APPE_SysUserEvtRx+0x5e>
 80004e6:	a201      	add	r2, pc, #4	@ (adr r2, 80004ec <APPE_SysUserEvtRx+0x24>)
 80004e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ec:	0800050d 	.word	0x0800050d
 80004f0:	0800051f 	.word	0x0800051f
 80004f4:	08000527 	.word	0x08000527
 80004f8:	08000527 	.word	0x08000527
 80004fc:	08000527 	.word	0x08000527
 8000500:	08000527 	.word	0x08000527
 8000504:	08000527 	.word	0x08000527
 8000508:	08000527 	.word	0x08000527
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	4618      	mov	r0, r3
 8000512:	f007 fd7f 	bl	8008014 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000516:	6878      	ldr	r0, [r7, #4]
 8000518:	f000 f81b 	bl	8000552 <APPE_SysEvtReadyProcessing>
    break;
 800051c:	e004      	b.n	8000528 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800051e:	6878      	ldr	r0, [r7, #4]
 8000520:	f000 f806 	bl	8000530 <APPE_SysEvtError>
    break;
 8000524:	e000      	b.n	8000528 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000526:	bf00      	nop
  }

  return;
 8000528:	bf00      	nop
}
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000530:	b480      	push	{r7}
 8000532:	b085      	sub	sp, #20
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	330b      	adds	r3, #11
 800053e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3302      	adds	r3, #2
 8000544:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000546:	bf00      	nop
}
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b08a      	sub	sp, #40	@ 0x28
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000568:	2300      	movs	r3, #0
 800056a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	685b      	ldr	r3, [r3, #4]
 8000574:	330b      	adds	r3, #11
 8000576:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000578:	69fb      	ldr	r3, [r7, #28]
 800057a:	3302      	adds	r3, #2
 800057c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800057e:	69bb      	ldr	r3, [r7, #24]
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d11d      	bne.n	80005c2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000586:	f7ff fe01 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800058a:	230f      	movs	r3, #15
 800058c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800058e:	237f      	movs	r3, #127	@ 0x7f
 8000590:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000592:	f7ff fea1 	bl	80002d8 <LL_DBGMCU_GetRevisionID>
 8000596:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800059a:	b29b      	uxth	r3, r3
 800059c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800059e:	f7ff fe8d 	bl	80002bc <LL_DBGMCU_GetDeviceID>
 80005a2:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80005aa:	f107 0308 	add.w	r3, r7, #8
 80005ae:	4618      	mov	r0, r3
 80005b0:	f007 fd1b 	bl	8007fea <SHCI_C2_Config>

    APP_BLE_Init();
 80005b4:	f008 fc02 	bl	8008dbc <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80005b8:	2100      	movs	r1, #0
 80005ba:	2001      	movs	r0, #1
 80005bc:	f009 f9e4 	bl	8009988 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80005c0:	e007      	b.n	80005d2 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80005c2:	69bb      	ldr	r3, [r7, #24]
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b01      	cmp	r3, #1
 80005c8:	d103      	bne.n	80005d2 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
  return;
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
}
 80005d4:	3728      	adds	r7, #40	@ 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005e2:	f002 fce3 	bl	8002fac <HAL_GetTick>
 80005e6:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005f2:	d00a      	beq.n	800060a <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 80005f4:	f002 fcf2 	bl	8002fdc <HAL_GetTickFreq>
 80005f8:	4603      	mov	r3, r0
 80005fa:	461a      	mov	r2, r3
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	4413      	add	r3, r2
 8000600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000602:	e002      	b.n	800060a <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8000604:	f7ff fe76 	bl	80002f4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8000608:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 800060a:	f002 fccf 	bl	8002fac <HAL_GetTick>
 800060e:	4602      	mov	r2, r0
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	1ad3      	subs	r3, r2, r3
 8000614:	68fa      	ldr	r2, [r7, #12]
 8000616:	429a      	cmp	r2, r3
 8000618:	d8f4      	bhi.n	8000604 <HAL_Delay+0x2a>
  }
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3710      	adds	r7, #16
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}

08000624 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000628:	f04f 30ff 	mov.w	r0, #4294967295
 800062c:	f009 fa12 	bl	8009a54 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 8000638:	f009 f9d6 	bl	80099e8 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800063c:	bf00      	nop
}
 800063e:	bd80      	pop	{r7, pc}

08000640 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800064a:	f04f 30ff 	mov.w	r0, #4294967295
 800064e:	f009 fa01 	bl	8009a54 <UTIL_SEQ_Run>
  return;
 8000652:	bf00      	nop
}
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000662:	2100      	movs	r1, #0
 8000664:	2008      	movs	r0, #8
 8000666:	f009 fb13 	bl	8009c90 <UTIL_SEQ_SetTask>
  return;
 800066a:	bf00      	nop
}
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}

08000672 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b082      	sub	sp, #8
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800067a:	2002      	movs	r0, #2
 800067c:	f009 fb74 	bl	8009d68 <UTIL_SEQ_SetEvt>
  return;
 8000680:	bf00      	nop
}
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}

08000688 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000690:	2002      	movs	r0, #2
 8000692:	f009 fb89 	bl	8009da8 <UTIL_SEQ_WaitEvt>
  return;
 8000696:	bf00      	nop
}
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
	...

080006a0 <UTIL_SEQ_PreIdle>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void UTIL_SEQ_PreIdle(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 0);
 80006a4:	2200      	movs	r2, #0
 80006a6:	2140      	movs	r1, #64	@ 0x40
 80006a8:	4802      	ldr	r0, [pc, #8]	@ (80006b4 <UTIL_SEQ_PreIdle+0x14>)
 80006aa:	f003 f89b 	bl	80037e4 <HAL_GPIO_WritePin>
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	48000400 	.word	0x48000400

080006b8 <UTIL_SEQ_PostIdle>:

void UTIL_SEQ_PostIdle(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2140      	movs	r1, #64	@ 0x40
 80006c0:	4802      	ldr	r0, [pc, #8]	@ (80006cc <UTIL_SEQ_PostIdle+0x14>)
 80006c2:	f003 f88f 	bl	80037e4 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	48000400 	.word	0x48000400

080006d0 <LL_EXTI_EnableIT_0_31>:
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80006da:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80006de:	4905      	ldr	r1, [pc, #20]	@ (80006f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	58000800 	.word	0x58000800

080006f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4904      	ldr	r1, [pc, #16]	@ (8000718 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	4313      	orrs	r3, r2
 800070a:	600b      	str	r3, [r1, #0]

}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	58000800 	.word	0x58000800

0800071c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <ReadRtcSsrValue+0x3c>)
 8000724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000726:	b29b      	uxth	r3, r3
 8000728:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <ReadRtcSsrValue+0x3c>)
 800072c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800072e:	b29b      	uxth	r3, r3
 8000730:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000732:	e005      	b.n	8000740 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000738:	4b07      	ldr	r3, [pc, #28]	@ (8000758 <ReadRtcSsrValue+0x3c>)
 800073a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800073c:	b29b      	uxth	r3, r3
 800073e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d1f5      	bne.n	8000734 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000748:	683b      	ldr	r3, [r7, #0]
}
 800074a:	4618      	mov	r0, r3
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40002800 	.word	0x40002800

0800075c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800075c:	b480      	push	{r7}
 800075e:	b085      	sub	sp, #20
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	460a      	mov	r2, r1
 8000766:	71fb      	strb	r3, [r7, #7]
 8000768:	4613      	mov	r3, r2
 800076a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800076c:	79ba      	ldrb	r2, [r7, #6]
 800076e:	491d      	ldr	r1, [pc, #116]	@ (80007e4 <LinkTimerAfter+0x88>)
 8000770:	4613      	mov	r3, r2
 8000772:	005b      	lsls	r3, r3, #1
 8000774:	4413      	add	r3, r2
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	440b      	add	r3, r1
 800077a:	3315      	adds	r3, #21
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000780:	7bfb      	ldrb	r3, [r7, #15]
 8000782:	2b06      	cmp	r3, #6
 8000784:	d009      	beq.n	800079a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000786:	7bfa      	ldrb	r2, [r7, #15]
 8000788:	4916      	ldr	r1, [pc, #88]	@ (80007e4 <LinkTimerAfter+0x88>)
 800078a:	4613      	mov	r3, r2
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	00db      	lsls	r3, r3, #3
 8000792:	440b      	add	r3, r1
 8000794:	3314      	adds	r3, #20
 8000796:	79fa      	ldrb	r2, [r7, #7]
 8000798:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800079a:	79fa      	ldrb	r2, [r7, #7]
 800079c:	4911      	ldr	r1, [pc, #68]	@ (80007e4 <LinkTimerAfter+0x88>)
 800079e:	4613      	mov	r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	4413      	add	r3, r2
 80007a4:	00db      	lsls	r3, r3, #3
 80007a6:	440b      	add	r3, r1
 80007a8:	3315      	adds	r3, #21
 80007aa:	7bfa      	ldrb	r2, [r7, #15]
 80007ac:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80007ae:	79fa      	ldrb	r2, [r7, #7]
 80007b0:	490c      	ldr	r1, [pc, #48]	@ (80007e4 <LinkTimerAfter+0x88>)
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	00db      	lsls	r3, r3, #3
 80007ba:	440b      	add	r3, r1
 80007bc:	3314      	adds	r3, #20
 80007be:	79ba      	ldrb	r2, [r7, #6]
 80007c0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80007c2:	79ba      	ldrb	r2, [r7, #6]
 80007c4:	4907      	ldr	r1, [pc, #28]	@ (80007e4 <LinkTimerAfter+0x88>)
 80007c6:	4613      	mov	r3, r2
 80007c8:	005b      	lsls	r3, r3, #1
 80007ca:	4413      	add	r3, r2
 80007cc:	00db      	lsls	r3, r3, #3
 80007ce:	440b      	add	r3, r1
 80007d0:	3315      	adds	r3, #21
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	701a      	strb	r2, [r3, #0]

  return;
 80007d6:	bf00      	nop
}
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	200000bc 	.word	0x200000bc

080007e8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	460a      	mov	r2, r1
 80007f2:	71fb      	strb	r3, [r7, #7]
 80007f4:	4613      	mov	r3, r2
 80007f6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80007f8:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <LinkTimerBefore+0xb8>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	79ba      	ldrb	r2, [r7, #6]
 8000800:	429a      	cmp	r2, r3
 8000802:	d032      	beq.n	800086a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	4927      	ldr	r1, [pc, #156]	@ (80008a4 <LinkTimerBefore+0xbc>)
 8000808:	4613      	mov	r3, r2
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	4413      	add	r3, r2
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	440b      	add	r3, r1
 8000812:	3314      	adds	r3, #20
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000818:	7bfa      	ldrb	r2, [r7, #15]
 800081a:	4922      	ldr	r1, [pc, #136]	@ (80008a4 <LinkTimerBefore+0xbc>)
 800081c:	4613      	mov	r3, r2
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	440b      	add	r3, r1
 8000826:	3315      	adds	r3, #21
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800082c:	79fa      	ldrb	r2, [r7, #7]
 800082e:	491d      	ldr	r1, [pc, #116]	@ (80008a4 <LinkTimerBefore+0xbc>)
 8000830:	4613      	mov	r3, r2
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	4413      	add	r3, r2
 8000836:	00db      	lsls	r3, r3, #3
 8000838:	440b      	add	r3, r1
 800083a:	3315      	adds	r3, #21
 800083c:	79ba      	ldrb	r2, [r7, #6]
 800083e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000840:	79fa      	ldrb	r2, [r7, #7]
 8000842:	4918      	ldr	r1, [pc, #96]	@ (80008a4 <LinkTimerBefore+0xbc>)
 8000844:	4613      	mov	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	4413      	add	r3, r2
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	440b      	add	r3, r1
 800084e:	3314      	adds	r3, #20
 8000850:	7bfa      	ldrb	r2, [r7, #15]
 8000852:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	4913      	ldr	r1, [pc, #76]	@ (80008a4 <LinkTimerBefore+0xbc>)
 8000858:	4613      	mov	r3, r2
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	4413      	add	r3, r2
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	440b      	add	r3, r1
 8000862:	3314      	adds	r3, #20
 8000864:	79fa      	ldrb	r2, [r7, #7]
 8000866:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000868:	e014      	b.n	8000894 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800086a:	79fa      	ldrb	r2, [r7, #7]
 800086c:	490d      	ldr	r1, [pc, #52]	@ (80008a4 <LinkTimerBefore+0xbc>)
 800086e:	4613      	mov	r3, r2
 8000870:	005b      	lsls	r3, r3, #1
 8000872:	4413      	add	r3, r2
 8000874:	00db      	lsls	r3, r3, #3
 8000876:	440b      	add	r3, r1
 8000878:	3315      	adds	r3, #21
 800087a:	79ba      	ldrb	r2, [r7, #6]
 800087c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800087e:	79ba      	ldrb	r2, [r7, #6]
 8000880:	4908      	ldr	r1, [pc, #32]	@ (80008a4 <LinkTimerBefore+0xbc>)
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	440b      	add	r3, r1
 800088c:	3314      	adds	r3, #20
 800088e:	79fa      	ldrb	r2, [r7, #7]
 8000890:	701a      	strb	r2, [r3, #0]
  return;
 8000892:	bf00      	nop
}
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	2000014c 	.word	0x2000014c
 80008a4:	200000bc 	.word	0x200000bc

080008a8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80008b2:	4b4e      	ldr	r3, [pc, #312]	@ (80009ec <linkTimer+0x144>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b06      	cmp	r3, #6
 80008ba:	d118      	bne.n	80008ee <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80008bc:	4b4b      	ldr	r3, [pc, #300]	@ (80009ec <linkTimer+0x144>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4b4b      	ldr	r3, [pc, #300]	@ (80009f0 <linkTimer+0x148>)
 80008c4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80008c6:	4a49      	ldr	r2, [pc, #292]	@ (80009ec <linkTimer+0x144>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80008cc:	79fa      	ldrb	r2, [r7, #7]
 80008ce:	4949      	ldr	r1, [pc, #292]	@ (80009f4 <linkTimer+0x14c>)
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	00db      	lsls	r3, r3, #3
 80008d8:	440b      	add	r3, r1
 80008da:	3315      	adds	r3, #21
 80008dc:	2206      	movs	r2, #6
 80008de:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80008e0:	4b45      	ldr	r3, [pc, #276]	@ (80009f8 <linkTimer+0x150>)
 80008e2:	f04f 32ff 	mov.w	r2, #4294967295
 80008e6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	81fb      	strh	r3, [r7, #14]
 80008ec:	e078      	b.n	80009e0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80008ee:	f000 f909 	bl	8000b04 <ReturnTimeElapsed>
 80008f2:	4603      	mov	r3, r0
 80008f4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80008f6:	79fa      	ldrb	r2, [r7, #7]
 80008f8:	493e      	ldr	r1, [pc, #248]	@ (80009f4 <linkTimer+0x14c>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4413      	add	r3, r2
 8000900:	00db      	lsls	r3, r3, #3
 8000902:	440b      	add	r3, r1
 8000904:	3308      	adds	r3, #8
 8000906:	6819      	ldr	r1, [r3, #0]
 8000908:	89fb      	ldrh	r3, [r7, #14]
 800090a:	79fa      	ldrb	r2, [r7, #7]
 800090c:	4419      	add	r1, r3
 800090e:	4839      	ldr	r0, [pc, #228]	@ (80009f4 <linkTimer+0x14c>)
 8000910:	4613      	mov	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	4413      	add	r3, r2
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	4403      	add	r3, r0
 800091a:	3308      	adds	r3, #8
 800091c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800091e:	79fa      	ldrb	r2, [r7, #7]
 8000920:	4934      	ldr	r1, [pc, #208]	@ (80009f4 <linkTimer+0x14c>)
 8000922:	4613      	mov	r3, r2
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	4413      	add	r3, r2
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	440b      	add	r3, r1
 800092c:	3308      	adds	r3, #8
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000932:	4b2e      	ldr	r3, [pc, #184]	@ (80009ec <linkTimer+0x144>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	4619      	mov	r1, r3
 800093a:	4a2e      	ldr	r2, [pc, #184]	@ (80009f4 <linkTimer+0x14c>)
 800093c:	460b      	mov	r3, r1
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	440b      	add	r3, r1
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	4413      	add	r3, r2
 8000946:	3308      	adds	r3, #8
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	68ba      	ldr	r2, [r7, #8]
 800094c:	429a      	cmp	r2, r3
 800094e:	d337      	bcc.n	80009c0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000950:	4b26      	ldr	r3, [pc, #152]	@ (80009ec <linkTimer+0x144>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000956:	7b7a      	ldrb	r2, [r7, #13]
 8000958:	4926      	ldr	r1, [pc, #152]	@ (80009f4 <linkTimer+0x14c>)
 800095a:	4613      	mov	r3, r2
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	4413      	add	r3, r2
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	440b      	add	r3, r1
 8000964:	3315      	adds	r3, #21
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800096a:	e013      	b.n	8000994 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800096c:	7b7a      	ldrb	r2, [r7, #13]
 800096e:	4921      	ldr	r1, [pc, #132]	@ (80009f4 <linkTimer+0x14c>)
 8000970:	4613      	mov	r3, r2
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	4413      	add	r3, r2
 8000976:	00db      	lsls	r3, r3, #3
 8000978:	440b      	add	r3, r1
 800097a:	3315      	adds	r3, #21
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000980:	7b7a      	ldrb	r2, [r7, #13]
 8000982:	491c      	ldr	r1, [pc, #112]	@ (80009f4 <linkTimer+0x14c>)
 8000984:	4613      	mov	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	4413      	add	r3, r2
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	440b      	add	r3, r1
 800098e:	3315      	adds	r3, #21
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000994:	7b3b      	ldrb	r3, [r7, #12]
 8000996:	2b06      	cmp	r3, #6
 8000998:	d00b      	beq.n	80009b2 <linkTimer+0x10a>
 800099a:	7b3a      	ldrb	r2, [r7, #12]
 800099c:	4915      	ldr	r1, [pc, #84]	@ (80009f4 <linkTimer+0x14c>)
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	440b      	add	r3, r1
 80009a8:	3308      	adds	r3, #8
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d2dc      	bcs.n	800096c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80009b2:	7b7a      	ldrb	r2, [r7, #13]
 80009b4:	79fb      	ldrb	r3, [r7, #7]
 80009b6:	4611      	mov	r1, r2
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fecf 	bl	800075c <LinkTimerAfter>
 80009be:	e00f      	b.n	80009e0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80009c0:	4b0a      	ldr	r3, [pc, #40]	@ (80009ec <linkTimer+0x144>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ff0c 	bl	80007e8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80009d0:	4b06      	ldr	r3, [pc, #24]	@ (80009ec <linkTimer+0x144>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <linkTimer+0x148>)
 80009d8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80009da:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <linkTimer+0x144>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80009e0:	89fb      	ldrh	r3, [r7, #14]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000014c 	.word	0x2000014c
 80009f0:	2000014d 	.word	0x2000014d
 80009f4:	200000bc 	.word	0x200000bc
 80009f8:	20000150 	.word	0x20000150

080009fc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	460a      	mov	r2, r1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000a0c:	4b39      	ldr	r3, [pc, #228]	@ (8000af4 <UnlinkTimer+0xf8>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b2db      	uxtb	r3, r3
 8000a12:	79fa      	ldrb	r2, [r7, #7]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d111      	bne.n	8000a3c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000a18:	4b36      	ldr	r3, [pc, #216]	@ (8000af4 <UnlinkTimer+0xf8>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2da      	uxtb	r2, r3
 8000a1e:	4b36      	ldr	r3, [pc, #216]	@ (8000af8 <UnlinkTimer+0xfc>)
 8000a20:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000a22:	79fa      	ldrb	r2, [r7, #7]
 8000a24:	4935      	ldr	r1, [pc, #212]	@ (8000afc <UnlinkTimer+0x100>)
 8000a26:	4613      	mov	r3, r2
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	4413      	add	r3, r2
 8000a2c:	00db      	lsls	r3, r3, #3
 8000a2e:	440b      	add	r3, r1
 8000a30:	3315      	adds	r3, #21
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	4b2f      	ldr	r3, [pc, #188]	@ (8000af4 <UnlinkTimer+0xf8>)
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e03e      	b.n	8000aba <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000a3c:	79fa      	ldrb	r2, [r7, #7]
 8000a3e:	492f      	ldr	r1, [pc, #188]	@ (8000afc <UnlinkTimer+0x100>)
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	440b      	add	r3, r1
 8000a4a:	3314      	adds	r3, #20
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000a50:	79fa      	ldrb	r2, [r7, #7]
 8000a52:	492a      	ldr	r1, [pc, #168]	@ (8000afc <UnlinkTimer+0x100>)
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	440b      	add	r3, r1
 8000a5e:	3315      	adds	r3, #21
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000a64:	79f9      	ldrb	r1, [r7, #7]
 8000a66:	7bfa      	ldrb	r2, [r7, #15]
 8000a68:	4824      	ldr	r0, [pc, #144]	@ (8000afc <UnlinkTimer+0x100>)
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	440b      	add	r3, r1
 8000a70:	00db      	lsls	r3, r3, #3
 8000a72:	4403      	add	r3, r0
 8000a74:	3315      	adds	r3, #21
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2d8      	uxtb	r0, r3
 8000a7a:	4920      	ldr	r1, [pc, #128]	@ (8000afc <UnlinkTimer+0x100>)
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	440b      	add	r3, r1
 8000a86:	3315      	adds	r3, #21
 8000a88:	4602      	mov	r2, r0
 8000a8a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d013      	beq.n	8000aba <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a92:	79f9      	ldrb	r1, [r7, #7]
 8000a94:	7bba      	ldrb	r2, [r7, #14]
 8000a96:	4819      	ldr	r0, [pc, #100]	@ (8000afc <UnlinkTimer+0x100>)
 8000a98:	460b      	mov	r3, r1
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	440b      	add	r3, r1
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	4403      	add	r3, r0
 8000aa2:	3314      	adds	r3, #20
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b2d8      	uxtb	r0, r3
 8000aa8:	4914      	ldr	r1, [pc, #80]	@ (8000afc <UnlinkTimer+0x100>)
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	440b      	add	r3, r1
 8000ab4:	3314      	adds	r3, #20
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	490f      	ldr	r1, [pc, #60]	@ (8000afc <UnlinkTimer+0x100>)
 8000abe:	4613      	mov	r3, r2
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	4413      	add	r3, r2
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	440b      	add	r3, r1
 8000ac8:	330c      	adds	r3, #12
 8000aca:	2201      	movs	r2, #1
 8000acc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <UnlinkTimer+0xf8>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b06      	cmp	r3, #6
 8000ad6:	d107      	bne.n	8000ae8 <UnlinkTimer+0xec>
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d104      	bne.n	8000ae8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000ade:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <UnlinkTimer+0x104>)
 8000ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  return;
 8000ae6:	bf00      	nop
 8000ae8:	bf00      	nop
}
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	2000014c 	.word	0x2000014c
 8000af8:	2000014d 	.word	0x2000014d
 8000afc:	200000bc 	.word	0x200000bc
 8000b00:	20000150 	.word	0x20000150

08000b04 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <ReturnTimeElapsed+0x70>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b12:	d026      	beq.n	8000b62 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000b14:	f7ff fe02 	bl	800071c <ReadRtcSsrValue>
 8000b18:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <ReturnTimeElapsed+0x70>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	d805      	bhi.n	8000b30 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <ReturnTimeElapsed+0x70>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	e00a      	b.n	8000b46 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <ReturnTimeElapsed+0x74>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000b3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b74 <ReturnTimeElapsed+0x70>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	4413      	add	r3, r2
 8000b44:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <ReturnTimeElapsed+0x78>)
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	fb02 f303 	mul.w	r3, r2, r3
 8000b52:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <ReturnTimeElapsed+0x7c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	40d3      	lsrs	r3, r2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	e001      	b.n	8000b66 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	b29b      	uxth	r3, r3
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000150 	.word	0x20000150
 8000b78:	20000158 	.word	0x20000158
 8000b7c:	20000156 	.word	0x20000156
 8000b80:	20000155 	.word	0x20000155

08000b84 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d108      	bne.n	8000ba6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b94:	f7ff fdc2 	bl	800071c <ReadRtcSsrValue>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a21      	ldr	r2, [pc, #132]	@ (8000c20 <RestartWakeupCounter+0x9c>)
 8000b9c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b9e:	2003      	movs	r0, #3
 8000ba0:	f002 fbc5 	bl	800332e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000ba4:	e039      	b.n	8000c1a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d803      	bhi.n	8000bb4 <RestartWakeupCounter+0x30>
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <RestartWakeupCounter+0xa0>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d002      	beq.n	8000bba <RestartWakeupCounter+0x36>
      Value -= 1;
 8000bb4:	88fb      	ldrh	r3, [r7, #6]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000bba:	bf00      	nop
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <RestartWakeupCounter+0xa4>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f8      	beq.n	8000bbc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <RestartWakeupCounter+0xa4>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <RestartWakeupCounter+0xa4>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000bda:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <RestartWakeupCounter+0xa8>)
 8000bde:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000be2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000be4:	2003      	movs	r0, #3
 8000be6:	f002 fbb0 	bl	800334a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <RestartWakeupCounter+0xac>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	0c1b      	lsrs	r3, r3, #16
 8000bf0:	041b      	lsls	r3, r3, #16
 8000bf2:	88fa      	ldrh	r2, [r7, #6]
 8000bf4:	490e      	ldr	r1, [pc, #56]	@ (8000c30 <RestartWakeupCounter+0xac>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000bfa:	f7ff fd8f 	bl	800071c <ReadRtcSsrValue>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a07      	ldr	r2, [pc, #28]	@ (8000c20 <RestartWakeupCounter+0x9c>)
 8000c02:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000c04:	4b08      	ldr	r3, [pc, #32]	@ (8000c28 <RestartWakeupCounter+0xa4>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <RestartWakeupCounter+0xa4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c12:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000c14:	f3af 8000 	nop.w
  return ;
 8000c18:	bf00      	nop
}
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000150 	.word	0x20000150
 8000c24:	20000155 	.word	0x20000155
 8000c28:	200001ec 	.word	0x200001ec
 8000c2c:	58000800 	.word	0x58000800
 8000c30:	40002800 	.word	0x40002800

08000c34 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000c3a:	4b45      	ldr	r3, [pc, #276]	@ (8000d50 <RescheduleTimerList+0x11c>)
 8000c3c:	689b      	ldr	r3, [r3, #8]
 8000c3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c46:	d107      	bne.n	8000c58 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000c48:	bf00      	nop
 8000c4a:	4b42      	ldr	r3, [pc, #264]	@ (8000d54 <RescheduleTimerList+0x120>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	f003 0304 	and.w	r3, r3, #4
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1f8      	bne.n	8000c4a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000c58:	4b3e      	ldr	r3, [pc, #248]	@ (8000d54 <RescheduleTimerList+0x120>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689a      	ldr	r2, [r3, #8]
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <RescheduleTimerList+0x120>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c66:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c68:	4b3b      	ldr	r3, [pc, #236]	@ (8000d58 <RescheduleTimerList+0x124>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c6e:	7bfa      	ldrb	r2, [r7, #15]
 8000c70:	493a      	ldr	r1, [pc, #232]	@ (8000d5c <RescheduleTimerList+0x128>)
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	00db      	lsls	r3, r3, #3
 8000c7a:	440b      	add	r3, r1
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c82:	f7ff ff3f 	bl	8000b04 <ReturnTimeElapsed>
 8000c86:	4603      	mov	r3, r0
 8000c88:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d205      	bcs.n	8000c9e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c96:	4b32      	ldr	r3, [pc, #200]	@ (8000d60 <RescheduleTimerList+0x12c>)
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
 8000c9c:	e04d      	b.n	8000d3a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c9e:	88fb      	ldrh	r3, [r7, #6]
 8000ca0:	4a30      	ldr	r2, [pc, #192]	@ (8000d64 <RescheduleTimerList+0x130>)
 8000ca2:	8812      	ldrh	r2, [r2, #0]
 8000ca4:	b292      	uxth	r2, r2
 8000ca6:	4413      	add	r3, r2
 8000ca8:	461a      	mov	r2, r3
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d906      	bls.n	8000cbe <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d64 <RescheduleTimerList+0x130>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000d60 <RescheduleTimerList+0x12c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
 8000cbc:	e03d      	b.n	8000d3a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	88fb      	ldrh	r3, [r7, #6]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000cc8:	4b25      	ldr	r3, [pc, #148]	@ (8000d60 <RescheduleTimerList+0x12c>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cce:	e034      	b.n	8000d3a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000cd0:	7bfa      	ldrb	r2, [r7, #15]
 8000cd2:	4922      	ldr	r1, [pc, #136]	@ (8000d5c <RescheduleTimerList+0x128>)
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	3308      	adds	r3, #8
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	88fb      	ldrh	r3, [r7, #6]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d20a      	bcs.n	8000cfe <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000ce8:	7bfa      	ldrb	r2, [r7, #15]
 8000cea:	491c      	ldr	r1, [pc, #112]	@ (8000d5c <RescheduleTimerList+0x128>)
 8000cec:	4613      	mov	r3, r2
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	4413      	add	r3, r2
 8000cf2:	00db      	lsls	r3, r3, #3
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3308      	adds	r3, #8
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	e013      	b.n	8000d26 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000cfe:	7bfa      	ldrb	r2, [r7, #15]
 8000d00:	4916      	ldr	r1, [pc, #88]	@ (8000d5c <RescheduleTimerList+0x128>)
 8000d02:	4613      	mov	r3, r2
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	4413      	add	r3, r2
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	440b      	add	r3, r1
 8000d0c:	3308      	adds	r3, #8
 8000d0e:	6819      	ldr	r1, [r3, #0]
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	7bfa      	ldrb	r2, [r7, #15]
 8000d14:	1ac9      	subs	r1, r1, r3
 8000d16:	4811      	ldr	r0, [pc, #68]	@ (8000d5c <RescheduleTimerList+0x128>)
 8000d18:	4613      	mov	r3, r2
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	4403      	add	r3, r0
 8000d22:	3308      	adds	r3, #8
 8000d24:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000d26:	7bfa      	ldrb	r2, [r7, #15]
 8000d28:	490c      	ldr	r1, [pc, #48]	@ (8000d5c <RescheduleTimerList+0x128>)
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	440b      	add	r3, r1
 8000d34:	3315      	adds	r3, #21
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d3a:	7bfb      	ldrb	r3, [r7, #15]
 8000d3c:	2b06      	cmp	r3, #6
 8000d3e:	d1c7      	bne.n	8000cd0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000d40:	89bb      	ldrh	r3, [r7, #12]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff1e 	bl	8000b84 <RestartWakeupCounter>

  return ;
 8000d48:	bf00      	nop
}
 8000d4a:	3710      	adds	r7, #16
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40002800 	.word	0x40002800
 8000d54:	200001ec 	.word	0x200001ec
 8000d58:	2000014c 	.word	0x2000014c
 8000d5c:	200000bc 	.word	0x200000bc
 8000d60:	20000154 	.word	0x20000154
 8000d64:	2000015a 	.word	0x2000015a

08000d68 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8000d72:	617b      	str	r3, [r7, #20]
  return(result);
 8000d74:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000d7c:	4b59      	ldr	r3, [pc, #356]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	22ca      	movs	r2, #202	@ 0xca
 8000d82:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d84:	4b57      	ldr	r3, [pc, #348]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2253      	movs	r2, #83	@ 0x53
 8000d8a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000d8c:	4b55      	ldr	r3, [pc, #340]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	689a      	ldr	r2, [r3, #8]
 8000d92:	4b54      	ldr	r3, [pc, #336]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d9a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d9c:	4b52      	ldr	r3, [pc, #328]	@ (8000ee8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000da4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000da8:	4950      	ldr	r1, [pc, #320]	@ (8000eec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	440b      	add	r3, r1
 8000db4:	330c      	adds	r3, #12
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d16e      	bne.n	8000e9c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000dbe:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dc2:	494a      	ldr	r1, [pc, #296]	@ (8000eec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4413      	add	r3, r2
 8000dca:	00db      	lsls	r3, r3, #3
 8000dcc:	440b      	add	r3, r1
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000dd2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dd6:	4945      	ldr	r1, [pc, #276]	@ (8000eec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	440b      	add	r3, r1
 8000de2:	3310      	adds	r3, #16
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000de8:	4b41      	ldr	r3, [pc, #260]	@ (8000ef0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d04c      	beq.n	8000e8c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000df2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000df6:	493d      	ldr	r1, [pc, #244]	@ (8000eec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	440b      	add	r3, r1
 8000e02:	330d      	adds	r3, #13
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d124      	bne.n	8000e56 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e10:	2101      	movs	r1, #1
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fdf2 	bl	80009fc <UnlinkTimer>
 8000e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e1a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	f383 8810 	msr	PRIMASK, r3
}
 8000e22:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000e24:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000e28:	4930      	ldr	r1, [pc, #192]	@ (8000eec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	4413      	add	r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	440b      	add	r3, r1
 8000e34:	3304      	adds	r3, #4
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 fa32 	bl	80012a8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e44:	4b27      	ldr	r3, [pc, #156]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	22ca      	movs	r2, #202	@ 0xca
 8000e4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2253      	movs	r2, #83	@ 0x53
 8000e52:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e54:	e012      	b.n	8000e7c <HW_TS_RTC_Wakeup_Handler+0x114>
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f383 8810 	msr	PRIMASK, r3
}
 8000e60:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f99a 	bl	80011a0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	22ca      	movs	r2, #202	@ 0xca
 8000e72:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2253      	movs	r2, #83	@ 0x53
 8000e7a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	4619      	mov	r1, r3
 8000e84:	69b8      	ldr	r0, [r7, #24]
 8000e86:	f000 fa95 	bl	80013b4 <HW_TS_RTC_Int_AppNot>
 8000e8a:	e022      	b.n	8000ed2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000e8c:	f7ff fed2 	bl	8000c34 <RescheduleTimerList>
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	f383 8810 	msr	PRIMASK, r3
}
 8000e9a:	e01a      	b.n	8000ed2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e9c:	bf00      	nop
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d0f8      	beq.n	8000e9e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eac:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000ebc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8000ef4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000ec0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f383 8810 	msr	PRIMASK, r3
}
 8000ed0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000ed2:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	22ff      	movs	r2, #255	@ 0xff
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8000eda:	bf00      	nop
}
 8000edc:	3728      	adds	r7, #40	@ 0x28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200001ec 	.word	0x200001ec
 8000ee8:	2000014c 	.word	0x2000014c
 8000eec:	200000bc 	.word	0x200000bc
 8000ef0:	20000154 	.word	0x20000154
 8000ef4:	58000800 	.word	0x58000800

08000ef8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000f04:	4b5e      	ldr	r3, [pc, #376]	@ (8001080 <HW_TS_Init+0x188>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	22ca      	movs	r2, #202	@ 0xca
 8000f0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f0c:	4b5c      	ldr	r3, [pc, #368]	@ (8001080 <HW_TS_Init+0x188>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2253      	movs	r2, #83	@ 0x53
 8000f12:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000f14:	4b5b      	ldr	r3, [pc, #364]	@ (8001084 <HW_TS_Init+0x18c>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	4a5a      	ldr	r2, [pc, #360]	@ (8001084 <HW_TS_Init+0x18c>)
 8000f1a:	f043 0320 	orr.w	r3, r3, #32
 8000f1e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000f20:	4b58      	ldr	r3, [pc, #352]	@ (8001084 <HW_TS_Init+0x18c>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	b2db      	uxtb	r3, r3
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f1c3 0304 	rsb	r3, r3, #4
 8000f30:	b2da      	uxtb	r2, r3
 8000f32:	4b55      	ldr	r3, [pc, #340]	@ (8001088 <HW_TS_Init+0x190>)
 8000f34:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000f36:	4b53      	ldr	r3, [pc, #332]	@ (8001084 <HW_TS_Init+0x18c>)
 8000f38:	691b      	ldr	r3, [r3, #16]
 8000f3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000f3e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000f42:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	fa92 f2a2 	rbit	r2, r2
 8000f4a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f4c:	68fa      	ldr	r2, [r7, #12]
 8000f4e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	d101      	bne.n	8000f5a <HW_TS_Init+0x62>
  {
    return 32U;
 8000f56:	2220      	movs	r2, #32
 8000f58:	e003      	b.n	8000f62 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	fab2 f282 	clz	r2, r2
 8000f60:	b2d2      	uxtb	r2, r2
 8000f62:	40d3      	lsrs	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	3301      	adds	r3, #1
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4b48      	ldr	r3, [pc, #288]	@ (800108c <HW_TS_Init+0x194>)
 8000f6c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f6e:	4b45      	ldr	r3, [pc, #276]	@ (8001084 <HW_TS_Init+0x18c>)
 8000f70:	691b      	ldr	r3, [r3, #16]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	4b44      	ldr	r3, [pc, #272]	@ (8001090 <HW_TS_Init+0x198>)
 8000f80:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f82:	4b43      	ldr	r3, [pc, #268]	@ (8001090 <HW_TS_Init+0x198>)
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	4a40      	ldr	r2, [pc, #256]	@ (800108c <HW_TS_Init+0x194>)
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	fb02 f303 	mul.w	r3, r2, r3
 8000f90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000f94:	4a3c      	ldr	r2, [pc, #240]	@ (8001088 <HW_TS_Init+0x190>)
 8000f96:	7812      	ldrb	r2, [r2, #0]
 8000f98:	40d3      	lsrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d904      	bls.n	8000fb0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8001094 <HW_TS_Init+0x19c>)
 8000fa8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fac:	801a      	strh	r2, [r3, #0]
 8000fae:	e003      	b.n	8000fb8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b37      	ldr	r3, [pc, #220]	@ (8001094 <HW_TS_Init+0x19c>)
 8000fb6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000fb8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000fbc:	f7ff fb9c 	bl	80006f8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000fc0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000fc4:	f7ff fb84 	bl	80006d0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d13d      	bne.n	800104a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fce:	4b32      	ldr	r3, [pc, #200]	@ (8001098 <HW_TS_Init+0x1a0>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000fd4:	4b31      	ldr	r3, [pc, #196]	@ (800109c <HW_TS_Init+0x1a4>)
 8000fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fda:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	77fb      	strb	r3, [r7, #31]
 8000fe0:	e00c      	b.n	8000ffc <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000fe2:	7ffa      	ldrb	r2, [r7, #31]
 8000fe4:	492e      	ldr	r1, [pc, #184]	@ (80010a0 <HW_TS_Init+0x1a8>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	330c      	adds	r3, #12
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000ff6:	7ffb      	ldrb	r3, [r7, #31]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	77fb      	strb	r3, [r7, #31]
 8000ffc:	7ffb      	ldrb	r3, [r7, #31]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d9ef      	bls.n	8000fe2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001002:	4b28      	ldr	r3, [pc, #160]	@ (80010a4 <HW_TS_Init+0x1ac>)
 8001004:	2206      	movs	r2, #6
 8001006:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001008:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <HW_TS_Init+0x188>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <HW_TS_Init+0x188>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001016:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001018:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HW_TS_Init+0x188>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <HW_TS_Init+0x188>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001028:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800102a:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <HW_TS_Init+0x1b0>)
 800102c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001030:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001032:	2003      	movs	r0, #3
 8001034:	f002 f989 	bl	800334a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001038:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <HW_TS_Init+0x188>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	4b10      	ldr	r3, [pc, #64]	@ (8001080 <HW_TS_Init+0x188>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	e009      	b.n	800105e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800104a:	4b0d      	ldr	r3, [pc, #52]	@ (8001080 <HW_TS_Init+0x188>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001058:	2003      	movs	r0, #3
 800105a:	f002 f968 	bl	800332e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800105e:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HW_TS_Init+0x188>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	22ff      	movs	r2, #255	@ 0xff
 8001064:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001066:	2200      	movs	r2, #0
 8001068:	2103      	movs	r1, #3
 800106a:	2003      	movs	r0, #3
 800106c:	f002 f91d 	bl	80032aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001070:	2003      	movs	r0, #3
 8001072:	f002 f934 	bl	80032de <HAL_NVIC_EnableIRQ>

  return;
 8001076:	bf00      	nop
}
 8001078:	3720      	adds	r7, #32
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001ec 	.word	0x200001ec
 8001084:	40002800 	.word	0x40002800
 8001088:	20000155 	.word	0x20000155
 800108c:	20000156 	.word	0x20000156
 8001090:	20000158 	.word	0x20000158
 8001094:	2000015a 	.word	0x2000015a
 8001098:	20000154 	.word	0x20000154
 800109c:	20000150 	.word	0x20000150
 80010a0:	200000bc 	.word	0x200000bc
 80010a4:	2000014c 	.word	0x2000014c
 80010a8:	58000800 	.word	0x58000800

080010ac <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b08b      	sub	sp, #44	@ 0x2c
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	4613      	mov	r3, r2
 80010ba:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80010c2:	f3ef 8310 	mrs	r3, PRIMASK
 80010c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80010c8:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80010ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010d0:	e004      	b.n	80010dc <HW_TS_Create+0x30>
  {
    loop++;
 80010d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010d6:	3301      	adds	r3, #1
 80010d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80010dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d80c      	bhi.n	80010fe <HW_TS_Create+0x52>
 80010e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010e8:	492c      	ldr	r1, [pc, #176]	@ (800119c <HW_TS_Create+0xf0>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4413      	add	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	440b      	add	r3, r1
 80010f4:	330c      	adds	r3, #12
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d1e9      	bne.n	80010d2 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001102:	2b06      	cmp	r3, #6
 8001104:	d038      	beq.n	8001178 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001106:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800110a:	4924      	ldr	r1, [pc, #144]	@ (800119c <HW_TS_Create+0xf0>)
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	330c      	adds	r3, #12
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	f383 8810 	msr	PRIMASK, r3
}
 8001126:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001128:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800112c:	491b      	ldr	r1, [pc, #108]	@ (800119c <HW_TS_Create+0xf0>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3310      	adds	r3, #16
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800113e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001142:	4916      	ldr	r1, [pc, #88]	@ (800119c <HW_TS_Create+0xf0>)
 8001144:	4613      	mov	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	4413      	add	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	440b      	add	r3, r1
 800114e:	330d      	adds	r3, #13
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001154:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001158:	4910      	ldr	r1, [pc, #64]	@ (800119c <HW_TS_Create+0xf0>)
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	440b      	add	r3, r1
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800116e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001176:	e008      	b.n	800118a <HW_TS_Create+0xde>
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	f383 8810 	msr	PRIMASK, r3
}
 8001182:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001184:	2301      	movs	r3, #1
 8001186:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800118a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800118e:	4618      	mov	r0, r3
 8001190:	372c      	adds	r7, #44	@ 0x2c
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	200000bc 	.word	0x200000bc

080011a0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80011aa:	f3ef 8310 	mrs	r3, PRIMASK
 80011ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80011b0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80011b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80011b4:	b672      	cpsid	i
}
 80011b6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80011b8:	2003      	movs	r0, #3
 80011ba:	f002 f89e 	bl	80032fa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80011be:	4b34      	ldr	r3, [pc, #208]	@ (8001290 <HW_TS_Stop+0xf0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	22ca      	movs	r2, #202	@ 0xca
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80011c6:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <HW_TS_Stop+0xf0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2253      	movs	r2, #83	@ 0x53
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80011ce:	79fa      	ldrb	r2, [r7, #7]
 80011d0:	4930      	ldr	r1, [pc, #192]	@ (8001294 <HW_TS_Stop+0xf4>)
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	440b      	add	r3, r1
 80011dc:	330c      	adds	r3, #12
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d142      	bne.n	800126c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fc06 	bl	80009fc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <HW_TS_Stop+0xf8>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80011f6:	7cfb      	ldrb	r3, [r7, #19]
 80011f8:	2b06      	cmp	r3, #6
 80011fa:	d12f      	bne.n	800125c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011fc:	4b27      	ldr	r3, [pc, #156]	@ (800129c <HW_TS_Stop+0xfc>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001208:	d107      	bne.n	800121a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800120a:	bf00      	nop
 800120c:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HW_TS_Stop+0xf0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f8      	bne.n	800120c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <HW_TS_Stop+0xf0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	4b1b      	ldr	r3, [pc, #108]	@ (8001290 <HW_TS_Stop+0xf0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001228:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800122a:	bf00      	nop
 800122c:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <HW_TS_Stop+0xf0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f8      	beq.n	800122c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HW_TS_Stop+0xf0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <HW_TS_Stop+0xf0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800124a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <HW_TS_Stop+0x100>)
 800124e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001252:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001254:	2003      	movs	r0, #3
 8001256:	f002 f878 	bl	800334a <HAL_NVIC_ClearPendingIRQ>
 800125a:	e007      	b.n	800126c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HW_TS_Stop+0x104>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	7cfa      	ldrb	r2, [r7, #19]
 8001264:	429a      	cmp	r2, r3
 8001266:	d001      	beq.n	800126c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8001268:	f7ff fce4 	bl	8000c34 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HW_TS_Stop+0xf0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	22ff      	movs	r2, #255	@ 0xff
 8001272:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001274:	2003      	movs	r0, #3
 8001276:	f002 f832 	bl	80032de <HAL_NVIC_EnableIRQ>
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	f383 8810 	msr	PRIMASK, r3
}
 8001284:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8001286:	bf00      	nop
}
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200001ec 	.word	0x200001ec
 8001294:	200000bc 	.word	0x200000bc
 8001298:	2000014c 	.word	0x2000014c
 800129c:	40002800 	.word	0x40002800
 80012a0:	58000800 	.word	0x58000800
 80012a4:	2000014d 	.word	0x2000014d

080012a8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	6039      	str	r1, [r7, #0]
 80012b2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012b4:	79fa      	ldrb	r2, [r7, #7]
 80012b6:	493b      	ldr	r1, [pc, #236]	@ (80013a4 <HW_TS_Start+0xfc>)
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	330c      	adds	r3, #12
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d103      	bne.n	80012d4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff66 	bl	80011a0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012d4:	f3ef 8310 	mrs	r3, PRIMASK
 80012d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80012da:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012de:	b672      	cpsid	i
}
 80012e0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012e2:	2003      	movs	r0, #3
 80012e4:	f002 f809 	bl	80032fa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012e8:	4b2f      	ldr	r3, [pc, #188]	@ (80013a8 <HW_TS_Start+0x100>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	22ca      	movs	r2, #202	@ 0xca
 80012ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80012f0:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HW_TS_Start+0x100>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2253      	movs	r2, #83	@ 0x53
 80012f6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	492a      	ldr	r1, [pc, #168]	@ (80013a4 <HW_TS_Start+0xfc>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	330c      	adds	r3, #12
 8001308:	2202      	movs	r2, #2
 800130a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800130c:	79fa      	ldrb	r2, [r7, #7]
 800130e:	4925      	ldr	r1, [pc, #148]	@ (80013a4 <HW_TS_Start+0xfc>)
 8001310:	4613      	mov	r3, r2
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	4413      	add	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	440b      	add	r3, r1
 800131a:	3308      	adds	r3, #8
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001320:	79fa      	ldrb	r2, [r7, #7]
 8001322:	4920      	ldr	r1, [pc, #128]	@ (80013a4 <HW_TS_Start+0xfc>)
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	3304      	adds	r3, #4
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff fab6 	bl	80008a8 <linkTimer>
 800133c:	4603      	mov	r3, r0
 800133e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001340:	4b1a      	ldr	r3, [pc, #104]	@ (80013ac <HW_TS_Start+0x104>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <HW_TS_Start+0x108>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b2db      	uxtb	r3, r3
 800134c:	7c7a      	ldrb	r2, [r7, #17]
 800134e:	429a      	cmp	r2, r3
 8001350:	d002      	beq.n	8001358 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001352:	f7ff fc6f 	bl	8000c34 <RescheduleTimerList>
 8001356:	e013      	b.n	8001380 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001358:	79fa      	ldrb	r2, [r7, #7]
 800135a:	4912      	ldr	r1, [pc, #72]	@ (80013a4 <HW_TS_Start+0xfc>)
 800135c:	4613      	mov	r3, r2
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	3308      	adds	r3, #8
 8001368:	6819      	ldr	r1, [r3, #0]
 800136a:	8a7b      	ldrh	r3, [r7, #18]
 800136c:	79fa      	ldrb	r2, [r7, #7]
 800136e:	1ac9      	subs	r1, r1, r3
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <HW_TS_Start+0xfc>)
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	4403      	add	r3, r0
 800137c:	3308      	adds	r3, #8
 800137e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <HW_TS_Start+0x100>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	22ff      	movs	r2, #255	@ 0xff
 8001386:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001388:	2003      	movs	r0, #3
 800138a:	f001 ffa8 	bl	80032de <HAL_NVIC_EnableIRQ>
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f383 8810 	msr	PRIMASK, r3
}
 8001398:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800139a:	bf00      	nop
}
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200000bc 	.word	0x200000bc
 80013a8:	200001ec 	.word	0x200001ec
 80013ac:	2000014c 	.word	0x2000014c
 80013b0:	2000014d 	.word	0x2000014d

080013b4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	460b      	mov	r3, r1
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4798      	blx	r3

  return;
 80013c6:	bf00      	nop
}
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <LL_RCC_LSE_SetDriveCapability>:
{
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80013d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013de:	f023 0218 	bic.w	r2, r3, #24
 80013e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b085      	sub	sp, #20
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001406:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001408:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4313      	orrs	r3, r2
 8001410:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001416:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800141e:	68fb      	ldr	r3, [r7, #12]
}
 8001420:	bf00      	nop
 8001422:	3714      	adds	r7, #20
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001430:	f001 fd4e 	bl	8002ed0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001434:	f7fe ff9e 	bl	8000374 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001438:	f000 f817 	bl	800146a <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800143c:	f000 f870 	bl	8001520 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001440:	f000 f8ca 	bl	80015d8 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001444:	f000 f9dc 	bl	8001800 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001448:	f000 f886 	bl	8001558 <MX_I2C1_Init>
  MX_RTC_Init();
 800144c:	f000 f8e0 	bl	8001610 <MX_RTC_Init>
  MX_SPI1_Init();
 8001450:	f000 f904 	bl	800165c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001454:	f000 f940 	bl	80016d8 <MX_TIM1_Init>
  MX_RF_Init();
 8001458:	f000 f8d2 	bl	8001600 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  ltHWInit();
 800145c:	f001 fb24 	bl	8002aa8 <ltHWInit>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001460:	f7fe ff96 	bl	8000390 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001464:	f7ff f8de 	bl	8000624 <MX_APPE_Process>
 8001468:	e7fc      	b.n	8001464 <main+0x38>

0800146a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b098      	sub	sp, #96	@ 0x60
 800146e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	2244      	movs	r2, #68	@ 0x44
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f008 fd17 	bl	8009eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800147e:	463b      	mov	r3, r7
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
 800148c:	615a      	str	r2, [r3, #20]
 800148e:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001490:	f003 f8fa 	bl	8004688 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001494:	2010      	movs	r0, #16
 8001496:	f7ff ff9a 	bl	80013ce <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800149a:	2307      	movs	r3, #7
 800149c:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800149e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014a4:	2301      	movs	r3, #1
 80014a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014ae:	2340      	movs	r3, #64	@ 0x40
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b2:	2302      	movs	r3, #2
 80014b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014b6:	2303      	movs	r3, #3
 80014b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80014ba:	2310      	movs	r3, #16
 80014bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 8;
 80014be:	2308      	movs	r3, #8
 80014c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014c6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014c8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80014cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4618      	mov	r0, r3
 80014da:	f003 fc25 	bl	8004d28 <HAL_RCC_OscConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80014e4:	f000 f9fe 	bl	80018e4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80014e8:	236f      	movs	r3, #111	@ 0x6f
 80014ea:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ec:	2303      	movs	r3, #3
 80014ee:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80014fc:	2380      	movs	r3, #128	@ 0x80
 80014fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	2103      	movs	r1, #3
 8001508:	4618      	mov	r0, r3
 800150a:	f003 ff43 	bl	8005394 <HAL_RCC_ClockConfig>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001514:	f000 f9e6 	bl	80018e4 <Error_Handler>
  }
}
 8001518:	bf00      	nop
 800151a:	3760      	adds	r7, #96	@ 0x60
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b08a      	sub	sp, #40	@ 0x28
 8001524:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	2224      	movs	r2, #36	@ 0x24
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f008 fcbd 	bl	8009eac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 8001532:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001536:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001538:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4618      	mov	r0, r3
 8001542:	f004 fa7f 	bl	8005a44 <HAL_RCCEx_PeriphCLKConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 800154c:	f000 f9ca 	bl	80018e4 <Error_Handler>
  }
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	@ 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}

08001558 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800155c:	4b1b      	ldr	r3, [pc, #108]	@ (80015cc <MX_I2C1_Init+0x74>)
 800155e:	4a1c      	ldr	r2, [pc, #112]	@ (80015d0 <MX_I2C1_Init+0x78>)
 8001560:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001562:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001564:	4a1b      	ldr	r2, [pc, #108]	@ (80015d4 <MX_I2C1_Init+0x7c>)
 8001566:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001568:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001570:	2201      	movs	r2, #1
 8001572:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001576:	2200      	movs	r2, #0
 8001578:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_I2C1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001582:	2200      	movs	r2, #0
 8001584:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_I2C1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001592:	480e      	ldr	r0, [pc, #56]	@ (80015cc <MX_I2C1_Init+0x74>)
 8001594:	f002 f9a0 	bl	80038d8 <HAL_I2C_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800159e:	f000 f9a1 	bl	80018e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015a2:	2100      	movs	r1, #0
 80015a4:	4809      	ldr	r0, [pc, #36]	@ (80015cc <MX_I2C1_Init+0x74>)
 80015a6:	f002 ff51 	bl	800444c <HAL_I2CEx_ConfigAnalogFilter>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015b0:	f000 f998 	bl	80018e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015b4:	2100      	movs	r1, #0
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_I2C1_Init+0x74>)
 80015b8:	f002 ff93 	bl	80044e2 <HAL_I2CEx_ConfigDigitalFilter>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015c2:	f000 f98f 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000015c 	.word	0x2000015c
 80015d0:	40005400 	.word	0x40005400
 80015d4:	10707dbc 	.word	0x10707dbc

080015d8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <MX_IPCC_Init+0x20>)
 80015de:	4a07      	ldr	r2, [pc, #28]	@ (80015fc <MX_IPCC_Init+0x24>)
 80015e0:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80015e2:	4805      	ldr	r0, [pc, #20]	@ (80015f8 <MX_IPCC_Init+0x20>)
 80015e4:	f002 ffca 	bl	800457c <HAL_IPCC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80015ee:	f000 f979 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200001b0 	.word	0x200001b0
 80015fc:	58000c00 	.word	0x58000c00

08001600 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001614:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <MX_RTC_Init+0x44>)
 8001616:	4a10      	ldr	r2, [pc, #64]	@ (8001658 <MX_RTC_Init+0x48>)
 8001618:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <MX_RTC_Init+0x44>)
 800161c:	2200      	movs	r2, #0
 800161e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001620:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <MX_RTC_Init+0x44>)
 8001622:	220f      	movs	r2, #15
 8001624:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <MX_RTC_Init+0x44>)
 8001628:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800162c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800162e:	4b09      	ldr	r3, [pc, #36]	@ (8001654 <MX_RTC_Init+0x44>)
 8001630:	2200      	movs	r2, #0
 8001632:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001634:	4b07      	ldr	r3, [pc, #28]	@ (8001654 <MX_RTC_Init+0x44>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <MX_RTC_Init+0x44>)
 800163c:	2200      	movs	r2, #0
 800163e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MX_RTC_Init+0x44>)
 8001642:	f004 fadb 	bl	8005bfc <HAL_RTC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 800164c:	f000 f94a 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	200001ec 	.word	0x200001ec
 8001658:	40002800 	.word	0x40002800

0800165c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001660:	4b1b      	ldr	r3, [pc, #108]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001662:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <MX_SPI1_Init+0x78>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b1a      	ldr	r3, [pc, #104]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001668:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800166c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001674:	4b16      	ldr	r3, [pc, #88]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001676:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800167a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <MX_SPI1_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001682:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_SPI1_Init+0x74>)
 800168a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800168e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_SPI1_Init+0x74>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_SPI1_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016a8:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016aa:	2207      	movs	r2, #7
 80016ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016b6:	2208      	movs	r2, #8
 80016b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	@ (80016d0 <MX_SPI1_Init+0x74>)
 80016bc:	f004 fb9e 	bl	8005dfc <HAL_SPI_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80016c6:	f000 f90d 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000210 	.word	0x20000210
 80016d4:	40013000 	.word	0x40013000

080016d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b098      	sub	sp, #96	@ 0x60
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
 80016f4:	609a      	str	r2, [r3, #8]
 80016f6:	60da      	str	r2, [r3, #12]
 80016f8:	611a      	str	r2, [r3, #16]
 80016fa:	615a      	str	r2, [r3, #20]
 80016fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	2234      	movs	r2, #52	@ 0x34
 8001702:	2100      	movs	r1, #0
 8001704:	4618      	mov	r0, r3
 8001706:	f008 fbd1 	bl	8009eac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800170a:	4b3b      	ldr	r3, [pc, #236]	@ (80017f8 <MX_TIM1_Init+0x120>)
 800170c:	4a3b      	ldr	r2, [pc, #236]	@ (80017fc <MX_TIM1_Init+0x124>)
 800170e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001710:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <MX_TIM1_Init+0x120>)
 8001712:	2200      	movs	r2, #0
 8001714:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b38      	ldr	r3, [pc, #224]	@ (80017f8 <MX_TIM1_Init+0x120>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800171c:	4b36      	ldr	r3, [pc, #216]	@ (80017f8 <MX_TIM1_Init+0x120>)
 800171e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001722:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <MX_TIM1_Init+0x120>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800172a:	4b33      	ldr	r3, [pc, #204]	@ (80017f8 <MX_TIM1_Init+0x120>)
 800172c:	2200      	movs	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b31      	ldr	r3, [pc, #196]	@ (80017f8 <MX_TIM1_Init+0x120>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001736:	4830      	ldr	r0, [pc, #192]	@ (80017f8 <MX_TIM1_Init+0x120>)
 8001738:	f004 fc03 	bl	8005f42 <HAL_TIM_PWM_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001742:	f000 f8cf 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800174a:	2300      	movs	r3, #0
 800174c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001752:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001756:	4619      	mov	r1, r3
 8001758:	4827      	ldr	r0, [pc, #156]	@ (80017f8 <MX_TIM1_Init+0x120>)
 800175a:	f004 ffe7 	bl	800672c <HAL_TIMEx_MasterConfigSynchronization>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001764:	f000 f8be 	bl	80018e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001768:	2360      	movs	r3, #96	@ 0x60
 800176a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001770:	2300      	movs	r3, #0
 8001772:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001774:	2300      	movs	r3, #0
 8001776:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001780:	2300      	movs	r3, #0
 8001782:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001784:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001788:	2200      	movs	r2, #0
 800178a:	4619      	mov	r1, r3
 800178c:	481a      	ldr	r0, [pc, #104]	@ (80017f8 <MX_TIM1_Init+0x120>)
 800178e:	f004 fc2f 	bl	8005ff0 <HAL_TIM_PWM_ConfigChannel>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001798:	f000 f8a4 	bl	80018e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4807      	ldr	r0, [pc, #28]	@ (80017f8 <MX_TIM1_Init+0x120>)
 80017da:	f005 f807 	bl	80067ec <HAL_TIMEx_ConfigBreakDeadTime>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80017e4:	f000 f87e 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017e8:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <MX_TIM1_Init+0x120>)
 80017ea:	f000 fc09 	bl	8002000 <HAL_TIM_MspPostInit>

}
 80017ee:	bf00      	nop
 80017f0:	3760      	adds	r7, #96	@ 0x60
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000274 	.word	0x20000274
 80017fc:	40012c00 	.word	0x40012c00

08001800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	1d3b      	adds	r3, r7, #4
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001814:	2004      	movs	r0, #4
 8001816:	f7ff fdf0 	bl	80013fa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2002      	movs	r0, #2
 800181c:	f7ff fded 	bl	80013fa <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	2001      	movs	r0, #1
 8001822:	f7ff fdea 	bl	80013fa <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_SPI_CS_GPIO_Port, FLASH_SPI_CS_Pin, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	2110      	movs	r1, #16
 800182a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182e:	f001 ffd9 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFPA_CSD_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001832:	2200      	movs	r2, #0
 8001834:	21f2      	movs	r1, #242	@ 0xf2
 8001836:	482a      	ldr	r0, [pc, #168]	@ (80018e0 <MX_GPIO_Init+0xe0>)
 8001838:	f001 ffd4 	bl	80037e4 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PMIC_IRQ_Pin ACC_IRQ1_Pin ACC_IRQ2_Pin */
  GPIO_InitStruct.Pin = PMIC_IRQ_Pin|ACC_IRQ1_Pin|ACC_IRQ2_Pin;
 800183c:	f640 4304 	movw	r3, #3076	@ 0xc04
 8001840:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001842:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001846:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001848:	2301      	movs	r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001854:	f001 fd88 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_SPI_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_SPI_CS_Pin;
 8001858:	2310      	movs	r3, #16
 800185a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800185c:	2311      	movs	r3, #17
 800185e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001860:	2301      	movs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001864:	2300      	movs	r3, #0
 8001866:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FLASH_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001870:	f001 fd7a 	bl	8003368 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFPA_CSD_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = RFPA_CSD_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001874:	23f2      	movs	r3, #242	@ 0xf2
 8001876:	607b      	str	r3, [r7, #4]
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001878:	2301      	movs	r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	4619      	mov	r1, r3
 8001888:	4815      	ldr	r0, [pc, #84]	@ (80018e0 <MX_GPIO_Init+0xe0>)
 800188a:	f001 fd6d 	bl	8003368 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	2100      	movs	r1, #0
 8001892:	2028      	movs	r0, #40	@ 0x28
 8001894:	f001 fd09 	bl	80032aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001898:	2028      	movs	r0, #40	@ 0x28
 800189a:	f001 fd20 	bl	80032de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // Initialize PB0 as RF Power Amplifier CTX
  GPIO_InitStruct.Pin = RFPA_CTX_Pin;
 800189e:	2301      	movs	r3, #1
 80018a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018aa:	2302      	movs	r3, #2
 80018ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_DTB0;
 80018ae:	2306      	movs	r3, #6
 80018b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RFPA_CTX_GPIO_Port, &GPIO_InitStruct);
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	4619      	mov	r1, r3
 80018b6:	480a      	ldr	r0, [pc, #40]	@ (80018e0 <MX_GPIO_Init+0xe0>)
 80018b8:	f001 fd56 	bl	8003368 <HAL_GPIO_Init>

  // Initialize PB1 as RF Power Amplifier CSD
  GPIO_InitStruct.Pin = RFPA_CSD_Pin;
 80018bc:	2302      	movs	r3, #2
 80018be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c4:	2301      	movs	r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018c8:	2302      	movs	r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RFPA_CSD_GPIO_Port, &GPIO_InitStruct);
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4803      	ldr	r0, [pc, #12]	@ (80018e0 <MX_GPIO_Init+0xe0>)
 80018d2:	f001 fd49 	bl	8003368 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	48000400 	.word	0x48000400

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  HAL_GPIO_WritePin(GPIOB, LED4_Pin, 1);
 80018ec:	2201      	movs	r2, #1
 80018ee:	2180      	movs	r1, #128	@ 0x80
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <Error_Handler+0x18>)
 80018f2:	f001 ff77 	bl	80037e4 <HAL_GPIO_WritePin>

  while (1)
 80018f6:	bf00      	nop
 80018f8:	e7fd      	b.n	80018f6 <Error_Handler+0x12>
 80018fa:	bf00      	nop
 80018fc:	48000400 	.word	0x48000400

08001900 <STBY_BootManager>:

  return;
}

uint32_t STBY_BootManager(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
    STBY_BootStatus = 0;
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_C2SB);
    LL_HSEM_ReleaseLock( HSEM, CFG_HW_PWR_STANDBY_SEMID, 0 );
  }
#else
  STBY_BootStatus = 0;
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <STBY_BootManager+0x18>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
#endif

  return STBY_BootStatus;
 800190a:	4b03      	ldr	r3, [pc, #12]	@ (8001918 <STBY_BootManager+0x18>)
 800190c:	681b      	ldr	r3, [r3, #0]
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	200002c4 	.word	0x200002c4

0800191c <LL_PWR_SetPowerMode>:
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <LL_PWR_SetPowerMode+0x24>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f023 0207 	bic.w	r2, r3, #7
 800192c:	4904      	ldr	r1, [pc, #16]	@ (8001940 <LL_PWR_SetPowerMode+0x24>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	58000400 	.word	0x58000400

08001944 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 8001948:	4b03      	ldr	r3, [pc, #12]	@ (8001958 <LL_PWR_ClearFlag_WU+0x14>)
 800194a:	2209      	movs	r2, #9
 800194c:	619a      	str	r2, [r3, #24]
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	58000400 	.word	0x58000400

0800195c <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001960:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001966:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800196e:	d101      	bne.n	8001974 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	58000400 	.word	0x58000400

08001984 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001988:	4b07      	ldr	r3, [pc, #28]	@ (80019a8 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001992:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001996:	d101      	bne.n	800199c <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	58000400 	.word	0x58000400

080019ac <LL_RCC_HSE_Enable>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_RCC_HSE_IsReady>:
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80019ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80019dc:	d101      	bne.n	80019e2 <LL_RCC_HSE_IsReady+0x18>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <LL_RCC_HSE_IsReady+0x1a>
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_RCC_HSI_Enable>:
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_RCC_HSI_IsReady>:
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a1e:	d101      	bne.n	8001a24 <LL_RCC_HSI_IsReady+0x18>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <LL_RCC_HSI_IsReady+0x1a>
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_SetSysClkSource>:
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f023 0203 	bic.w	r2, r3, #3
 8001a42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	608b      	str	r3, [r1, #8]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_RCC_GetSysClkSource>:
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 030c 	and.w	r3, r3, #12
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a80:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <LL_LPM_EnableSleep>:
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <LL_LPM_EnableSleep+0x1c>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	4a04      	ldr	r2, [pc, #16]	@ (8001ab0 <LL_LPM_EnableSleep+0x1c>)
 8001a9e:	f023 0304 	bic.w	r3, r3, #4
 8001aa2:	6113      	str	r3, [r2, #16]
}
 8001aa4:	bf00      	nop
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <LL_LPM_EnableDeepSleep+0x1c>)
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <LL_LPM_EnableDeepSleep+0x1c>)
 8001abe:	f043 0304 	orr.w	r3, r3, #4
 8001ac2:	6113      	str	r3, [r2, #16]
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	3220      	adds	r2, #32
 8001ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae8:	4a05      	ldr	r2, [pc, #20]	@ (8001b00 <LL_HSEM_1StepLock+0x2c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d001      	beq.n	8001af2 <LL_HSEM_1StepLock+0x1e>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_HSEM_1StepLock+0x20>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	80000400 	.word	0x80000400

08001b04 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001b2e:	f001 fa61 	bl	8002ff4 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001b32:	f7ff ff9d 	bl	8001a70 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8001b36:	f000 f835 	bl	8001ba4 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001b3a:	f7ff ff03 	bl	8001944 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f7ff feec 	bl	800191c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001b44:	f7ff ffb6 	bl	8001ab4 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001b48:	bf00      	nop
}
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001b50:	bf00      	nop
}
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001b5e:	f001 fa49 	bl	8002ff4 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001b62:	f000 f81f 	bl	8001ba4 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8001b66:	2001      	movs	r0, #1
 8001b68:	f7ff fed8 	bl	800191c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001b6c:	f7ff ffa2 	bl	8001ab4 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001b70:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001b72:	bf00      	nop
}
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001b7a:	f000 f84f 	bl	8001c1c <ExitLowPower>

  HAL_ResumeTick();
 8001b7e:	f001 fa49 	bl	8003014 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001b82:	bf00      	nop
}
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001b8a:	f001 fa33 	bl	8002ff4 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001b8e:	f7ff ff81 	bl	8001a94 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001b92:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001b94:	bf00      	nop
}
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001b9c:	f001 fa3a 	bl	8003014 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001ba0:	bf00      	nop
}
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001ba8:	bf00      	nop
 8001baa:	2103      	movs	r1, #3
 8001bac:	4819      	ldr	r0, [pc, #100]	@ (8001c14 <EnterLowPower+0x70>)
 8001bae:	f7ff ff91 	bl	8001ad4 <LL_HSEM_1StepLock>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f8      	bne.n	8001baa <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001bb8:	2104      	movs	r1, #4
 8001bba:	4816      	ldr	r0, [pc, #88]	@ (8001c14 <EnterLowPower+0x70>)
 8001bbc:	f7ff ff8a 	bl	8001ad4 <LL_HSEM_1StepLock>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d117      	bne.n	8001bf6 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001bc6:	f7ff fedd 	bl	8001984 <LL_PWR_IsActiveFlag_C2DS>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d104      	bne.n	8001bda <EnterLowPower+0x36>
 8001bd0:	f7ff fec4 	bl	800195c <LL_PWR_IsActiveFlag_C2SB>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d015      	beq.n	8001c06 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2104      	movs	r1, #4
 8001bde:	480d      	ldr	r0, [pc, #52]	@ (8001c14 <EnterLowPower+0x70>)
 8001be0:	f7ff ff90 	bl	8001b04 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001be4:	f000 f852 	bl	8001c8c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001be8:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <EnterLowPower+0x74>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <EnterLowPower+0x74>)
 8001bee:	f023 0307 	bic.w	r3, r3, #7
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e007      	b.n	8001c06 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001bf6:	f000 f849 	bl	8001c8c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001bfa:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <EnterLowPower+0x74>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <EnterLowPower+0x74>)
 8001c00:	f023 0307 	bic.w	r3, r3, #7
 8001c04:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001c06:	2200      	movs	r2, #0
 8001c08:	2103      	movs	r1, #3
 8001c0a:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <EnterLowPower+0x70>)
 8001c0c:	f7ff ff7a 	bl	8001b04 <LL_HSEM_ReleaseLock>

  return;
 8001c10:	bf00      	nop
}
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	58001400 	.word	0x58001400
 8001c18:	58004000 	.word	0x58004000

08001c1c <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2104      	movs	r1, #4
 8001c24:	4817      	ldr	r0, [pc, #92]	@ (8001c84 <ExitLowPower+0x68>)
 8001c26:	f7ff ff6d 	bl	8001b04 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001c2a:	bf00      	nop
 8001c2c:	2103      	movs	r1, #3
 8001c2e:	4815      	ldr	r0, [pc, #84]	@ (8001c84 <ExitLowPower+0x68>)
 8001c30:	f7ff ff50 	bl	8001ad4 <LL_HSEM_1StepLock>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f8      	bne.n	8001c2c <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001c3a:	f7ff ff0d 	bl	8001a58 <LL_RCC_GetSysClkSource>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d118      	bne.n	8001c76 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
	  LL_RCC_HSE_Enable( );
 8001c44:	f7ff feb2 	bl	80019ac <LL_RCC_HSE_Enable>
	  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001c48:	4b0f      	ldr	r3, [pc, #60]	@ (8001c88 <ExitLowPower+0x6c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 0307 	bic.w	r3, r3, #7
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <ExitLowPower+0x6c>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6013      	str	r3, [r2, #0]
	  while(!LL_RCC_HSE_IsReady( ));
 8001c58:	bf00      	nop
 8001c5a:	f7ff feb6 	bl	80019ca <LL_RCC_HSE_IsReady>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0fa      	beq.n	8001c5a <ExitLowPower+0x3e>
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001c64:	2002      	movs	r0, #2
 8001c66:	f7ff fee3 	bl	8001a30 <LL_RCC_SetSysClkSource>
	  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001c6a:	bf00      	nop
 8001c6c:	f7ff fef4 	bl	8001a58 <LL_RCC_GetSysClkSource>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d1fa      	bne.n	8001c6c <ExitLowPower+0x50>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2103      	movs	r1, #3
 8001c7a:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <ExitLowPower+0x68>)
 8001c7c:	f7ff ff42 	bl	8001b04 <LL_HSEM_ReleaseLock>

  return;
 8001c80:	bf00      	nop
}
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58001400 	.word	0x58001400
 8001c88:	58004000 	.word	0x58004000

08001c8c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001c90:	f7ff fead 	bl	80019ee <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001c94:	bf00      	nop
 8001c96:	f7ff feb9 	bl	8001a0c <LL_RCC_HSI_IsReady>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0fa      	beq.n	8001c96 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff fec5 	bl	8001a30 <LL_RCC_SetSysClkSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001ca6:	bf00      	nop
 8001ca8:	f7ff fed6 	bl	8001a58 <LL_RCC_GetSysClkSource>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d1fa      	bne.n	8001ca8 <Switch_On_HSI+0x1c>
  return;
 8001cb2:	bf00      	nop
}
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <LL_RCC_EnableRTC>:
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001cc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_AHB2_GRP1_EnableClock>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001ce6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
}
 8001cfe:	bf00      	nop
 8001d00:	3714      	adds	r7, #20
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001d12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001d22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d26:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d58:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d60:	68fb      	ldr	r3, [r7, #12]
}
 8001d62:	bf00      	nop
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	b083      	sub	sp, #12
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d7a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d84:	4013      	ands	r3, r2
 8001d86:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001da0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001da2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db8:	68fb      	ldr	r3, [r7, #12]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001dca:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001dce:	f7ff ff9c 	bl	8001d0a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	202e      	movs	r0, #46	@ 0x2e
 8001dd8:	f001 fa67 	bl	80032aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001ddc:	202e      	movs	r0, #46	@ 0x2e
 8001dde:	f001 fa7e 	bl	80032de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b090      	sub	sp, #64	@ 0x40
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	2224      	movs	r2, #36	@ 0x24
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f008 f84f 	bl	8009eac <memset>
  if(hi2c->Instance==I2C1)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a17      	ldr	r2, [pc, #92]	@ (8001e70 <HAL_I2C_MspInit+0x88>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d126      	bne.n	8001e66 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e18:	2304      	movs	r3, #4
 8001e1a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e1c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001e20:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e22:	f107 0308 	add.w	r3, r7, #8
 8001e26:	4618      	mov	r0, r3
 8001e28:	f003 fe0c 	bl	8005a44 <HAL_RCCEx_PeriphCLKConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001e32:	f7ff fd57 	bl	80018e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2002      	movs	r0, #2
 8001e38:	f7ff ff4e 	bl	8001cd8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_I2C_SCL_Pin|SENSOR_I2C_SDA_Pin;
 8001e3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e42:	2312      	movs	r3, #18
 8001e44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e56:	4619      	mov	r1, r3
 8001e58:	4806      	ldr	r0, [pc, #24]	@ (8001e74 <HAL_I2C_MspInit+0x8c>)
 8001e5a:	f001 fa85 	bl	8003368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001e62:	f7ff ff6b 	bl	8001d3c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e66:	bf00      	nop
 8001e68:	3740      	adds	r7, #64	@ 0x40
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40005400 	.word	0x40005400
 8001e74:	48000400 	.word	0x48000400

08001e78 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <HAL_I2C_MspDeInit+0x38>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d10d      	bne.n	8001ea6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e8a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001e8e:	f7ff ff6e 	bl	8001d6e <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SENSOR_I2C_SCL_GPIO_Port, SENSOR_I2C_SCL_Pin);
 8001e92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e96:	4807      	ldr	r0, [pc, #28]	@ (8001eb4 <HAL_I2C_MspDeInit+0x3c>)
 8001e98:	f001 fbce 	bl	8003638 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SENSOR_I2C_SDA_GPIO_Port, SENSOR_I2C_SDA_Pin);
 8001e9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ea0:	4804      	ldr	r0, [pc, #16]	@ (8001eb4 <HAL_I2C_MspDeInit+0x3c>)
 8001ea2:	f001 fbc9 	bl	8003638 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40005400 	.word	0x40005400
 8001eb4:	48000400 	.word	0x48000400

08001eb8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_IPCC_MspInit+0x44>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d113      	bne.n	8001ef2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001eca:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001ece:	f7ff ff1c 	bl	8001d0a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	202c      	movs	r0, #44	@ 0x2c
 8001ed8:	f001 f9e7 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001edc:	202c      	movs	r0, #44	@ 0x2c
 8001ede:	f001 f9fe 	bl	80032de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	202d      	movs	r0, #45	@ 0x2d
 8001ee8:	f001 f9df 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001eec:	202d      	movs	r0, #45	@ 0x2d
 8001eee:	f001 f9f6 	bl	80032de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	58000c00 	.word	0x58000c00

08001f00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	@ 0x30
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f08:	f107 030c 	add.w	r3, r7, #12
 8001f0c:	2224      	movs	r2, #36	@ 0x24
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f007 ffcb 	bl	8009eac <memset>
  if(hrtc->Instance==RTC)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001f54 <HAL_RTC_MspInit+0x54>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d115      	bne.n	8001f4c <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001f20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001f24:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001f26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 fd87 	bl	8005a44 <HAL_RCCEx_PeriphCLKConfig>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001f3c:	f7ff fcd2 	bl	80018e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001f40:	f7ff feb9 	bl	8001cb6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001f44:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f48:	f7ff fef8 	bl	8001d3c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	3730      	adds	r7, #48	@ 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40002800 	.word	0x40002800

08001f58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f60:	f107 030c 	add.w	r3, r7, #12
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	60da      	str	r2, [r3, #12]
 8001f6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a17      	ldr	r2, [pc, #92]	@ (8001fd4 <HAL_SPI_MspInit+0x7c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d128      	bne.n	8001fcc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f7a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001f7e:	f7ff ff09 	bl	8001d94 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff fea8 	bl	8001cd8 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA5     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = FLASH_SPI_SCK_Pin|FLASH_SPI_MISO_Pin;
 8001f88:	2342      	movs	r3, #66	@ 0x42
 8001f8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f98:	2305      	movs	r3, #5
 8001f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa6:	f001 f9df 	bl	8003368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_SPI_MOSI_Pin;
 8001faa:	2320      	movs	r3, #32
 8001fac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 8001fba:	2304      	movs	r3, #4
 8001fbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FLASH_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001fbe:	f107 030c 	add.w	r3, r7, #12
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fc8:	f001 f9ce 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fcc:	bf00      	nop
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40013000 	.word	0x40013000

08001fd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <HAL_TIM_PWM_MspInit+0x24>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d103      	bne.n	8001ff2 <HAL_TIM_PWM_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fea:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001fee:	f7ff fed1 	bl	8001d94 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40012c00 	.word	0x40012c00

08002000 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 030c 	add.w	r3, r7, #12
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <HAL_TIM_MspPostInit+0x54>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d114      	bne.n	800204c <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2001      	movs	r0, #1
 8002024:	f7ff fe58 	bl	8001cd8 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SPKR_ALARM_Pin;
 8002028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800202c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800203a:	2301      	movs	r3, #1
 800203c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPKR_ALARM_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	4619      	mov	r1, r3
 8002044:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002048:	f001 f98e 	bl	8003368 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	3720      	adds	r7, #32
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40012c00 	.word	0x40012c00

08002058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800205c:	bf00      	nop
 800205e:	e7fd      	b.n	800205c <NMI_Handler+0x4>

08002060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <HardFault_Handler+0x4>

08002068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <MemManage_Handler+0x4>

08002070 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <BusFault_Handler+0x4>

08002078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <UsageFault_Handler+0x4>

08002080 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a0:	bf00      	nop
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020ae:	f000 ff69 	bl	8002f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_IRQ1_Pin);
 80020ba:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80020be:	f001 fbc3 	bl	8003848 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_IRQ2_Pin);
 80020c2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80020c6:	f001 fbbf 	bl	8003848 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}

080020ce <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80020d2:	f007 fb09 	bl	80096e8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	bd80      	pop	{r7, pc}

080020da <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80020de:	f007 fb39 	bl	8009754 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}

080020e6 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80020e6:	b580      	push	{r7, lr}
 80020e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80020ea:	f001 fbd1 	bl	8003890 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 80020f6:	f7fe fe37 	bl	8000d68 <HW_TS_RTC_Wakeup_Handler>
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002104:	4b22      	ldr	r3, [pc, #136]	@ (8002190 <SystemInit+0x90>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800210a:	4a21      	ldr	r2, [pc, #132]	@ (8002190 <SystemInit+0x90>)
 800210c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002110:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002128:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800212c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800212e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <SystemInit+0x94>)
 800213a:	4013      	ands	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800213e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002146:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800214a:	f023 0305 	bic.w	r3, r3, #5
 800214e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002156:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800215a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800215e:	f023 0301 	bic.w	r3, r3, #1
 8002162:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002166:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800216a:	4a0b      	ldr	r2, [pc, #44]	@ (8002198 <SystemInit+0x98>)
 800216c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002178:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800217c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800217e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00
 8002194:	faf6fefb 	.word	0xfaf6fefb
 8002198:	22041000 	.word	0x22041000

0800219c <CopyDataInit>:
 800219c:	58d4      	ldr	r4, [r2, r3]
 800219e:	50c4      	str	r4, [r0, r3]
 80021a0:	3304      	adds	r3, #4

080021a2 <LoopCopyDataInit>:
 80021a2:	18c4      	adds	r4, r0, r3
 80021a4:	428c      	cmp	r4, r1
 80021a6:	d3f9      	bcc.n	800219c <CopyDataInit>
 80021a8:	4770      	bx	lr

080021aa <FillZerobss>:
 80021aa:	6003      	str	r3, [r0, #0]
 80021ac:	3004      	adds	r0, #4

080021ae <LoopFillZerobss>:
 80021ae:	4288      	cmp	r0, r1
 80021b0:	d3fb      	bcc.n	80021aa <FillZerobss>
 80021b2:	4770      	bx	lr

080021b4 <Reset_Handler>:
 80021b4:	4815      	ldr	r0, [pc, #84]	@ (800220c <CPUcontextRestore+0xa>)
 80021b6:	4685      	mov	sp, r0
 80021b8:	f7ff fba2 	bl	8001900 <STBY_BootManager>
 80021bc:	2801      	cmp	r0, #1
 80021be:	d020      	beq.n	8002202 <CPUcontextRestore>
 80021c0:	b08a      	sub	sp, #40	@ 0x28
 80021c2:	f7ff ff9d 	bl	8002100 <SystemInit>
 80021c6:	4812      	ldr	r0, [pc, #72]	@ (8002210 <CPUcontextRestore+0xe>)
 80021c8:	4912      	ldr	r1, [pc, #72]	@ (8002214 <CPUcontextRestore+0x12>)
 80021ca:	4a13      	ldr	r2, [pc, #76]	@ (8002218 <CPUcontextRestore+0x16>)
 80021cc:	2300      	movs	r3, #0
 80021ce:	f7ff ffe8 	bl	80021a2 <LoopCopyDataInit>
 80021d2:	4812      	ldr	r0, [pc, #72]	@ (800221c <CPUcontextRestore+0x1a>)
 80021d4:	4912      	ldr	r1, [pc, #72]	@ (8002220 <CPUcontextRestore+0x1e>)
 80021d6:	4a13      	ldr	r2, [pc, #76]	@ (8002224 <CPUcontextRestore+0x22>)
 80021d8:	2300      	movs	r3, #0
 80021da:	f7ff ffe2 	bl	80021a2 <LoopCopyDataInit>
 80021de:	4812      	ldr	r0, [pc, #72]	@ (8002228 <CPUcontextRestore+0x26>)
 80021e0:	4912      	ldr	r1, [pc, #72]	@ (800222c <CPUcontextRestore+0x2a>)
 80021e2:	2300      	movs	r3, #0
 80021e4:	f7ff ffe3 	bl	80021ae <LoopFillZerobss>
 80021e8:	f007 fe7c 	bl	8009ee4 <__libc_init_array>
 80021ec:	f7ff f91e 	bl	800142c <main>

080021f0 <LoopForever>:
 80021f0:	e7fe      	b.n	80021f0 <LoopForever>

080021f2 <CPUcontextSave>:
 80021f2:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80021f6:	4c0e      	ldr	r4, [pc, #56]	@ (8002230 <CPUcontextRestore+0x2e>)
 80021f8:	466b      	mov	r3, sp
 80021fa:	6023      	str	r3, [r4, #0]
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	bf30      	wfi

08002202 <CPUcontextRestore>:
 8002202:	4c0b      	ldr	r4, [pc, #44]	@ (8002230 <CPUcontextRestore+0x2e>)
 8002204:	6824      	ldr	r4, [r4, #0]
 8002206:	46a5      	mov	sp, r4
 8002208:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 800220c:	20003000 	.word	0x20003000
 8002210:	20000008 	.word	0x20000008
 8002214:	2000004c 	.word	0x2000004c
 8002218:	0800a288 	.word	0x0800a288
 800221c:	200301e4 	.word	0x200301e4
 8002220:	20030a67 	.word	0x20030a67
 8002224:	0800a31a 	.word	0x0800a31a
 8002228:	200000a0 	.word	0x200000a0
 800222c:	200004d8 	.word	0x200004d8
 8002230:	200002c0 	.word	0x200002c0

08002234 <ADC1_IRQHandler>:
 8002234:	e7fe      	b.n	8002234 <ADC1_IRQHandler>
	...

08002238 <adpSetDefaultConfig>:
  * @brief  Sets the default operating configuration
  * @note	Change the default parameters in adp5360.h
  * @param  <NONE>
  * @retval <lt_err_t> Returns an error code
  */
lt_err_t adpSetDefaultConfig(void) {
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
	lt_err_t retVal = LT_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	71bb      	strb	r3, [r7, #6]

	uint8_t tmpData;

	// Set charge current to 320mA
	tmpData = CHG_CURRENT_DEFAULT;
 8002242:	2338      	movs	r3, #56	@ 0x38
 8002244:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(CHG_CUR_SET, &tmpData, 1);
 8002246:	1d7b      	adds	r3, r7, #5
 8002248:	2201      	movs	r2, #1
 800224a:	4619      	mov	r1, r3
 800224c:	2004      	movs	r0, #4
 800224e:	f000 fa29 	bl	80026a4 <adp5360WriteBytes>
 8002252:	4603      	mov	r3, r0
 8002254:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 8002256:	79bb      	ldrb	r3, [r7, #6]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <adpSetDefaultConfig+0x28>
		return retVal;
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	e0d1      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	// Disable the Charge Timer
	tmpData = CHG_TIMER_EN_DEFAULT;
 8002260:	2300      	movs	r3, #0
 8002262:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(CHG_TIM_SET, &tmpData, 1);
 8002264:	1d7b      	adds	r3, r7, #5
 8002266:	2201      	movs	r2, #1
 8002268:	4619      	mov	r1, r3
 800226a:	2006      	movs	r0, #6
 800226c:	f000 fa1a 	bl	80026a4 <adp5360WriteBytes>
 8002270:	4603      	mov	r3, r0
 8002272:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 8002274:	79bb      	ldrb	r3, [r7, #6]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <adpSetDefaultConfig+0x46>
		return retVal;
 800227a:	79bb      	ldrb	r3, [r7, #6]
 800227c:	e0c2      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	// Set the Thermistor Current
	tmpData = THR_CUR_DEFAULT;
 800227e:	23c0      	movs	r3, #192	@ 0xc0
 8002280:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(BAT_THERM_CTRL, &tmpData, 1);
 8002282:	1d7b      	adds	r3, r7, #5
 8002284:	2201      	movs	r2, #1
 8002286:	4619      	mov	r1, r3
 8002288:	200a      	movs	r0, #10
 800228a:	f000 fa0b 	bl	80026a4 <adp5360WriteBytes>
 800228e:	4603      	mov	r3, r0
 8002290:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 8002292:	79bb      	ldrb	r3, [r7, #6]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <adpSetDefaultConfig+0x64>
		return retVal;
 8002298:	79bb      	ldrb	r3, [r7, #6]
 800229a:	e0b3      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	// Disable Battery Protection
	tmpData = BAT_CTRL_DEFAULT;
 800229c:	2303      	movs	r3, #3
 800229e:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(BAT_PROT_CTRL, &tmpData, 1);
 80022a0:	1d7b      	adds	r3, r7, #5
 80022a2:	2201      	movs	r2, #1
 80022a4:	4619      	mov	r1, r3
 80022a6:	2011      	movs	r0, #17
 80022a8:	f000 f9fc 	bl	80026a4 <adp5360WriteBytes>
 80022ac:	4603      	mov	r3, r0
 80022ae:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 80022b0:	79bb      	ldrb	r3, [r7, #6]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <adpSetDefaultConfig+0x82>
		return retVal;
 80022b6:	79bb      	ldrb	r3, [r7, #6]
 80022b8:	e0a4      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	// Set Battery Undervoltage Protection to 2.8V
	tmpData = BAT_UV_DEFAULT;
 80022ba:	23f0      	movs	r3, #240	@ 0xf0
 80022bc:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(BAT_PROT_UV_SET, &tmpData, 1);
 80022be:	1d7b      	adds	r3, r7, #5
 80022c0:	2201      	movs	r2, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	2012      	movs	r0, #18
 80022c6:	f000 f9ed 	bl	80026a4 <adp5360WriteBytes>
 80022ca:	4603      	mov	r3, r0
 80022cc:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 80022ce:	79bb      	ldrb	r3, [r7, #6]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <adpSetDefaultConfig+0xa0>
		return retVal;
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	e095      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	// Set Battery Charge Over-Current Protection to 400mA
	tmpData = BAT_OC_CHG_DEFAULT;
 80022d8:	23c8      	movs	r3, #200	@ 0xc8
 80022da:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(BAT_PROT_OC_CHG_SET, &tmpData, 1);
 80022dc:	1d7b      	adds	r3, r7, #5
 80022de:	2201      	movs	r2, #1
 80022e0:	4619      	mov	r1, r3
 80022e2:	2015      	movs	r0, #21
 80022e4:	f000 f9de 	bl	80026a4 <adp5360WriteBytes>
 80022e8:	4603      	mov	r3, r0
 80022ea:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <adpSetDefaultConfig+0xbe>
		return retVal;
 80022f2:	79bb      	ldrb	r3, [r7, #6]
 80022f4:	e086      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	// Set the SOC Voltage Scaling
	for (uint8_t i = 0; i < 10; i++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	71fb      	strb	r3, [r7, #7]
 80022fa:	e016      	b.n	800232a <adpSetDefaultConfig+0xf2>
		retVal = adp5360WriteBytes(V_SOC_LUT[i][0], &V_SOC_LUT[i][1], 1);
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	4a43      	ldr	r2, [pc, #268]	@ (800240c <adpSetDefaultConfig+0x1d4>)
 8002300:	f812 0013 	ldrb.w	r0, [r2, r3, lsl #1]
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	3301      	adds	r3, #1
 800230a:	4a40      	ldr	r2, [pc, #256]	@ (800240c <adpSetDefaultConfig+0x1d4>)
 800230c:	4413      	add	r3, r2
 800230e:	2201      	movs	r2, #1
 8002310:	4619      	mov	r1, r3
 8002312:	f000 f9c7 	bl	80026a4 <adp5360WriteBytes>
 8002316:	4603      	mov	r3, r0
 8002318:	71bb      	strb	r3, [r7, #6]
		if (retVal != LT_OK) {
 800231a:	79bb      	ldrb	r3, [r7, #6]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <adpSetDefaultConfig+0xec>
			return retVal;
 8002320:	79bb      	ldrb	r3, [r7, #6]
 8002322:	e06f      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	for (uint8_t i = 0; i < 10; i++) {
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	3301      	adds	r3, #1
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	2b09      	cmp	r3, #9
 800232e:	d9e5      	bls.n	80022fc <adpSetDefaultConfig+0xc4>
		}
	}

	// Set the Battery Capacity
	tmpData = BAT_CAP_DEFAULT;
 8002330:	237d      	movs	r3, #125	@ 0x7d
 8002332:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(BAT_CAP, &tmpData, 1);
 8002334:	1d7b      	adds	r3, r7, #5
 8002336:	2201      	movs	r2, #1
 8002338:	4619      	mov	r1, r3
 800233a:	2020      	movs	r0, #32
 800233c:	f000 f9b2 	bl	80026a4 <adp5360WriteBytes>
 8002340:	4603      	mov	r3, r0
 8002342:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <adpSetDefaultConfig+0x116>
		return retVal;
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	e05a      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	// Enable the Fuel Gauge
	tmpData = FG_EN_DEFAULT;
 800234e:	2313      	movs	r3, #19
 8002350:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(FUEL_GAUGE_MODE, &tmpData, 1);
 8002352:	1d7b      	adds	r3, r7, #5
 8002354:	2201      	movs	r2, #1
 8002356:	4619      	mov	r1, r3
 8002358:	2027      	movs	r0, #39	@ 0x27
 800235a:	f000 f9a3 	bl	80026a4 <adp5360WriteBytes>
 800235e:	4603      	mov	r3, r0
 8002360:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 8002362:	79bb      	ldrb	r3, [r7, #6]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <adpSetDefaultConfig+0x134>
		return retVal;
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	e04b      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
//	if (retVal != LT_OK) {
//		return retVal;
//	}

	// Set the Buck Converter Configuration
	tmpData = BUCK_CFG_DEFAULT;
 800236c:	2361      	movs	r3, #97	@ 0x61
 800236e:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(BCK_CFG, &tmpData, 1);
 8002370:	1d7b      	adds	r3, r7, #5
 8002372:	2201      	movs	r2, #1
 8002374:	4619      	mov	r1, r3
 8002376:	2029      	movs	r0, #41	@ 0x29
 8002378:	f000 f994 	bl	80026a4 <adp5360WriteBytes>
 800237c:	4603      	mov	r3, r0
 800237e:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 8002380:	79bb      	ldrb	r3, [r7, #6]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <adpSetDefaultConfig+0x152>
		return retVal;
 8002386:	79bb      	ldrb	r3, [r7, #6]
 8002388:	e03c      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
//	if (retVal != LT_OK) {
//		return retVal;
//	}

	// Set the PGOOD1 Pin Mask. Disable all output.
	tmpData = PGOOD1_MASK_DEFAULT;
 800238a:	2300      	movs	r3, #0
 800238c:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(PGOOD1_MASK, &tmpData, 1);
 800238e:	1d7b      	adds	r3, r7, #5
 8002390:	2201      	movs	r2, #1
 8002392:	4619      	mov	r1, r3
 8002394:	2030      	movs	r0, #48	@ 0x30
 8002396:	f000 f985 	bl	80026a4 <adp5360WriteBytes>
 800239a:	4603      	mov	r3, r0
 800239c:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <adpSetDefaultConfig+0x170>
		return retVal;
 80023a4:	79bb      	ldrb	r3, [r7, #6]
 80023a6:	e02d      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	// Set the PGOOD2 Pin Mask. Disable all output.
	tmpData = PGOOD2_MASK_DEFAULT;
 80023a8:	2300      	movs	r3, #0
 80023aa:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(PGOOD2_MASK, &tmpData, 1);
 80023ac:	1d7b      	adds	r3, r7, #5
 80023ae:	2201      	movs	r2, #1
 80023b0:	4619      	mov	r1, r3
 80023b2:	2031      	movs	r0, #49	@ 0x31
 80023b4:	f000 f976 	bl	80026a4 <adp5360WriteBytes>
 80023b8:	4603      	mov	r3, r0
 80023ba:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 80023bc:	79bb      	ldrb	r3, [r7, #6]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <adpSetDefaultConfig+0x18e>
		return retVal;
 80023c2:	79bb      	ldrb	r3, [r7, #6]
 80023c4:	e01e      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
//	if (retVal != LT_OK) {
//		return retVal;
//	}

	// Set the IRQ1 Register
	tmpData = ADP_IRQ1_DEFAULT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(IRQ_EN1, &tmpData, 1);
 80023ca:	1d7b      	adds	r3, r7, #5
 80023cc:	2201      	movs	r2, #1
 80023ce:	4619      	mov	r1, r3
 80023d0:	2032      	movs	r0, #50	@ 0x32
 80023d2:	f000 f967 	bl	80026a4 <adp5360WriteBytes>
 80023d6:	4603      	mov	r3, r0
 80023d8:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 80023da:	79bb      	ldrb	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <adpSetDefaultConfig+0x1ac>
		return retVal;
 80023e0:	79bb      	ldrb	r3, [r7, #6]
 80023e2:	e00f      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	// Set the IRQ2 Register
	tmpData = ADP_IRQ2_DEFAULT;
 80023e4:	2300      	movs	r3, #0
 80023e6:	717b      	strb	r3, [r7, #5]
	retVal = adp5360WriteBytes(IRQ_EN2, &tmpData, 1);
 80023e8:	1d7b      	adds	r3, r7, #5
 80023ea:	2201      	movs	r2, #1
 80023ec:	4619      	mov	r1, r3
 80023ee:	2033      	movs	r0, #51	@ 0x33
 80023f0:	f000 f958 	bl	80026a4 <adp5360WriteBytes>
 80023f4:	4603      	mov	r3, r0
 80023f6:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 80023f8:	79bb      	ldrb	r3, [r7, #6]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <adpSetDefaultConfig+0x1ca>
		return retVal;
 80023fe:	79bb      	ldrb	r3, [r7, #6]
 8002400:	e000      	b.n	8002404 <adpSetDefaultConfig+0x1cc>
	}

	return retVal;
 8002402:	79bb      	ldrb	r3, [r7, #6]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000018 	.word	0x20000018

08002410 <adpReadStatus>:
/**
  * @brief  Reads the status registers and updates the main handle
  * @param  <adp5360> Pointer to the ADP5360 Handle
  * @retval <lt_err_t> Returns an error code
  */
lt_err_t adpReadStatus(void) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
	lt_err_t retVal = LT_OK;
 8002416:	2300      	movs	r3, #0
 8002418:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpData;

	// Read the Charger Status1 Register
	retVal = adp5360ReadBytes(CHG_STS1, &tmpData, 1);
 800241a:	1dbb      	adds	r3, r7, #6
 800241c:	2201      	movs	r2, #1
 800241e:	4619      	mov	r1, r3
 8002420:	2008      	movs	r0, #8
 8002422:	f000 f90b 	bl	800263c <adp5360ReadBytes>
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <adpReadStatus+0x24>
		return retVal;
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	e0db      	b.n	80025ec <adpReadStatus+0x1dc>
	}

	adp5360.chargeStatus.chgStatus = (tmpData & ADP_CHG_STS1_CHARGER_STATUS) >> 0;
 8002434:	79bb      	ldrb	r3, [r7, #6]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b6d      	ldr	r3, [pc, #436]	@ (80025f4 <adpReadStatus+0x1e4>)
 800243e:	719a      	strb	r2, [r3, #6]
	adp5360.chargeStatus.vbus_ilim = (tmpData & ADP_CHG_STS1_VBUS_ILIM) >> 5;
 8002440:	79bb      	ldrb	r3, [r7, #6]
 8002442:	115b      	asrs	r3, r3, #5
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf14      	ite	ne
 800244c:	2301      	movne	r3, #1
 800244e:	2300      	moveq	r3, #0
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b68      	ldr	r3, [pc, #416]	@ (80025f4 <adpReadStatus+0x1e4>)
 8002454:	715a      	strb	r2, [r3, #5]
	adp5360.chargeStatus.adpichg = (tmpData & ADP_CHG_STS1_ADPICHG) >> 6;
 8002456:	79bb      	ldrb	r3, [r7, #6]
 8002458:	119b      	asrs	r3, r3, #6
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b62      	ldr	r3, [pc, #392]	@ (80025f4 <adpReadStatus+0x1e4>)
 800246a:	711a      	strb	r2, [r3, #4]
	adp5360.chargeStatus.vbus_ov = (tmpData & ADP_CHG_STS1_VBUS_OV) >> 7;
 800246c:	79bb      	ldrb	r3, [r7, #6]
 800246e:	09db      	lsrs	r3, r3, #7
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	bf14      	ite	ne
 8002476:	2301      	movne	r3, #1
 8002478:	2300      	moveq	r3, #0
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b5d      	ldr	r3, [pc, #372]	@ (80025f4 <adpReadStatus+0x1e4>)
 800247e:	70da      	strb	r2, [r3, #3]

	// Read the Charger Status2 Register
	retVal = adp5360ReadBytes(CHG_STS2, &tmpData, 1);
 8002480:	1dbb      	adds	r3, r7, #6
 8002482:	2201      	movs	r2, #1
 8002484:	4619      	mov	r1, r3
 8002486:	2009      	movs	r0, #9
 8002488:	f000 f8d8 	bl	800263c <adp5360ReadBytes>
 800248c:	4603      	mov	r3, r0
 800248e:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <adpReadStatus+0x8a>
		return retVal;
 8002496:	79fb      	ldrb	r3, [r7, #7]
 8002498:	e0a8      	b.n	80025ec <adpReadStatus+0x1dc>
	}

	adp5360.chargeStatus.batChgStatus = (tmpData & ADP_CHG_STS2_BAT_CHG_STATUS) >> 0;
 800249a:	79bb      	ldrb	r3, [r7, #6]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b54      	ldr	r3, [pc, #336]	@ (80025f4 <adpReadStatus+0x1e4>)
 80024a4:	729a      	strb	r2, [r3, #10]
	adp5360.chargeStatus.batUVStatus = (tmpData & ADP_CHG_STS2_BAT_UV_STATUS) >> 3;
 80024a6:	79bb      	ldrb	r3, [r7, #6]
 80024a8:	10db      	asrs	r3, r3, #3
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	bf14      	ite	ne
 80024b2:	2301      	movne	r3, #1
 80024b4:	2300      	moveq	r3, #0
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b4e      	ldr	r3, [pc, #312]	@ (80025f4 <adpReadStatus+0x1e4>)
 80024ba:	725a      	strb	r2, [r3, #9]
	adp5360.chargeStatus.batOVStatus = (tmpData & ADP_CHG_STS2_BAT_OV_STATUS) >> 4;
 80024bc:	79bb      	ldrb	r3, [r7, #6]
 80024be:	111b      	asrs	r3, r3, #4
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf14      	ite	ne
 80024c8:	2301      	movne	r3, #1
 80024ca:	2300      	moveq	r3, #0
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b49      	ldr	r3, [pc, #292]	@ (80025f4 <adpReadStatus+0x1e4>)
 80024d0:	721a      	strb	r2, [r3, #8]
	adp5360.chargeStatus.thrStatus = (tmpData & ADP_CHG_STS2_THR_STATUS) >> 5;
 80024d2:	79bb      	ldrb	r3, [r7, #6]
 80024d4:	095b      	lsrs	r3, r3, #5
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b46      	ldr	r3, [pc, #280]	@ (80025f4 <adpReadStatus+0x1e4>)
 80024da:	71da      	strb	r2, [r3, #7]

	// Read the Power Status Register
	retVal = adp5360ReadBytes(PGOOD_STATUS, &tmpData, 1);
 80024dc:	1dbb      	adds	r3, r7, #6
 80024de:	2201      	movs	r2, #1
 80024e0:	4619      	mov	r1, r3
 80024e2:	202f      	movs	r0, #47	@ 0x2f
 80024e4:	f000 f8aa 	bl	800263c <adp5360ReadBytes>
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <adpReadStatus+0xe6>
		return retVal;
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	e07a      	b.n	80025ec <adpReadStatus+0x1dc>
	}

	adp5360.powerStatus.vOut1OK = (tmpData & ADP_PGOOD_STATUS_VOUT1OK) >> 0;
 80024f6:	79bb      	ldrb	r3, [r7, #6]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	bf14      	ite	ne
 8002500:	2301      	movne	r3, #1
 8002502:	2300      	moveq	r3, #0
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b3b      	ldr	r3, [pc, #236]	@ (80025f4 <adpReadStatus+0x1e4>)
 8002508:	741a      	strb	r2, [r3, #16]
	adp5360.powerStatus.vOut2OK = (tmpData & ADP_PGOOD_STATUS_VOUT2OK) >> 1;
 800250a:	79bb      	ldrb	r3, [r7, #6]
 800250c:	105b      	asrs	r3, r3, #1
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	bf14      	ite	ne
 8002516:	2301      	movne	r3, #1
 8002518:	2300      	moveq	r3, #0
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b35      	ldr	r3, [pc, #212]	@ (80025f4 <adpReadStatus+0x1e4>)
 800251e:	73da      	strb	r2, [r3, #15]
	adp5360.powerStatus.batOK = (tmpData & ADP_PGOOD_STATUS_BATOK) >> 2;
 8002520:	79bb      	ldrb	r3, [r7, #6]
 8002522:	109b      	asrs	r3, r3, #2
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b30      	ldr	r3, [pc, #192]	@ (80025f4 <adpReadStatus+0x1e4>)
 8002534:	739a      	strb	r2, [r3, #14]
	adp5360.powerStatus.vBusOK = (tmpData & ADP_PGOOD_STATUS_VBUSOK) >> 3;
 8002536:	79bb      	ldrb	r3, [r7, #6]
 8002538:	10db      	asrs	r3, r3, #3
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2da      	uxtb	r2, r3
 8002548:	4b2a      	ldr	r3, [pc, #168]	@ (80025f4 <adpReadStatus+0x1e4>)
 800254a:	735a      	strb	r2, [r3, #13]
	adp5360.powerStatus.chgComplete = (tmpData & ADP_PGOOD_STATUS_CHG_CMPLT) >> 4;
 800254c:	79bb      	ldrb	r3, [r7, #6]
 800254e:	111b      	asrs	r3, r3, #4
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf14      	ite	ne
 8002558:	2301      	movne	r3, #1
 800255a:	2300      	moveq	r3, #0
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b25      	ldr	r3, [pc, #148]	@ (80025f4 <adpReadStatus+0x1e4>)
 8002560:	731a      	strb	r2, [r3, #12]
	adp5360.powerStatus.mrPress = (tmpData & ADP_PGOOD_STATUS_MR_PRESS) >> 5;
 8002562:	79bb      	ldrb	r3, [r7, #6]
 8002564:	115b      	asrs	r3, r3, #5
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	bf14      	ite	ne
 800256e:	2301      	movne	r3, #1
 8002570:	2300      	moveq	r3, #0
 8002572:	b2da      	uxtb	r2, r3
 8002574:	4b1f      	ldr	r3, [pc, #124]	@ (80025f4 <adpReadStatus+0x1e4>)
 8002576:	72da      	strb	r2, [r3, #11]

	// Read the Battery Voltage
	uint8_t vbathigh;
	uint8_t vbatlow;

	retVal = adp5360ReadBytes(VBAT_READ_H, &vbathigh, 1);
 8002578:	1d7b      	adds	r3, r7, #5
 800257a:	2201      	movs	r2, #1
 800257c:	4619      	mov	r1, r3
 800257e:	2025      	movs	r0, #37	@ 0x25
 8002580:	f000 f85c 	bl	800263c <adp5360ReadBytes>
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 8002588:	79fb      	ldrb	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <adpReadStatus+0x182>
		return retVal;
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	e02c      	b.n	80025ec <adpReadStatus+0x1dc>
	}

	retVal = adp5360ReadBytes(VBAT_READ_L, &vbatlow, 1);
 8002592:	1d3b      	adds	r3, r7, #4
 8002594:	2201      	movs	r2, #1
 8002596:	4619      	mov	r1, r3
 8002598:	2026      	movs	r0, #38	@ 0x26
 800259a:	f000 f84f 	bl	800263c <adp5360ReadBytes>
 800259e:	4603      	mov	r3, r0
 80025a0:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <adpReadStatus+0x19c>
		return retVal;
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	e01f      	b.n	80025ec <adpReadStatus+0x1dc>
	}

	adp5360.batteryVoltage = (uint16_t)((vbathigh << 8) | vbatlow) >> 3;
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	793b      	ldrb	r3, [r7, #4]
 80025b4:	b21b      	sxth	r3, r3
 80025b6:	4313      	orrs	r3, r2
 80025b8:	b21b      	sxth	r3, r3
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	08db      	lsrs	r3, r3, #3
 80025be:	b29a      	uxth	r2, r3
 80025c0:	4b0c      	ldr	r3, [pc, #48]	@ (80025f4 <adpReadStatus+0x1e4>)
 80025c2:	825a      	strh	r2, [r3, #18]

	// Read the State of Charge
#if OVERRIDE_FUEL
	adp5360.stateOfCharge = calculateSOC(adp5360.batteryVoltage);
#else
	retVal = adp5360ReadBytes(BAT_SOC, &tmpData, 1);
 80025c4:	1dbb      	adds	r3, r7, #6
 80025c6:	2201      	movs	r2, #1
 80025c8:	4619      	mov	r1, r3
 80025ca:	2021      	movs	r0, #33	@ 0x21
 80025cc:	f000 f836 	bl	800263c <adp5360ReadBytes>
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
		if (retVal != LT_OK) {
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <adpReadStatus+0x1ce>
			return retVal;
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	e006      	b.n	80025ec <adpReadStatus+0x1dc>
		}
	// Store the bytes
	adp5360.stateOfCharge = (tmpData & ADP_BAT_SOC) >> 0;
 80025de:	79bb      	ldrb	r3, [r7, #6]
 80025e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4b03      	ldr	r3, [pc, #12]	@ (80025f4 <adpReadStatus+0x1e4>)
 80025e8:	745a      	strb	r2, [r3, #17]
#endif

	return retVal;
 80025ea:	79fb      	ldrb	r3, [r7, #7]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3708      	adds	r7, #8
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	200002c8 	.word	0x200002c8

080025f8 <adpClearInterrupts>:
/**
  * @brief  Clears any pending interrupts
  * @param  <NONE>
  * @retval <lt_err_t> Returns an error code
  */
lt_err_t adpClearInterrupts(void) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
	lt_err_t retVal = LT_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	71fb      	strb	r3, [r7, #7]

	uint8_t tmpData[2] = {0xFF, 0xFF};
 8002602:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002606:	80bb      	strh	r3, [r7, #4]

	// Clear the FLAG1 Register
	retVal = adp5360ReadBytes(IRQ_FLAG1, tmpData, 2);
 8002608:	1d3b      	adds	r3, r7, #4
 800260a:	2202      	movs	r2, #2
 800260c:	4619      	mov	r1, r3
 800260e:	2034      	movs	r0, #52	@ 0x34
 8002610:	f000 f814 	bl	800263c <adp5360ReadBytes>
 8002614:	4603      	mov	r3, r0
 8002616:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <adpClearInterrupts+0x2a>
		return retVal;
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	e000      	b.n	8002624 <adpClearInterrupts+0x2c>
	}

	return retVal;
 8002622:	79fb      	ldrb	r3, [r7, #7]
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <LTCheckBatteryPrep>:
  * The FRSCheckBattery function requires access to spi which needs to be initialized during the PostIdle.
  * This function is called from the Interrupt vector, so hardware SPI's aren't initialized yet.
  * @param  <timerID> Timer ID
  * @retval <NONE>
  */
void LTCheckBatteryPrep(void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1<<LT_TASK_CHECK_BATTERY, CFG_SCH_PRIO_0);
 8002630:	2100      	movs	r1, #0
 8002632:	2080      	movs	r0, #128	@ 0x80
 8002634:	f007 fb2c 	bl	8009c90 <UTIL_SEQ_SetTask>
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <adp5360ReadBytes>:
  * @param  <regAddr> Address of the target register
  * @param  <dest> Pointer to the storage location of the read data
  * @param  <size> Number of bytes to read
  * @retval <lt_err_t> Returns an error code
  */
lt_err_t adp5360ReadBytes(uint8_t regAddr, uint8_t *dest, uint8_t size) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af04      	add	r7, sp, #16
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
 8002648:	4613      	mov	r3, r2
 800264a:	71bb      	strb	r3, [r7, #6]
	uint8_t retryCount;
	HAL_StatusTypeDef status;
	lt_err_t retVal = LT_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73bb      	strb	r3, [r7, #14]

	retryCount = 2;
 8002650:	2302      	movs	r3, #2
 8002652:	73fb      	strb	r3, [r7, #15]

	do {
		status = HAL_I2C_Mem_Read(adp5360i2c, ADP_I2C_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, dest, size, ADP_I2C_TIMEOUT);
 8002654:	4b12      	ldr	r3, [pc, #72]	@ (80026a0 <adp5360ReadBytes+0x64>)
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	b29a      	uxth	r2, r3
 800265c:	79bb      	ldrb	r3, [r7, #6]
 800265e:	b29b      	uxth	r3, r3
 8002660:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002664:	9102      	str	r1, [sp, #8]
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2301      	movs	r3, #1
 800266e:	218c      	movs	r1, #140	@ 0x8c
 8002670:	f001 fb10 	bl	8003c94 <HAL_I2C_Mem_Read>
 8002674:	4603      	mov	r3, r0
 8002676:	737b      	strb	r3, [r7, #13]
		if (status != HAL_OK) {
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <adp5360ReadBytes+0x46>
			// Attempt to Recover
			recoverI2C();
 800267e:	f000 f845 	bl	800270c <recoverI2C>
		}
		retryCount--;
 8002682:	7bfb      	ldrb	r3, [r7, #15]
 8002684:	3b01      	subs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
	} while ((status != HAL_OK) && (retryCount > 0));
 8002688:	7b7b      	ldrb	r3, [r7, #13]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d002      	beq.n	8002694 <adp5360ReadBytes+0x58>
 800268e:	7bfb      	ldrb	r3, [r7, #15]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1df      	bne.n	8002654 <adp5360ReadBytes+0x18>

	return retVal;
 8002694:	7bbb      	ldrb	r3, [r7, #14]
}
 8002696:	4618      	mov	r0, r3
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200002dc 	.word	0x200002dc

080026a4 <adp5360WriteBytes>:
  * @param  <regAddr> Address of the target register
  * @param  <src> Pointer to the data to write
  * @param  <size> Number of bytes to write
  * @retval <lt_err_t> Returns an error code
  */
lt_err_t adp5360WriteBytes(uint8_t regAddr, uint8_t *src, uint8_t size) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af04      	add	r7, sp, #16
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
 80026b0:	4613      	mov	r3, r2
 80026b2:	71bb      	strb	r3, [r7, #6]
	uint8_t retryCount;
	HAL_StatusTypeDef status;
	lt_err_t retVal = LT_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73bb      	strb	r3, [r7, #14]

	retryCount = 2;
 80026b8:	2302      	movs	r3, #2
 80026ba:	73fb      	strb	r3, [r7, #15]

	do {
		status = HAL_I2C_Mem_Write(adp5360i2c, ADP_I2C_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, src, size, ADP_I2C_TIMEOUT);
 80026bc:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <adp5360WriteBytes+0x64>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	79bb      	ldrb	r3, [r7, #6]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80026cc:	9102      	str	r1, [sp, #8]
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2301      	movs	r3, #1
 80026d6:	218c      	movs	r1, #140	@ 0x8c
 80026d8:	f001 f9c8 	bl	8003a6c <HAL_I2C_Mem_Write>
 80026dc:	4603      	mov	r3, r0
 80026de:	737b      	strb	r3, [r7, #13]
		if (status != HAL_OK) {
 80026e0:	7b7b      	ldrb	r3, [r7, #13]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <adp5360WriteBytes+0x46>
			// Attempt to Recover
			recoverI2C();
 80026e6:	f000 f811 	bl	800270c <recoverI2C>
		}
		retryCount--;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
	} while ((status != HAL_OK) && (retryCount > 0));
 80026f0:	7b7b      	ldrb	r3, [r7, #13]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <adp5360WriteBytes+0x58>
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1df      	bne.n	80026bc <adp5360WriteBytes+0x18>

	return retVal;
 80026fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200002dc 	.word	0x200002dc

0800270c <recoverI2C>:
  * @brief  I2C Recovery routine.
  * @note	This attempts to recover from an I2C HAL Timeout error by resetting the I2C HW.
  * @param  <NONE>
  * @retval <lt_err_t> Returns an error code
  */
static lt_err_t recoverI2C(void) {
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	// The bus is tied up for some reason. Try to re-initialize.
	HAL_I2C_DeInit(adp5360i2c);
 8002710:	4b06      	ldr	r3, [pc, #24]	@ (800272c <recoverI2C+0x20>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f001 f97a 	bl	8003a0e <HAL_I2C_DeInit>
	return HAL_I2C_Init(adp5360i2c);
 800271a:	4b04      	ldr	r3, [pc, #16]	@ (800272c <recoverI2C+0x20>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f001 f8da 	bl	80038d8 <HAL_I2C_Init>
 8002724:	4603      	mov	r3, r0
}
 8002726:	4618      	mov	r0, r3
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200002dc 	.word	0x200002dc

08002730 <adp5360Init>:
/**
  * @brief  Initializes the ADP5360 Module
  * @param	<hi2c>	  Pointer to the hardware I2C Handler
  * @retval <lt_err_t> Returns an error code
  */
lt_err_t adp5360Init(I2C_HandleTypeDef *hi2c) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	lt_err_t retVal = LT_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]

	// Bind the HW Interface
	adp5360i2c = hi2c;
 800273c:	4a27      	ldr	r2, [pc, #156]	@ (80027dc <adp5360Init+0xac>)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6013      	str	r3, [r2, #0]

	// Test the HW Interface
	retVal = adp5360Test();
 8002742:	f000 f857 	bl	80027f4 <adp5360Test>
 8002746:	4603      	mov	r3, r0
 8002748:	73fb      	strb	r3, [r7, #15]
	if (retVal != LT_OK) {
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <adp5360Init+0x24>
		return retVal;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
 8002752:	e03f      	b.n	80027d4 <adp5360Init+0xa4>
	}

	// Set the default configuration
	retVal = adpSetDefaultConfig();
 8002754:	f7ff fd70 	bl	8002238 <adpSetDefaultConfig>
 8002758:	4603      	mov	r3, r0
 800275a:	73fb      	strb	r3, [r7, #15]
	if (retVal != LT_OK) {
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <adp5360Init+0x36>
		return retVal;
 8002762:	7bfb      	ldrb	r3, [r7, #15]
 8002764:	e036      	b.n	80027d4 <adp5360Init+0xa4>
	}

	// Set the default configuration
	retVal = adp5360SwitchBuckMode(SELECTED_BUCK_MODE);
 8002766:	2000      	movs	r0, #0
 8002768:	f000 f87c 	bl	8002864 <adp5360SwitchBuckMode>
 800276c:	4603      	mov	r3, r0
 800276e:	73fb      	strb	r3, [r7, #15]
	if (retVal != LT_OK) {
 8002770:	7bfb      	ldrb	r3, [r7, #15]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <adp5360Init+0x4a>
		return retVal;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	e02c      	b.n	80027d4 <adp5360Init+0xa4>
	}

	// Read the status
	retVal = adpReadStatus();
 800277a:	f7ff fe49 	bl	8002410 <adpReadStatus>
 800277e:	4603      	mov	r3, r0
 8002780:	73fb      	strb	r3, [r7, #15]
	if (retVal != LT_OK) {
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <adp5360Init+0x5c>
		return retVal;
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	e023      	b.n	80027d4 <adp5360Init+0xa4>
	}

	// Clear the interrupts
	retVal = adpClearInterrupts();
 800278c:	f7ff ff34 	bl	80025f8 <adpClearInterrupts>
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]
	if (retVal != LT_OK) {
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <adp5360Init+0x6e>
		return retVal;
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	e01a      	b.n	80027d4 <adp5360Init+0xa4>
	}

	// Register the Check Battery Task
	UTIL_SEQ_RegTask(1<<LT_TASK_CHECK_BATTERY, UTIL_SEQ_RFU, checkBattery);
 800279e:	4a10      	ldr	r2, [pc, #64]	@ (80027e0 <adp5360Init+0xb0>)
 80027a0:	2100      	movs	r1, #0
 80027a2:	2080      	movs	r0, #128	@ 0x80
 80027a4:	f007 fa52 	bl	8009c4c <UTIL_SEQ_RegTask>

	// Register the PMIC IRQ callback with the scheduler
	UTIL_SEQ_RegTask(1<<LT_TASK_CHECK_PMIC, UTIL_SEQ_RFU, adp5360IRQHandler);
 80027a8:	4a0e      	ldr	r2, [pc, #56]	@ (80027e4 <adp5360Init+0xb4>)
 80027aa:	2100      	movs	r1, #0
 80027ac:	2040      	movs	r0, #64	@ 0x40
 80027ae:	f007 fa4d 	bl	8009c4c <UTIL_SEQ_RegTask>

	// Create a timer to wake up the system every (hour) in order to do a quick battery check.
	HW_TS_Create(CFG_TIM_PROC_ID_ISR, &periodicBatteryCheckTimerID, hw_ts_Repeated, LTCheckBatteryPrep);
 80027b2:	4b0d      	ldr	r3, [pc, #52]	@ (80027e8 <adp5360Init+0xb8>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	490d      	ldr	r1, [pc, #52]	@ (80027ec <adp5360Init+0xbc>)
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe fc77 	bl	80010ac <HW_TS_Create>
	HW_TS_Start(periodicBatteryCheckTimerID, BAT_CHECK_TIMER);
 80027be:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <adp5360Init+0xbc>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	f44f 01e1 	mov.w	r1, #7372800	@ 0x708000
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fe fd6e 	bl	80012a8 <HW_TS_Start>

	// Module is initialized
	adp5360ModInit = true;
 80027cc:	4b08      	ldr	r3, [pc, #32]	@ (80027f0 <adp5360Init+0xc0>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]

	return retVal;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200002dc 	.word	0x200002dc
 80027e0:	080028f9 	.word	0x080028f9
 80027e4:	0800293d 	.word	0x0800293d
 80027e8:	0800262d 	.word	0x0800262d
 80027ec:	200002e1 	.word	0x200002e1
 80027f0:	200002e0 	.word	0x200002e0

080027f4 <adp5360Test>:
/**
  * @brief  Tests the HW Interface to make sure the IC communicates.
  * @param  <NONE>
  * @retval <lt_err_t> Returns an error code
  */
lt_err_t adp5360Test(void) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
	lt_err_t retVal = LT_OK;
 80027fa:	2300      	movs	r3, #0
 80027fc:	71fb      	strb	r3, [r7, #7]

	uint8_t tmpData;
	// Read the Manufacturer and Model
	retVal = adp5360ReadBytes(MFG_MODEL_ID, &tmpData, 1);
 80027fe:	1dbb      	adds	r3, r7, #6
 8002800:	2201      	movs	r2, #1
 8002802:	4619      	mov	r1, r3
 8002804:	2000      	movs	r0, #0
 8002806:	f7ff ff19 	bl	800263c <adp5360ReadBytes>
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <adp5360Test+0x24>
		return retVal;
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	e01e      	b.n	8002856 <adp5360Test+0x62>
	}

	adp5360.hardwareDetails.adpModel = (tmpData & ADP_MFG_MODEL_ID_MODEL) >> 0;
 8002818:	79bb      	ldrb	r3, [r7, #6]
 800281a:	f003 030f 	and.w	r3, r3, #15
 800281e:	b2da      	uxtb	r2, r3
 8002820:	4b0f      	ldr	r3, [pc, #60]	@ (8002860 <adp5360Test+0x6c>)
 8002822:	705a      	strb	r2, [r3, #1]
	adp5360.hardwareDetails.adpManu = (tmpData & ADP_MFG_MODEL_ID_MANUF) >> 4;
 8002824:	79bb      	ldrb	r3, [r7, #6]
 8002826:	091b      	lsrs	r3, r3, #4
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <adp5360Test+0x6c>)
 800282c:	701a      	strb	r2, [r3, #0]

	// Read the Silicon Revision
	retVal = adp5360ReadBytes(SILICON_REV, &tmpData, 1);
 800282e:	1dbb      	adds	r3, r7, #6
 8002830:	2201      	movs	r2, #1
 8002832:	4619      	mov	r1, r3
 8002834:	2001      	movs	r0, #1
 8002836:	f7ff ff01 	bl	800263c <adp5360ReadBytes>
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <adp5360Test+0x54>
		return retVal;
 8002844:	79fb      	ldrb	r3, [r7, #7]
 8002846:	e006      	b.n	8002856 <adp5360Test+0x62>
	}

	adp5360.hardwareDetails.adpSiRev = (tmpData & ADP_SILICON_REV) >> 0;
 8002848:	79bb      	ldrb	r3, [r7, #6]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	b2da      	uxtb	r2, r3
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <adp5360Test+0x6c>)
 8002852:	709a      	strb	r2, [r3, #2]

	return retVal;
 8002854:	79fb      	ldrb	r3, [r7, #7]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	200002c8 	.word	0x200002c8

08002864 <adp5360SwitchBuckMode>:
  * @param  <mode> Mode select - Hysterisis or FPWM mode
  * @note		Hysterisis mode is lower power, but may be prone to brown-outs
  * 			FPWM mode is more stable.
  * @retval <bool> Returns the module initialization status
  */
lt_err_t adp5360SwitchBuckMode(adp_buck_mode_t mode) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
	lt_err_t retVal = LT_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
	uint8_t tmpData;

	// Read the Manufacturer and Model
	retVal = adp5360ReadBytes(BCK_CFG, &tmpData, 1);
 8002872:	f107 030e 	add.w	r3, r7, #14
 8002876:	2201      	movs	r2, #1
 8002878:	4619      	mov	r1, r3
 800287a:	2029      	movs	r0, #41	@ 0x29
 800287c:	f7ff fede 	bl	800263c <adp5360ReadBytes>
 8002880:	4603      	mov	r3, r0
 8002882:	73fb      	strb	r3, [r7, #15]
	if (retVal != LT_OK) {
 8002884:	7bfb      	ldrb	r3, [r7, #15]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <adp5360SwitchBuckMode+0x2a>
		return retVal;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
 800288c:	e02f      	b.n	80028ee <adp5360SwitchBuckMode+0x8a>
	}

	switch (mode) {
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <adp5360SwitchBuckMode+0x36>
 8002894:	2b01      	cmp	r3, #1
 8002896:	d013      	beq.n	80028c0 <adp5360SwitchBuckMode+0x5c>
 8002898:	e028      	b.n	80028ec <adp5360SwitchBuckMode+0x88>
		case REG_BUCK_HYST:
			// Set the Buck Mode to FPWM
			tmpData &= ~ADP_BCK_CFG_BUCK_MODE;
 800289a:	7bbb      	ldrb	r3, [r7, #14]
 800289c:	f023 0308 	bic.w	r3, r3, #8
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	73bb      	strb	r3, [r7, #14]
			retVal = adp5360WriteBytes(BCK_CFG, &tmpData, 1);
 80028a4:	f107 030e 	add.w	r3, r7, #14
 80028a8:	2201      	movs	r2, #1
 80028aa:	4619      	mov	r1, r3
 80028ac:	2029      	movs	r0, #41	@ 0x29
 80028ae:	f7ff fef9 	bl	80026a4 <adp5360WriteBytes>
 80028b2:	4603      	mov	r3, r0
 80028b4:	73fb      	strb	r3, [r7, #15]
			if (retVal != LT_OK) {
 80028b6:	7bfb      	ldrb	r3, [r7, #15]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d014      	beq.n	80028e6 <adp5360SwitchBuckMode+0x82>
				return retVal;
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	e016      	b.n	80028ee <adp5360SwitchBuckMode+0x8a>
			}
			break;
		case REG_BUCK_FPWM:
			// Set the Buck Mode to FPWM
			tmpData |= ADP_BCK_CFG_BUCK_MODE;
 80028c0:	7bbb      	ldrb	r3, [r7, #14]
 80028c2:	f043 0308 	orr.w	r3, r3, #8
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	73bb      	strb	r3, [r7, #14]
			retVal = adp5360WriteBytes(BCK_CFG, &tmpData, 1);
 80028ca:	f107 030e 	add.w	r3, r7, #14
 80028ce:	2201      	movs	r2, #1
 80028d0:	4619      	mov	r1, r3
 80028d2:	2029      	movs	r0, #41	@ 0x29
 80028d4:	f7ff fee6 	bl	80026a4 <adp5360WriteBytes>
 80028d8:	4603      	mov	r3, r0
 80028da:	73fb      	strb	r3, [r7, #15]
			if (retVal != LT_OK) {
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <adp5360SwitchBuckMode+0x86>
				return retVal;
 80028e2:	7bfb      	ldrb	r3, [r7, #15]
 80028e4:	e003      	b.n	80028ee <adp5360SwitchBuckMode+0x8a>
			break;
 80028e6:	bf00      	nop
 80028e8:	e000      	b.n	80028ec <adp5360SwitchBuckMode+0x88>
			}
			break;
 80028ea:	bf00      	nop
	}

	return retVal;
 80028ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
	...

080028f8 <checkBattery>:
  * @note	This is the periodic check so that the display always shows the correct SOC.
  * @note	This is fired once every hour or after a charger status update.
  * @param  <NONE>
  * @retval <NONE>
  */
void checkBattery(void) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	af00      	add	r7, sp, #0
	static bool previousVBusSts = false;

	HAL_Delay(1000);	// Allow PMIC to grab the latest voltage...
 80028fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002900:	f7fd fe6b 	bl	80005da <HAL_Delay>
	adpReadStatus();
 8002904:	f7ff fd84 	bl	8002410 <adpReadStatus>

	// Update the BLE Battery Level Characteristic
	UTIL_SEQ_SetTask(1<<LT_TASK_SEND_BAT_LEVEL, CFG_SCH_PRIO_0);
 8002908:	2100      	movs	r1, #0
 800290a:	2004      	movs	r0, #4
 800290c:	f007 f9c0 	bl	8009c90 <UTIL_SEQ_SetTask>

	// Handle dead battery context switching
	UTIL_SEQ_SetTask(1<<LT_TASK_HANDLE_DEAD_BAT, CFG_SCH_PRIO_0);
 8002910:	2100      	movs	r1, #0
 8002912:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002916:	f007 f9bb 	bl	8009c90 <UTIL_SEQ_SetTask>

 	// Detect charger insert
 	if (previousVBusSts != adp5360.powerStatus.vBusOK) {
 800291a:	4b06      	ldr	r3, [pc, #24]	@ (8002934 <checkBattery+0x3c>)
 800291c:	7b5a      	ldrb	r2, [r3, #13]
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <checkBattery+0x40>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d003      	beq.n	800292e <checkBattery+0x36>
 		if (adp5360.powerStatus.vBusOK) {
 			// Charger was just inserted
// 			UTIL_SEQ_SetTask(1<<FRS_TASK_ACTIVATE_FRS, CFG_SCH_PRIO_0);
 		}
 		previousVBusSts = adp5360.powerStatus.vBusOK;
 8002926:	4b03      	ldr	r3, [pc, #12]	@ (8002934 <checkBattery+0x3c>)
 8002928:	7b5a      	ldrb	r2, [r3, #13]
 800292a:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <checkBattery+0x40>)
 800292c:	701a      	strb	r2, [r3, #0]
 	}
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200002c8 	.word	0x200002c8
 8002938:	200002e3 	.word	0x200002e3

0800293c <adp5360IRQHandler>:
  * @brief  ADP5360 IRQ Handler
  * @note	This gets called from the sequencer after an IRQ is triggered
  * @param  <NONE>
  * @retval <NONE>
  */
void adp5360IRQHandler(void) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
	lt_err_t retVal = LT_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	71bb      	strb	r3, [r7, #6]

	uint8_t intFlag1, intFlag2;
	static adp_charger_status_t previousChargeState;

	// Read the FLAG1 interrupts
	retVal = adp5360ReadBytes(IRQ_FLAG1, &intFlag1, 1);
 8002946:	1d7b      	adds	r3, r7, #5
 8002948:	2201      	movs	r2, #1
 800294a:	4619      	mov	r1, r3
 800294c:	2034      	movs	r0, #52	@ 0x34
 800294e:	f7ff fe75 	bl	800263c <adp5360ReadBytes>
 8002952:	4603      	mov	r3, r0
 8002954:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 8002956:	79bb      	ldrb	r3, [r7, #6]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d148      	bne.n	80029ee <adp5360IRQHandler+0xb2>
		return;
	}

	// Read the FLAG2 interrupts
	retVal = adp5360ReadBytes(IRQ_FLAG2, &intFlag2, 1);
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	2201      	movs	r2, #1
 8002960:	4619      	mov	r1, r3
 8002962:	2035      	movs	r0, #53	@ 0x35
 8002964:	f7ff fe6a 	bl	800263c <adp5360ReadBytes>
 8002968:	4603      	mov	r3, r0
 800296a:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 800296c:	79bb      	ldrb	r3, [r7, #6]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d13f      	bne.n	80029f2 <adp5360IRQHandler+0xb6>
	// FLAG1 Interrupts
	if (intFlag1 & ADP_IRQ_FLAG1_VBUS_INT) {
		// Interrupt Due To VBUS Voltage Threshold
	}

	if ((intFlag1 & ADP_IRQ_FLAG1_CHG_INT) >> 1) {
 8002972:	797b      	ldrb	r3, [r7, #5]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d028      	beq.n	80029ce <adp5360IRQHandler+0x92>
		// Interrupt Due To Charger Mode Change
		retVal = adpReadStatus();
 800297c:	f7ff fd48 	bl	8002410 <adpReadStatus>
 8002980:	4603      	mov	r3, r0
 8002982:	71bb      	strb	r3, [r7, #6]
		if (retVal != LT_OK) {
 8002984:	79bb      	ldrb	r3, [r7, #6]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d135      	bne.n	80029f6 <adp5360IRQHandler+0xba>
		}

		// We want to update the display only if the charger turns on or off.
		// There is a point where the charger will oscillate between constant voltage and constant current
		// We don't want to update the display during this period.
		bool updateOK = true;
 800298a:	2301      	movs	r3, #1
 800298c:	71fb      	strb	r3, [r7, #7]
		if ((previousChargeState == STS_CHG_FAST_CC) || (previousChargeState == STS_CHG_FAST_CV)) {
 800298e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a04 <adp5360IRQHandler+0xc8>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d003      	beq.n	800299e <adp5360IRQHandler+0x62>
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <adp5360IRQHandler+0xc8>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	2b03      	cmp	r3, #3
 800299c:	d109      	bne.n	80029b2 <adp5360IRQHandler+0x76>
			if ((adp5360.chargeStatus.chgStatus == STS_CHG_FAST_CC) || (adp5360.chargeStatus.chgStatus == STS_CHG_FAST_CV)) {
 800299e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <adp5360IRQHandler+0xcc>)
 80029a0:	799b      	ldrb	r3, [r3, #6]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <adp5360IRQHandler+0x72>
 80029a6:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <adp5360IRQHandler+0xcc>)
 80029a8:	799b      	ldrb	r3, [r3, #6]
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d101      	bne.n	80029b2 <adp5360IRQHandler+0x76>
				updateOK = false;
 80029ae:	2300      	movs	r3, #0
 80029b0:	71fb      	strb	r3, [r7, #7]
			}
		}

		if (updateOK) {
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d006      	beq.n	80029c6 <adp5360IRQHandler+0x8a>
			irqCheck = true;
 80029b8:	4b14      	ldr	r3, [pc, #80]	@ (8002a0c <adp5360IRQHandler+0xd0>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask(1<<LT_TASK_CHECK_BATTERY, CFG_SCH_PRIO_0);
 80029be:	2100      	movs	r1, #0
 80029c0:	2080      	movs	r0, #128	@ 0x80
 80029c2:	f007 f965 	bl	8009c90 <UTIL_SEQ_SetTask>
		}

		previousChargeState = adp5360.chargeStatus.chgStatus;
 80029c6:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <adp5360IRQHandler+0xcc>)
 80029c8:	799a      	ldrb	r2, [r3, #6]
 80029ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002a04 <adp5360IRQHandler+0xc8>)
 80029cc:	701a      	strb	r2, [r3, #0]
	if ((intFlag1 & ADP_IRQ_FLAG1_SOCACM_INT) >> 6) {
		// Interrupt Due To State of Charge Accumulation Overflow
		// NOTE - NOT ENABLED
	}

	if ((intFlag1 & ADP_IRQ_FLAG1_SOCLOW_INT) >> 7) {
 80029ce:	797b      	ldrb	r3, [r7, #5]
 80029d0:	b25b      	sxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	da12      	bge.n	80029fc <adp5360IRQHandler+0xc0>
		// Interrupt Due To Battery Low State of Charge
		// This will fire when the battery reaches 6% SOC
		retVal = adpReadStatus();
 80029d6:	f7ff fd1b 	bl	8002410 <adpReadStatus>
 80029da:	4603      	mov	r3, r0
 80029dc:	71bb      	strb	r3, [r7, #6]
		if (retVal != LT_OK) {
 80029de:	79bb      	ldrb	r3, [r7, #6]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10a      	bne.n	80029fa <adp5360IRQHandler+0xbe>
			return;
		}

		UTIL_SEQ_SetTask(1<<LT_TASK_CHECK_BATTERY, CFG_SCH_PRIO_0);
 80029e4:	2100      	movs	r1, #0
 80029e6:	2080      	movs	r0, #128	@ 0x80
 80029e8:	f007 f952 	bl	8009c90 <UTIL_SEQ_SetTask>
 80029ec:	e006      	b.n	80029fc <adp5360IRQHandler+0xc0>
		return;
 80029ee:	bf00      	nop
 80029f0:	e004      	b.n	80029fc <adp5360IRQHandler+0xc0>
		return;
 80029f2:	bf00      	nop
 80029f4:	e002      	b.n	80029fc <adp5360IRQHandler+0xc0>
			return;
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <adp5360IRQHandler+0xc0>
			return;
 80029fa:	bf00      	nop

	if ((intFlag2 & ADP_IRQ_FLAG2_MR_INT) >> 7) {
		// Interrupt Due To MR Pressed
		// NOTE - NOT ENABLED
	}
}
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200002e4 	.word	0x200002e4
 8002a08:	200002c8 	.word	0x200002c8
 8002a0c:	200002e2 	.word	0x200002e2

08002a10 <processStateIdle>:

/********************************************************************************
 * PRIVATE FUNCTIONS
 *******************************************************************************/

void processStateIdle(void) {
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
	// Turn off BLE
	// Put sensors into low power mode
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <processStateReady>:

void processStateReady(void) {
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
	// Turn on BLE
	// Prepare Flight Data Storage
	// Prepare Sensors
	// Wait for launch impulse or timeout
}
 8002a22:	bf00      	nop
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <processStateFlight>:

void processStateFlight(void) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
	// Capture flight events

	// Check state

	// Re-trigger LT Process
	UTIL_SEQ_SetTask(1<<LT_TASK_RUN_APPLICATION, CFG_SCH_PRIO_0);
 8002a30:	2100      	movs	r1, #0
 8002a32:	2020      	movs	r0, #32
 8002a34:	f007 f92c 	bl	8009c90 <UTIL_SEQ_SetTask>
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <processStateImmediateCapture>:

void processStateImmediateCapture(void) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
	// Turn off sensors
	// Enable BLE fast beacon
	// Alarm Chirp Timing
	// Wait for BLE finish flight command or immediate capture timeout
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <processStateExtendedCapture>:

void processStateExtendedCapture(void) {
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
	// Turn off sensors
	// Enable BLE low power beacon
	// Disable Alarm Chirp
	// Wait for BLE finish flight command
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <runLTProcess>:
  * @brief  One-Line Description of the Function
  * @note   Document any notes if needed
  * @param  <paramName> List and describe input parameters
  * @retval <retvalName> List and describe return value
  */
void runLTProcess(void) {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
	switch(ltProcessHandle.state) {
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <runLTProcess+0x4c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d81c      	bhi.n	8002a9e <runLTProcess+0x46>
 8002a64:	a201      	add	r2, pc, #4	@ (adr r2, 8002a6c <runLTProcess+0x14>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002a81 	.word	0x08002a81
 8002a70:	08002a87 	.word	0x08002a87
 8002a74:	08002a8d 	.word	0x08002a8d
 8002a78:	08002a93 	.word	0x08002a93
 8002a7c:	08002a99 	.word	0x08002a99
		case LT_STATE_IDLE:
			processStateIdle();
 8002a80:	f7ff ffc6 	bl	8002a10 <processStateIdle>
			break;
 8002a84:	e00b      	b.n	8002a9e <runLTProcess+0x46>
		case LT_STATE_READY:
			processStateReady();
 8002a86:	f7ff ffca 	bl	8002a1e <processStateReady>
			break;
 8002a8a:	e008      	b.n	8002a9e <runLTProcess+0x46>
		case LT_STATE_FLIGHT:
			processStateFlight();
 8002a8c:	f7ff ffce 	bl	8002a2c <processStateFlight>
			break;
 8002a90:	e005      	b.n	8002a9e <runLTProcess+0x46>
		case LT_STATE_IMMEDIATE_CAPTURE:
			processStateImmediateCapture();
 8002a92:	f7ff ffd3 	bl	8002a3c <processStateImmediateCapture>
			break;
 8002a96:	e002      	b.n	8002a9e <runLTProcess+0x46>
		case LT_STATE_EXTENDED_CAPTURE:
			processStateExtendedCapture();
 8002a98:	f7ff ffd7 	bl	8002a4a <processStateExtendedCapture>
			break;
 8002a9c:	bf00      	nop
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	200002e8 	.word	0x200002e8

08002aa8 <ltHWInit>:
  * @brief  One-Line Description of the Function
  * @note   Document any notes if needed
  * @param  <paramName> List and describe input parameters
  * @retval <retvalName> List and describe return value
  */
void ltHWInit(void) {
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
	adp5360Init(&hi2c1);							/*!< Initialize the Power Module			*/
 8002aac:	4808      	ldr	r0, [pc, #32]	@ (8002ad0 <ltHWInit+0x28>)
 8002aae:	f7ff fe3f 	bl	8002730 <adp5360Init>
	EEPROMInit(&hi2c1);								/*!< Initialize the FRS Settings			*/
 8002ab2:	4807      	ldr	r0, [pc, #28]	@ (8002ad0 <ltHWInit+0x28>)
 8002ab4:	f000 f9d0 	bl	8002e58 <EEPROMInit>

	// Register the LT Software Initialization Task
	UTIL_SEQ_RegTask(1<<LT_TASK_SW_INIT, UTIL_SEQ_RFU, ltSWInit);
 8002ab8:	4a06      	ldr	r2, [pc, #24]	@ (8002ad4 <ltHWInit+0x2c>)
 8002aba:	2100      	movs	r1, #0
 8002abc:	2010      	movs	r0, #16
 8002abe:	f007 f8c5 	bl	8009c4c <UTIL_SEQ_RegTask>
	UTIL_SEQ_SetTask(1<<LT_TASK_SW_INIT, CFG_SCH_PRIO_0);
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	2010      	movs	r0, #16
 8002ac6:	f007 f8e3 	bl	8009c90 <UTIL_SEQ_SetTask>
}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000015c 	.word	0x2000015c
 8002ad4:	08002ad9 	.word	0x08002ad9

08002ad8 <ltSWInit>:

void ltSWInit(void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	// Register and run the LT Application Task
	UTIL_SEQ_RegTask(1<<LT_TASK_RUN_APPLICATION, UTIL_SEQ_RFU, runLTProcess);
 8002adc:	4a05      	ldr	r2, [pc, #20]	@ (8002af4 <ltSWInit+0x1c>)
 8002ade:	2100      	movs	r1, #0
 8002ae0:	2020      	movs	r0, #32
 8002ae2:	f007 f8b3 	bl	8009c4c <UTIL_SEQ_RegTask>
	UTIL_SEQ_SetTask(1<<LT_TASK_RUN_APPLICATION, CFG_SCH_PRIO_0);
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2020      	movs	r0, #32
 8002aea:	f007 f8d1 	bl	8009c90 <UTIL_SEQ_SetTask>
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	08002a59 	.word	0x08002a59

08002af8 <alignDefaultSettings>:
 * @brief  	Aligns the default settings.
 * @note	This will not overwrite previous settings unless a factory reset has been requested.
 * @param  	<factoryReset> Factory reset request. True = Set all settings back to default.
 * @retval 	<lt_err_t> Returns an error code
 */
static lt_err_t alignDefaultSettings(bool factoryReset) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
	lt_err_t retVal = LT_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	757b      	strb	r3, [r7, #21]
	uint8_t readBytes[2];
	uint16_t storedSize;
	uint16_t rollingSize;

	// Get the stored eeprom settings size
	retVal = eepromRead(EEPROM_SETTING_SIZE_ADDR, readBytes, 2);
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f641 70f0 	movw	r0, #8176	@ 0x1ff0
 8002b12:	f000 f895 	bl	8002c40 <eepromRead>
 8002b16:	4603      	mov	r3, r0
 8002b18:	757b      	strb	r3, [r7, #21]
	if (retVal != LT_OK) {
 8002b1a:	7d7b      	ldrb	r3, [r7, #21]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <alignDefaultSettings+0x2c>
		return retVal;
 8002b20:	7d7b      	ldrb	r3, [r7, #21]
 8002b22:	e07f      	b.n	8002c24 <alignDefaultSettings+0x12c>
	}

	// Convert the returned bytes to uint16_t
	storedSize = (uint16_t)(readBytes[1] << 8) | readBytes[0];
 8002b24:	7c7b      	ldrb	r3, [r7, #17]
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	7c3a      	ldrb	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	82fb      	strh	r3, [r7, #22]

	// Uninitialized EEPROM will return 0xFFFF
	if (storedSize == 0xFFFF) {
 8002b30:	8afb      	ldrh	r3, [r7, #22]
 8002b32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <alignDefaultSettings+0x46>
		storedSize = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	82fb      	strh	r3, [r7, #22]
	}

	// Set all values to default if a factory reset has been requested.
	if (factoryReset == true) {
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <alignDefaultSettings+0x50>
		storedSize = 0;
 8002b44:	2300      	movs	r3, #0
 8002b46:	82fb      	strh	r3, [r7, #22]
	}

	// Return if the stored eeprom size matches the current settings size.
	if (storedSize == sizeof(lt_settings_t)) {
 8002b48:	8afb      	ldrh	r3, [r7, #22]
 8002b4a:	2b2c      	cmp	r3, #44	@ 0x2c
 8002b4c:	d101      	bne.n	8002b52 <alignDefaultSettings+0x5a>
		return retVal;
 8002b4e:	7d7b      	ldrb	r3, [r7, #21]
 8002b50:	e068      	b.n	8002c24 <alignDefaultSettings+0x12c>
	}

	// Iterate through and find the first setting that needs a default value.
	// First, add the payload size
	rollingSize = sizeof(ltSettingsLocal.payload);
 8002b52:	2301      	movs	r3, #1
 8002b54:	827b      	strh	r3, [r7, #18]

	// Hardware Revision
	rollingSize += sizeof(ltSettingsLocal.hardwareRev);
 8002b56:	8a7b      	ldrh	r3, [r7, #18]
 8002b58:	3310      	adds	r3, #16
 8002b5a:	827b      	strh	r3, [r7, #18]
	if (storedSize < rollingSize) {
 8002b5c:	8afa      	ldrh	r2, [r7, #22]
 8002b5e:	8a7b      	ldrh	r3, [r7, #18]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d209      	bcs.n	8002b78 <alignDefaultSettings+0x80>
		memset((char*)ltSettingsLocal.hardwareRev, 0, HARDWARE_REV_LEN);
 8002b64:	2210      	movs	r2, #16
 8002b66:	2100      	movs	r1, #0
 8002b68:	4830      	ldr	r0, [pc, #192]	@ (8002c2c <alignDefaultSettings+0x134>)
 8002b6a:	f007 f99f 	bl	8009eac <memset>
		strlcpy((char*)ltSettingsLocal.hardwareRev, HARDWARE_REV, HARDWARE_REV_LEN);
 8002b6e:	2210      	movs	r2, #16
 8002b70:	492f      	ldr	r1, [pc, #188]	@ (8002c30 <alignDefaultSettings+0x138>)
 8002b72:	482e      	ldr	r0, [pc, #184]	@ (8002c2c <alignDefaultSettings+0x134>)
 8002b74:	f007 f9a2 	bl	8009ebc <strlcpy>
	}

	// Serial Number
	rollingSize += sizeof(ltSettingsLocal.serialNumber);
 8002b78:	8a7b      	ldrh	r3, [r7, #18]
 8002b7a:	3310      	adds	r3, #16
 8002b7c:	827b      	strh	r3, [r7, #18]
	if (storedSize < rollingSize) {
 8002b7e:	8afa      	ldrh	r2, [r7, #22]
 8002b80:	8a7b      	ldrh	r3, [r7, #18]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d209      	bcs.n	8002b9a <alignDefaultSettings+0xa2>
		memset((char*)ltSettingsLocal.serialNumber, 0, LT_SERIAL_LEN);
 8002b86:	2210      	movs	r2, #16
 8002b88:	2100      	movs	r1, #0
 8002b8a:	482a      	ldr	r0, [pc, #168]	@ (8002c34 <alignDefaultSettings+0x13c>)
 8002b8c:	f007 f98e 	bl	8009eac <memset>
		strlcpy((char*)ltSettingsLocal.serialNumber, LT_SERIAL, LT_SERIAL_LEN);
 8002b90:	2210      	movs	r2, #16
 8002b92:	4927      	ldr	r1, [pc, #156]	@ (8002c30 <alignDefaultSettings+0x138>)
 8002b94:	4827      	ldr	r0, [pc, #156]	@ (8002c34 <alignDefaultSettings+0x13c>)
 8002b96:	f007 f991 	bl	8009ebc <strlcpy>
	}

	// Rocket Name
	rollingSize += sizeof(ltSettingsLocal.rocketName);
 8002b9a:	8a7b      	ldrh	r3, [r7, #18]
 8002b9c:	3309      	adds	r3, #9
 8002b9e:	827b      	strh	r3, [r7, #18]
	if (storedSize < rollingSize) {
 8002ba0:	8afa      	ldrh	r2, [r7, #22]
 8002ba2:	8a7b      	ldrh	r3, [r7, #18]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d209      	bcs.n	8002bbc <alignDefaultSettings+0xc4>
		memset((char*)ltSettingsLocal.rocketName, 0, LT_ROCKETNAME_LEN);
 8002ba8:	2209      	movs	r2, #9
 8002baa:	2100      	movs	r1, #0
 8002bac:	4822      	ldr	r0, [pc, #136]	@ (8002c38 <alignDefaultSettings+0x140>)
 8002bae:	f007 f97d 	bl	8009eac <memset>
		strlcpy((char*)ltSettingsLocal.rocketName, LT_ROCKETNAME, LT_ROCKETNAME_LEN);
 8002bb2:	2209      	movs	r2, #9
 8002bb4:	4921      	ldr	r1, [pc, #132]	@ (8002c3c <alignDefaultSettings+0x144>)
 8002bb6:	4820      	ldr	r0, [pc, #128]	@ (8002c38 <alignDefaultSettings+0x140>)
 8002bb8:	f007 f980 	bl	8009ebc <strlcpy>
	}

	// Unit Select
	rollingSize += sizeof(ltSettingsLocal.unitSelect);
 8002bbc:	8a7b      	ldrh	r3, [r7, #18]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	827b      	strh	r3, [r7, #18]
	if (storedSize < rollingSize) {
 8002bc2:	8afa      	ldrh	r2, [r7, #22]
 8002bc4:	8a7b      	ldrh	r3, [r7, #18]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d203      	bcs.n	8002bd2 <alignDefaultSettings+0xda>
		ltSettingsLocal.unitSelect = LT_DEFAULT_UNIT;
 8002bca:	4b18      	ldr	r3, [pc, #96]	@ (8002c2c <alignDefaultSettings+0x134>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	}

	// State Timeout Value
	rollingSize += sizeof(ltSettingsLocal.stateTimeout);
 8002bd2:	8a7b      	ldrh	r3, [r7, #18]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	827b      	strh	r3, [r7, #18]
	if (storedSize < rollingSize) {
 8002bd8:	8afa      	ldrh	r2, [r7, #22]
 8002bda:	8a7b      	ldrh	r3, [r7, #18]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d202      	bcs.n	8002be6 <alignDefaultSettings+0xee>
		ltSettingsLocal.stateTimeout = LT_DEFAULT_TIMEOUT;
 8002be0:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <alignDefaultSettings+0x134>)
 8002be2:	2205      	movs	r2, #5
 8002be4:	855a      	strh	r2, [r3, #42]	@ 0x2a
	}

	// Write the settings back to the EEPROM
	retVal = eepromWrite(EEPROM_SETTINGS_ADDR, &ltSettingsLocal.payload, sizeof(lt_settings_t));
 8002be6:	222c      	movs	r2, #44	@ 0x2c
 8002be8:	4910      	ldr	r1, [pc, #64]	@ (8002c2c <alignDefaultSettings+0x134>)
 8002bea:	2000      	movs	r0, #0
 8002bec:	f000 f856 	bl	8002c9c <eepromWrite>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	757b      	strb	r3, [r7, #21]
	if (retVal != LT_OK) {
 8002bf4:	7d7b      	ldrb	r3, [r7, #21]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <alignDefaultSettings+0x106>
		return retVal;
 8002bfa:	7d7b      	ldrb	r3, [r7, #21]
 8002bfc:	e012      	b.n	8002c24 <alignDefaultSettings+0x12c>
	}

	// Write the length of the settings
	uint8_t sendBytes[2];
	sendBytes[0] = (uint8_t)(rollingSize & 0x00FF);
 8002bfe:	8a7b      	ldrh	r3, [r7, #18]
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	733b      	strb	r3, [r7, #12]
	sendBytes[1] = (uint8_t)(rollingSize >> 8);
 8002c04:	8a7b      	ldrh	r3, [r7, #18]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	737b      	strb	r3, [r7, #13]
	retVal = eepromWrite(EEPROM_SETTING_SIZE_ADDR, sendBytes, 2);
 8002c0e:	f107 030c 	add.w	r3, r7, #12
 8002c12:	2202      	movs	r2, #2
 8002c14:	4619      	mov	r1, r3
 8002c16:	f641 70f0 	movw	r0, #8176	@ 0x1ff0
 8002c1a:	f000 f83f 	bl	8002c9c <eepromWrite>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	757b      	strb	r3, [r7, #21]

	return retVal;
 8002c22:	7d7b      	ldrb	r3, [r7, #21]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	200002f4 	.word	0x200002f4
 8002c30:	0800a000 	.word	0x0800a000
 8002c34:	20000304 	.word	0x20000304
 8002c38:	20000314 	.word	0x20000314
 8002c3c:	0800a004 	.word	0x0800a004

08002c40 <eepromRead>:
 * @param  <memAddr> Register address to read from
 * @param  <data> Pointer to the read data
 * @param  <size> Number of bytes to read
 * @retval <lt_err_t> Returns an error code
 */
static lt_err_t eepromRead(uint16_t memAddr, uint8_t *data, uint16_t size){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af04      	add	r7, sp, #16
 8002c46:	4603      	mov	r3, r0
 8002c48:	6039      	str	r1, [r7, #0]
 8002c4a:	80fb      	strh	r3, [r7, #6]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef halStatus;
	uint8_t retryCount = 10;
 8002c50:	230a      	movs	r3, #10
 8002c52:	73fb      	strb	r3, [r7, #15]
	do {
		halStatus = HAL_I2C_Mem_Read(eep_i2c, EEPROM_I2C_ADDR, memAddr, I2C_MEMADD_SIZE_16BIT, data, size, EEPROM_I2C_TIMEOUT);
 8002c54:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <eepromRead+0x58>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	88fa      	ldrh	r2, [r7, #6]
 8002c5a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002c5e:	9302      	str	r3, [sp, #8]
 8002c60:	88bb      	ldrh	r3, [r7, #4]
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2302      	movs	r3, #2
 8002c6a:	21a0      	movs	r1, #160	@ 0xa0
 8002c6c:	f001 f812 	bl	8003c94 <HAL_I2C_Mem_Read>
 8002c70:	4603      	mov	r3, r0
 8002c72:	73bb      	strb	r3, [r7, #14]
		HAL_Delay(1);
 8002c74:	2001      	movs	r0, #1
 8002c76:	f7fd fcb0 	bl	80005da <HAL_Delay>
		retryCount--;
 8002c7a:	7bfb      	ldrb	r3, [r7, #15]
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	73fb      	strb	r3, [r7, #15]
	} while (halStatus != HAL_OK && retryCount > 0);
 8002c80:	7bbb      	ldrb	r3, [r7, #14]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <eepromRead+0x4c>
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1e3      	bne.n	8002c54 <eepromRead+0x14>

	return halStatus;
 8002c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200002ec 	.word	0x200002ec

08002c9c <eepromWrite>:
 * @param  <memAddr> EEPROM address to write to
 * @param  <data> Pointer to the data to write
 * @param  <size> Number of bytes to send
 * @retval <lt_err_t> Returns an error code
 */
static lt_err_t eepromWrite(uint16_t memAddr, uint8_t *data, uint16_t size){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	@ 0x30
 8002ca0:	af04      	add	r7, sp, #16
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	80fb      	strh	r3, [r7, #6]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	80bb      	strh	r3, [r7, #4]
	lt_err_t retVal = LT_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	77fb      	strb	r3, [r7, #31]

	HAL_StatusTypeDef halStatus;

	uint8_t offset = (uint8_t)(memAddr%EEPROM_PAGE_SIZE);
 8002cb0:	88fb      	ldrh	r3, [r7, #6]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	f003 031f 	and.w	r3, r3, #31
 8002cb8:	763b      	strb	r3, [r7, #24]
	uint16_t eepromPage = (uint16_t)(memAddr/EEPROM_PAGE_SIZE);
 8002cba:	88fb      	ldrh	r3, [r7, #6]
 8002cbc:	095b      	lsrs	r3, r3, #5
 8002cbe:	82fb      	strh	r3, [r7, #22]

	uint16_t newMemoryAddr, newSize;		// These are used when we have to send multiple pages
	uint8_t *newData;

	// Check that all memory locations exist
	if ((memAddr + size) > EEPROM_MEM_SIZE) {
 8002cc0:	88fa      	ldrh	r2, [r7, #6]
 8002cc2:	88bb      	ldrh	r3, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cca:	db01      	blt.n	8002cd0 <eepromWrite+0x34>
		return LT_BAD_PARAMETER;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0bb      	b.n	8002e48 <eepromWrite+0x1ac>
	}

	// Check whether or not the data flows over page boundaries
	if ((size + offset) > EEPROM_PAGE_SIZE) {
 8002cd0:	88ba      	ldrh	r2, [r7, #4]
 8002cd2:	7e3b      	ldrb	r3, [r7, #24]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	f340 8090 	ble.w	8002dfc <eepromWrite+0x160>
		// The data flows over page boundaries. Make separate writes to ensure that the data loads correctly.
		// Calculate the number of pages to write. Round up to the nearest integer.
		pagesToWrite = ceilf(((float)(size + offset) / EEPROM_PAGE_SIZE));
 8002cdc:	88ba      	ldrh	r2, [r7, #4]
 8002cde:	7e3b      	ldrb	r3, [r7, #24]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	ee07 3a90 	vmov	s15, r3
 8002ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cea:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8002e50 <eepromWrite+0x1b4>
 8002cee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cf2:	eeb0 0a47 	vmov.f32	s0, s14
 8002cf6:	f007 f927 	bl	8009f48 <ceilf>
 8002cfa:	eef0 7a40 	vmov.f32	s15, s0
 8002cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d02:	ee17 3a90 	vmov	r3, s15
 8002d06:	827b      	strh	r3, [r7, #18]

		// Write the first page
		uint8_t retryCount = 10;
 8002d08:	230a      	movs	r3, #10
 8002d0a:	76fb      	strb	r3, [r7, #27]
		do {
			halStatus = HAL_I2C_Mem_Write(eep_i2c, EEPROM_I2C_ADDR, memAddr, I2C_MEMADD_SIZE_16BIT, data, (uint16_t)(EEPROM_PAGE_SIZE - offset), EEPROM_I2C_TIMEOUT);
 8002d0c:	4b51      	ldr	r3, [pc, #324]	@ (8002e54 <eepromWrite+0x1b8>)
 8002d0e:	6818      	ldr	r0, [r3, #0]
 8002d10:	7e3b      	ldrb	r3, [r7, #24]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	f1c3 0320 	rsb	r3, r3, #32
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	88fa      	ldrh	r2, [r7, #6]
 8002d1c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002d20:	9102      	str	r1, [sp, #8]
 8002d22:	9301      	str	r3, [sp, #4]
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	9300      	str	r3, [sp, #0]
 8002d28:	2302      	movs	r3, #2
 8002d2a:	21a0      	movs	r1, #160	@ 0xa0
 8002d2c:	f000 fe9e 	bl	8003a6c <HAL_I2C_Mem_Write>
 8002d30:	4603      	mov	r3, r0
 8002d32:	757b      	strb	r3, [r7, #21]
			HAL_Delay(1);
 8002d34:	2001      	movs	r0, #1
 8002d36:	f7fd fc50 	bl	80005da <HAL_Delay>
			retryCount--;
 8002d3a:	7efb      	ldrb	r3, [r7, #27]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	76fb      	strb	r3, [r7, #27]
		} while (halStatus != HAL_OK && retryCount > 0);
 8002d40:	7d7b      	ldrb	r3, [r7, #21]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <eepromWrite+0xb0>
 8002d46:	7efb      	ldrb	r3, [r7, #27]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1df      	bne.n	8002d0c <eepromWrite+0x70>

		retVal = halStatus;
 8002d4c:	7d7b      	ldrb	r3, [r7, #21]
 8002d4e:	77fb      	strb	r3, [r7, #31]
		if (retVal != LT_OK) {
 8002d50:	7ffb      	ldrb	r3, [r7, #31]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <eepromWrite+0xbe>
			return retVal;
 8002d56:	7ffb      	ldrb	r3, [r7, #31]
 8002d58:	e076      	b.n	8002e48 <eepromWrite+0x1ac>
		}

		currentPage = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	77bb      	strb	r3, [r7, #30]
		while (currentPage < pagesToWrite) {
 8002d5e:	e047      	b.n	8002df0 <eepromWrite+0x154>
			// Calculate the new Memory Address
			newMemoryAddr = (eepromPage + currentPage) * EEPROM_PAGE_SIZE;
 8002d60:	8afa      	ldrh	r2, [r7, #22]
 8002d62:	7fbb      	ldrb	r3, [r7, #30]
 8002d64:	4413      	add	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	015b      	lsls	r3, r3, #5
 8002d6a:	823b      	strh	r3, [r7, #16]
			// Calculate the pointer to the data
			newData = data + (EEPROM_PAGE_SIZE - offset) + ((currentPage - 1) * EEPROM_PAGE_SIZE);
 8002d6c:	7fbb      	ldrb	r3, [r7, #30]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	015b      	lsls	r3, r3, #5
 8002d72:	461a      	mov	r2, r3
 8002d74:	7e3b      	ldrb	r3, [r7, #24]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	3320      	adds	r3, #32
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
			// Calculate the new send size
			if (size - (currentPage * EEPROM_PAGE_SIZE) > EEPROM_PAGE_SIZE) {
 8002d80:	88ba      	ldrh	r2, [r7, #4]
 8002d82:	7fbb      	ldrb	r3, [r7, #30]
 8002d84:	015b      	lsls	r3, r3, #5
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	dd02      	ble.n	8002d92 <eepromWrite+0xf6>
				newSize = EEPROM_PAGE_SIZE;
 8002d8c:	2320      	movs	r3, #32
 8002d8e:	83bb      	strh	r3, [r7, #28]
 8002d90:	e006      	b.n	8002da0 <eepromWrite+0x104>
			} else {
				newSize = size - (currentPage * EEPROM_PAGE_SIZE);
 8002d92:	7fbb      	ldrb	r3, [r7, #30]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	015b      	lsls	r3, r3, #5
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	88ba      	ldrh	r2, [r7, #4]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	83bb      	strh	r3, [r7, #28]
			}

			// The EEPROM may be busy writing the prior page. Keep trying until the EEPROM is ready.
			uint8_t retryCount = 10;
 8002da0:	230a      	movs	r3, #10
 8002da2:	76bb      	strb	r3, [r7, #26]
			do {
				halStatus = HAL_I2C_Mem_Write(eep_i2c, EEPROM_I2C_ADDR, newMemoryAddr, I2C_MEMADD_SIZE_16BIT, newData , newSize, EEPROM_I2C_TIMEOUT);
 8002da4:	4b2b      	ldr	r3, [pc, #172]	@ (8002e54 <eepromWrite+0x1b8>)
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	8a3a      	ldrh	r2, [r7, #16]
 8002daa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002dae:	9302      	str	r3, [sp, #8]
 8002db0:	8bbb      	ldrh	r3, [r7, #28]
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	2302      	movs	r3, #2
 8002dba:	21a0      	movs	r1, #160	@ 0xa0
 8002dbc:	f000 fe56 	bl	8003a6c <HAL_I2C_Mem_Write>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	757b      	strb	r3, [r7, #21]
				HAL_Delay(1);
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	f7fd fc08 	bl	80005da <HAL_Delay>
				retryCount--;
 8002dca:	7ebb      	ldrb	r3, [r7, #26]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	76bb      	strb	r3, [r7, #26]
			} while (halStatus != HAL_OK && retryCount > 0);
 8002dd0:	7d7b      	ldrb	r3, [r7, #21]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <eepromWrite+0x140>
 8002dd6:	7ebb      	ldrb	r3, [r7, #26]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e3      	bne.n	8002da4 <eepromWrite+0x108>

			retVal = halStatus;
 8002ddc:	7d7b      	ldrb	r3, [r7, #21]
 8002dde:	77fb      	strb	r3, [r7, #31]
			if (retVal != LT_OK) {
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <eepromWrite+0x14e>
				return retVal;
 8002de6:	7ffb      	ldrb	r3, [r7, #31]
 8002de8:	e02e      	b.n	8002e48 <eepromWrite+0x1ac>
			}
			currentPage++;
 8002dea:	7fbb      	ldrb	r3, [r7, #30]
 8002dec:	3301      	adds	r3, #1
 8002dee:	77bb      	strb	r3, [r7, #30]
		while (currentPage < pagesToWrite) {
 8002df0:	7fbb      	ldrb	r3, [r7, #30]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	8a7a      	ldrh	r2, [r7, #18]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d8b2      	bhi.n	8002d60 <eepromWrite+0xc4>
 8002dfa:	e024      	b.n	8002e46 <eepromWrite+0x1aa>
		}
	} else {
		// No overflow. Just write the data.
		uint8_t retryCount = 10;
 8002dfc:	230a      	movs	r3, #10
 8002dfe:	767b      	strb	r3, [r7, #25]
		do {
			halStatus = HAL_I2C_Mem_Write(eep_i2c, EEPROM_I2C_ADDR, memAddr, I2C_MEMADD_SIZE_16BIT, data, size, EEPROM_I2C_TIMEOUT);
 8002e00:	4b14      	ldr	r3, [pc, #80]	@ (8002e54 <eepromWrite+0x1b8>)
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	88fa      	ldrh	r2, [r7, #6]
 8002e06:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002e0a:	9302      	str	r3, [sp, #8]
 8002e0c:	88bb      	ldrh	r3, [r7, #4]
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2302      	movs	r3, #2
 8002e16:	21a0      	movs	r1, #160	@ 0xa0
 8002e18:	f000 fe28 	bl	8003a6c <HAL_I2C_Mem_Write>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	757b      	strb	r3, [r7, #21]
			HAL_Delay(1);
 8002e20:	2001      	movs	r0, #1
 8002e22:	f7fd fbda 	bl	80005da <HAL_Delay>
			retryCount--;
 8002e26:	7e7b      	ldrb	r3, [r7, #25]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	767b      	strb	r3, [r7, #25]
		} while (halStatus != HAL_OK && retryCount > 0);
 8002e2c:	7d7b      	ldrb	r3, [r7, #21]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <eepromWrite+0x19c>
 8002e32:	7e7b      	ldrb	r3, [r7, #25]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e3      	bne.n	8002e00 <eepromWrite+0x164>

		retVal = halStatus;
 8002e38:	7d7b      	ldrb	r3, [r7, #21]
 8002e3a:	77fb      	strb	r3, [r7, #31]
		if (retVal != LT_OK) {
 8002e3c:	7ffb      	ldrb	r3, [r7, #31]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <eepromWrite+0x1aa>
			return retVal;
 8002e42:	7ffb      	ldrb	r3, [r7, #31]
 8002e44:	e000      	b.n	8002e48 <eepromWrite+0x1ac>
		}
	}

	return retVal;
 8002e46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	42000000 	.word	0x42000000
 8002e54:	200002ec 	.word	0x200002ec

08002e58 <EEPROMInit>:
/**
 * @brief  Initializes the module and establishes communication with the eeprom
 * @param  <hi2c> Pointer to the I2C Handle
 * @retval <lt_err_t> Returns an error code
 */
lt_err_t EEPROMInit(I2C_HandleTypeDef *hi2c) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
	lt_err_t retVal = LT_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]

	// Bind the I2C Bus
	eep_i2c = hi2c;
 8002e64:	4a0e      	ldr	r2, [pc, #56]	@ (8002ea0 <EEPROMInit+0x48>)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6013      	str	r3, [r2, #0]

	retVal = readLTSettings();
 8002e6a:	f000 f81d 	bl	8002ea8 <readLTSettings>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	73fb      	strb	r3, [r7, #15]
	if (retVal != LT_OK) {
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <EEPROMInit+0x24>
		return retVal;
 8002e78:	7bfb      	ldrb	r3, [r7, #15]
 8002e7a:	e00d      	b.n	8002e98 <EEPROMInit+0x40>
	}

	retVal = alignDefaultSettings(false);
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7ff fe3b 	bl	8002af8 <alignDefaultSettings>
 8002e82:	4603      	mov	r3, r0
 8002e84:	73fb      	strb	r3, [r7, #15]
	if (retVal != LT_OK) {
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <EEPROMInit+0x38>
		return retVal;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	e003      	b.n	8002e98 <EEPROMInit+0x40>
	}

	eepromModInit = true;
 8002e90:	4b04      	ldr	r3, [pc, #16]	@ (8002ea4 <EEPROMInit+0x4c>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	701a      	strb	r2, [r3, #0]

	return retVal;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200002ec 	.word	0x200002ec
 8002ea4:	200002f0 	.word	0x200002f0

08002ea8 <readLTSettings>:
 * @note	This reads directly from the EEPROM, but does not provide any information to the caller.
 * 		Use the setter/getter routines below to call information.
 * @param  NONE
 * @retval <lt_err_t> Returns an error code
 */
lt_err_t readLTSettings(void) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
	lt_err_t retVal = LT_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	71fb      	strb	r3, [r7, #7]

	retVal = eepromRead(EEPROM_SETTINGS_ADDR, &ltSettingsLocal.payload, sizeof(lt_settings_t));
 8002eb2:	222c      	movs	r2, #44	@ 0x2c
 8002eb4:	4905      	ldr	r1, [pc, #20]	@ (8002ecc <readLTSettings+0x24>)
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	f7ff fec2 	bl	8002c40 <eepromRead>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71fb      	strb	r3, [r7, #7]

	return retVal;
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200002f4 	.word	0x200002f4

08002ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eda:	4b0c      	ldr	r3, [pc, #48]	@ (8002f0c <HAL_Init+0x3c>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a0b      	ldr	r2, [pc, #44]	@ (8002f0c <HAL_Init+0x3c>)
 8002ee0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ee4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ee6:	2003      	movs	r0, #3
 8002ee8:	f000 f9d4 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002eec:	200f      	movs	r0, #15
 8002eee:	f000 f80f 	bl	8002f10 <HAL_InitTick>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	71fb      	strb	r3, [r7, #7]
 8002efc:	e001      	b.n	8002f02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002efe:	f7fe ff62 	bl	8001dc6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f02:	79fb      	ldrb	r3, [r7, #7]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	58004000 	.word	0x58004000

08002f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002f1c:	4b17      	ldr	r3, [pc, #92]	@ (8002f7c <HAL_InitTick+0x6c>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d024      	beq.n	8002f6e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f24:	f002 fbe2 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b14      	ldr	r3, [pc, #80]	@ (8002f7c <HAL_InitTick+0x6c>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f34:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 f9ea 	bl	8003316 <HAL_SYSTICK_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10f      	bne.n	8002f68 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2b0f      	cmp	r3, #15
 8002f4c:	d809      	bhi.n	8002f62 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	f04f 30ff 	mov.w	r0, #4294967295
 8002f56:	f000 f9a8 	bl	80032aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f5a:	4a09      	ldr	r2, [pc, #36]	@ (8002f80 <HAL_InitTick+0x70>)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	e007      	b.n	8002f72 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	73fb      	strb	r3, [r7, #15]
 8002f66:	e004      	b.n	8002f72 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	73fb      	strb	r3, [r7, #15]
 8002f6c:	e001      	b.n	8002f72 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000030 	.word	0x20000030
 8002f80:	2000002c 	.word	0x2000002c

08002f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_IncTick+0x20>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000030 	.word	0x20000030
 8002fa8:	20000320 	.word	0x20000320

08002fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <HAL_GetTick+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000320 	.word	0x20000320

08002fc4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	@ (8002fd8 <HAL_GetTickPrio+0x14>)
 8002fca:	681b      	ldr	r3, [r3, #0]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	2000002c 	.word	0x2000002c

08002fdc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8002fe0:	4b03      	ldr	r3, [pc, #12]	@ (8002ff0 <HAL_GetTickFreq+0x14>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000030 	.word	0x20000030

08002ff4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_SuspendTick+0x1c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <HAL_SuspendTick+0x1c>)
 8002ffe:	f023 0302 	bic.w	r3, r3, #2
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e010 	.word	0xe000e010

08003014 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_ResumeTick+0x1c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <HAL_ResumeTick+0x1c>)
 800301e:	f043 0302 	orr.w	r3, r3, #2
 8003022:	6013      	str	r3, [r2, #0]
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000e010 	.word	0xe000e010

08003034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003044:	4b0c      	ldr	r3, [pc, #48]	@ (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003050:	4013      	ands	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800305c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003066:	4a04      	ldr	r2, [pc, #16]	@ (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60d3      	str	r3, [r2, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <__NVIC_GetPriorityGrouping+0x18>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0307 	and.w	r3, r3, #7
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0b      	blt.n	80030c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	@ (80030d0 <__NVIC_EnableIRQ+0x38>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	db12      	blt.n	800310c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	f003 021f 	and.w	r2, r3, #31
 80030ec:	490a      	ldr	r1, [pc, #40]	@ (8003118 <__NVIC_DisableIRQ+0x44>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2001      	movs	r0, #1
 80030f6:	fa00 f202 	lsl.w	r2, r0, r2
 80030fa:	3320      	adds	r3, #32
 80030fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003100:	f3bf 8f4f 	dsb	sy
}
 8003104:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003106:	f3bf 8f6f 	isb	sy
}
 800310a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100

0800311c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800312a:	2b00      	cmp	r3, #0
 800312c:	db0c      	blt.n	8003148 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	f003 021f 	and.w	r2, r3, #31
 8003134:	4907      	ldr	r1, [pc, #28]	@ (8003154 <__NVIC_SetPendingIRQ+0x38>)
 8003136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313a:	095b      	lsrs	r3, r3, #5
 800313c:	2001      	movs	r0, #1
 800313e:	fa00 f202 	lsl.w	r2, r0, r2
 8003142:	3340      	adds	r3, #64	@ 0x40
 8003144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	e000e100 	.word	0xe000e100

08003158 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003166:	2b00      	cmp	r3, #0
 8003168:	db0c      	blt.n	8003184 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800316a:	79fb      	ldrb	r3, [r7, #7]
 800316c:	f003 021f 	and.w	r2, r3, #31
 8003170:	4907      	ldr	r1, [pc, #28]	@ (8003190 <__NVIC_ClearPendingIRQ+0x38>)
 8003172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003176:	095b      	lsrs	r3, r3, #5
 8003178:	2001      	movs	r0, #1
 800317a:	fa00 f202 	lsl.w	r2, r0, r2
 800317e:	3360      	adds	r3, #96	@ 0x60
 8003180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000e100 	.word	0xe000e100

08003194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	6039      	str	r1, [r7, #0]
 800319e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	db0a      	blt.n	80031be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	490c      	ldr	r1, [pc, #48]	@ (80031e0 <__NVIC_SetPriority+0x4c>)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	0112      	lsls	r2, r2, #4
 80031b4:	b2d2      	uxtb	r2, r2
 80031b6:	440b      	add	r3, r1
 80031b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031bc:	e00a      	b.n	80031d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4908      	ldr	r1, [pc, #32]	@ (80031e4 <__NVIC_SetPriority+0x50>)
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	f003 030f 	and.w	r3, r3, #15
 80031ca:	3b04      	subs	r3, #4
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	b2d2      	uxtb	r2, r2
 80031d0:	440b      	add	r3, r1
 80031d2:	761a      	strb	r2, [r3, #24]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr
 80031e0:	e000e100 	.word	0xe000e100
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b089      	sub	sp, #36	@ 0x24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f1c3 0307 	rsb	r3, r3, #7
 8003202:	2b04      	cmp	r3, #4
 8003204:	bf28      	it	cs
 8003206:	2304      	movcs	r3, #4
 8003208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3304      	adds	r3, #4
 800320e:	2b06      	cmp	r3, #6
 8003210:	d902      	bls.n	8003218 <NVIC_EncodePriority+0x30>
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	3b03      	subs	r3, #3
 8003216:	e000      	b.n	800321a <NVIC_EncodePriority+0x32>
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800321c:	f04f 32ff 	mov.w	r2, #4294967295
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	43da      	mvns	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	401a      	ands	r2, r3
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003230:	f04f 31ff 	mov.w	r1, #4294967295
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa01 f303 	lsl.w	r3, r1, r3
 800323a:	43d9      	mvns	r1, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	4313      	orrs	r3, r2
         );
}
 8003242:	4618      	mov	r0, r3
 8003244:	3724      	adds	r7, #36	@ 0x24
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
	...

08003250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003260:	d301      	bcc.n	8003266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003266:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <SysTick_Config+0x40>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326e:	210f      	movs	r1, #15
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f7ff ff8e 	bl	8003194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003278:	4b05      	ldr	r3, [pc, #20]	@ (8003290 <SysTick_Config+0x40>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327e:	4b04      	ldr	r3, [pc, #16]	@ (8003290 <SysTick_Config+0x40>)
 8003280:	2207      	movs	r2, #7
 8003282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010

08003294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff fec9 	bl	8003034 <__NVIC_SetPriorityGrouping>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032b8:	f7ff fee0 	bl	800307c <__NVIC_GetPriorityGrouping>
 80032bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	6978      	ldr	r0, [r7, #20]
 80032c4:	f7ff ff90 	bl	80031e8 <NVIC_EncodePriority>
 80032c8:	4602      	mov	r2, r0
 80032ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff5f 	bl	8003194 <__NVIC_SetPriority>
}
 80032d6:	bf00      	nop
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fed3 	bl	8003098 <__NVIC_EnableIRQ>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	4603      	mov	r3, r0
 8003302:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fee3 	bl	80030d4 <__NVIC_DisableIRQ>
}
 800330e:	bf00      	nop
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f7ff ff96 	bl	8003250 <SysTick_Config>
 8003324:	4603      	mov	r3, r0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff feed 	bl	800311c <__NVIC_SetPendingIRQ>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	4603      	mov	r3, r0
 8003352:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003358:	4618      	mov	r0, r3
 800335a:	f7ff fefd 	bl	8003158 <__NVIC_ClearPendingIRQ>
}
 800335e:	bf00      	nop
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003376:	e146      	b.n	8003606 <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	fa01 f303 	lsl.w	r3, r1, r3
 8003384:	4013      	ands	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 8138 	beq.w	8003600 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d005      	beq.n	80033a8 <HAL_GPIO_Init+0x40>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d130      	bne.n	800340a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	2203      	movs	r2, #3
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4013      	ands	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033de:	2201      	movs	r2, #1
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	091b      	lsrs	r3, r3, #4
 80033f4:	f003 0201 	and.w	r2, r3, #1
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	2b03      	cmp	r3, #3
 8003414:	d017      	beq.n	8003446 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	2203      	movs	r2, #3
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d123      	bne.n	800349a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	08da      	lsrs	r2, r3, #3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	3208      	adds	r2, #8
 800345a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	220f      	movs	r2, #15
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	4013      	ands	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	691a      	ldr	r2, [r3, #16]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	4313      	orrs	r3, r2
 800348a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	08da      	lsrs	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	3208      	adds	r2, #8
 8003494:	6939      	ldr	r1, [r7, #16]
 8003496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	2203      	movs	r2, #3
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43db      	mvns	r3, r3
 80034ac:	693a      	ldr	r2, [r7, #16]
 80034ae:	4013      	ands	r3, r2
 80034b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0203 	and.w	r2, r3, #3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 8092 	beq.w	8003600 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80034dc:	4a51      	ldr	r2, [pc, #324]	@ (8003624 <HAL_GPIO_Init+0x2bc>)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	089b      	lsrs	r3, r3, #2
 80034e2:	3302      	adds	r3, #2
 80034e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003506:	d013      	beq.n	8003530 <HAL_GPIO_Init+0x1c8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a47      	ldr	r2, [pc, #284]	@ (8003628 <HAL_GPIO_Init+0x2c0>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00d      	beq.n	800352c <HAL_GPIO_Init+0x1c4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a46      	ldr	r2, [pc, #280]	@ (800362c <HAL_GPIO_Init+0x2c4>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d007      	beq.n	8003528 <HAL_GPIO_Init+0x1c0>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a45      	ldr	r2, [pc, #276]	@ (8003630 <HAL_GPIO_Init+0x2c8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d101      	bne.n	8003524 <HAL_GPIO_Init+0x1bc>
 8003520:	2304      	movs	r3, #4
 8003522:	e006      	b.n	8003532 <HAL_GPIO_Init+0x1ca>
 8003524:	2307      	movs	r3, #7
 8003526:	e004      	b.n	8003532 <HAL_GPIO_Init+0x1ca>
 8003528:	2302      	movs	r3, #2
 800352a:	e002      	b.n	8003532 <HAL_GPIO_Init+0x1ca>
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_GPIO_Init+0x1ca>
 8003530:	2300      	movs	r3, #0
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	f002 0203 	and.w	r2, r2, #3
 8003538:	0092      	lsls	r2, r2, #2
 800353a:	4093      	lsls	r3, r2
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003542:	4938      	ldr	r1, [pc, #224]	@ (8003624 <HAL_GPIO_Init+0x2bc>)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	089b      	lsrs	r3, r3, #2
 8003548:	3302      	adds	r3, #2
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003550:	4b38      	ldr	r3, [pc, #224]	@ (8003634 <HAL_GPIO_Init+0x2cc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	43db      	mvns	r3, r3
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4013      	ands	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003574:	4a2f      	ldr	r2, [pc, #188]	@ (8003634 <HAL_GPIO_Init+0x2cc>)
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800357a:	4b2e      	ldr	r3, [pc, #184]	@ (8003634 <HAL_GPIO_Init+0x2cc>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	43db      	mvns	r3, r3
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	4013      	ands	r3, r2
 8003588:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800359e:	4a25      	ldr	r2, [pc, #148]	@ (8003634 <HAL_GPIO_Init+0x2cc>)
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035a4:	4b23      	ldr	r3, [pc, #140]	@ (8003634 <HAL_GPIO_Init+0x2cc>)
 80035a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035ca:	4a1a      	ldr	r2, [pc, #104]	@ (8003634 <HAL_GPIO_Init+0x2cc>)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80035d2:	4b18      	ldr	r3, [pc, #96]	@ (8003634 <HAL_GPIO_Init+0x2cc>)
 80035d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	43db      	mvns	r3, r3
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4013      	ands	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035f8:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <HAL_GPIO_Init+0x2cc>)
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3301      	adds	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	fa22 f303 	lsr.w	r3, r2, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	f47f aeb1 	bne.w	8003378 <HAL_GPIO_Init+0x10>
  }
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	48001000 	.word	0x48001000
 8003634:	58000800 	.word	0x58000800

08003638 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003638:	b480      	push	{r7}
 800363a:	b087      	sub	sp, #28
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003642:	2300      	movs	r3, #0
 8003644:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003646:	e0b5      	b.n	80037b4 <HAL_GPIO_DeInit+0x17c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003648:	2201      	movs	r2, #1
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 80a8 	beq.w	80037ae <HAL_GPIO_DeInit+0x176>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800365e:	4a5c      	ldr	r2, [pc, #368]	@ (80037d0 <HAL_GPIO_DeInit+0x198>)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4013      	ands	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003686:	d013      	beq.n	80036b0 <HAL_GPIO_DeInit+0x78>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a52      	ldr	r2, [pc, #328]	@ (80037d4 <HAL_GPIO_DeInit+0x19c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d00d      	beq.n	80036ac <HAL_GPIO_DeInit+0x74>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a51      	ldr	r2, [pc, #324]	@ (80037d8 <HAL_GPIO_DeInit+0x1a0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d007      	beq.n	80036a8 <HAL_GPIO_DeInit+0x70>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a50      	ldr	r2, [pc, #320]	@ (80037dc <HAL_GPIO_DeInit+0x1a4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_GPIO_DeInit+0x6c>
 80036a0:	2304      	movs	r3, #4
 80036a2:	e006      	b.n	80036b2 <HAL_GPIO_DeInit+0x7a>
 80036a4:	2307      	movs	r3, #7
 80036a6:	e004      	b.n	80036b2 <HAL_GPIO_DeInit+0x7a>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e002      	b.n	80036b2 <HAL_GPIO_DeInit+0x7a>
 80036ac:	2301      	movs	r3, #1
 80036ae:	e000      	b.n	80036b2 <HAL_GPIO_DeInit+0x7a>
 80036b0:	2300      	movs	r3, #0
 80036b2:	697a      	ldr	r2, [r7, #20]
 80036b4:	f002 0203 	and.w	r2, r2, #3
 80036b8:	0092      	lsls	r2, r2, #2
 80036ba:	4093      	lsls	r3, r2
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d136      	bne.n	8003730 <HAL_GPIO_DeInit+0xf8>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80036c2:	4b47      	ldr	r3, [pc, #284]	@ (80037e0 <HAL_GPIO_DeInit+0x1a8>)
 80036c4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	43db      	mvns	r3, r3
 80036cc:	4944      	ldr	r1, [pc, #272]	@ (80037e0 <HAL_GPIO_DeInit+0x1a8>)
 80036ce:	4013      	ands	r3, r2
 80036d0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80036d4:	4b42      	ldr	r3, [pc, #264]	@ (80037e0 <HAL_GPIO_DeInit+0x1a8>)
 80036d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	43db      	mvns	r3, r3
 80036de:	4940      	ldr	r1, [pc, #256]	@ (80037e0 <HAL_GPIO_DeInit+0x1a8>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80036e6:	4b3e      	ldr	r3, [pc, #248]	@ (80037e0 <HAL_GPIO_DeInit+0x1a8>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	43db      	mvns	r3, r3
 80036ee:	493c      	ldr	r1, [pc, #240]	@ (80037e0 <HAL_GPIO_DeInit+0x1a8>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80036f4:	4b3a      	ldr	r3, [pc, #232]	@ (80037e0 <HAL_GPIO_DeInit+0x1a8>)
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	4938      	ldr	r1, [pc, #224]	@ (80037e0 <HAL_GPIO_DeInit+0x1a8>)
 80036fe:	4013      	ands	r3, r2
 8003700:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	220f      	movs	r2, #15
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003712:	4a2f      	ldr	r2, [pc, #188]	@ (80037d0 <HAL_GPIO_DeInit+0x198>)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	3302      	adds	r3, #2
 800371a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	43da      	mvns	r2, r3
 8003722:	482b      	ldr	r0, [pc, #172]	@ (80037d0 <HAL_GPIO_DeInit+0x198>)
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	089b      	lsrs	r3, r3, #2
 8003728:	400a      	ands	r2, r1
 800372a:	3302      	adds	r3, #2
 800372c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	2103      	movs	r1, #3
 800373a:	fa01 f303 	lsl.w	r3, r1, r3
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	08da      	lsrs	r2, r3, #3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	3208      	adds	r2, #8
 800374c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	220f      	movs	r2, #15
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	08d2      	lsrs	r2, r2, #3
 8003764:	4019      	ands	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3208      	adds	r2, #8
 800376a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2103      	movs	r1, #3
 8003778:	fa01 f303 	lsl.w	r3, r1, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	401a      	ands	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	2101      	movs	r1, #1
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	fa01 f303 	lsl.w	r3, r1, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	401a      	ands	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	2103      	movs	r1, #3
 80037a2:	fa01 f303 	lsl.w	r3, r1, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	401a      	ands	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	609a      	str	r2, [r3, #8]
    }

    position++;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3301      	adds	r3, #1
 80037b2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa22 f303 	lsr.w	r3, r2, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f47f af43 	bne.w	8003648 <HAL_GPIO_DeInit+0x10>
  }
}
 80037c2:	bf00      	nop
 80037c4:	bf00      	nop
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr
 80037d0:	40010000 	.word	0x40010000
 80037d4:	48000400 	.word	0x48000400
 80037d8:	48000800 	.word	0x48000800
 80037dc:	48001000 	.word	0x48001000
 80037e0:	58000800 	.word	0x58000800

080037e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
 80037f0:	4613      	mov	r3, r2
 80037f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037f4:	787b      	ldrb	r3, [r7, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003800:	e002      	b.n	8003808 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003826:	887a      	ldrh	r2, [r7, #2]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4013      	ands	r3, r2
 800382c:	041a      	lsls	r2, r3, #16
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43d9      	mvns	r1, r3
 8003832:	887b      	ldrh	r3, [r7, #2]
 8003834:	400b      	ands	r3, r1
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	619a      	str	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003852:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003854:	68da      	ldr	r2, [r3, #12]
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	4013      	ands	r3, r2
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800385e:	4a05      	ldr	r2, [pc, #20]	@ (8003874 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003860:	88fb      	ldrh	r3, [r7, #6]
 8003862:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003864:	88fb      	ldrh	r3, [r7, #6]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f806 	bl	8003878 <HAL_GPIO_EXTI_Callback>
  }
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	58000800 	.word	0x58000800

08003878 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003896:	4b0a      	ldr	r3, [pc, #40]	@ (80038c0 <HAL_HSEM_IRQHandler+0x30>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800389c:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <HAL_HSEM_IRQHandler+0x30>)
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	43db      	mvns	r3, r3
 80038a4:	4906      	ldr	r1, [pc, #24]	@ (80038c0 <HAL_HSEM_IRQHandler+0x30>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80038aa:	4a05      	ldr	r2, [pc, #20]	@ (80038c0 <HAL_HSEM_IRQHandler+0x30>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f807 	bl	80038c4 <HAL_HSEM_FreeCallback>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	58001500 	.word	0x58001500

080038c4 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e08d      	b.n	8003a06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fe fa72 	bl	8001de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	@ 0x24
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003928:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003938:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d107      	bne.n	8003952 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	e006      	b.n	8003960 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800395e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	2b02      	cmp	r3, #2
 8003966:	d108      	bne.n	800397a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	e007      	b.n	800398a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685a      	ldr	r2, [r3, #4]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003988:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003998:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800399c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69d9      	ldr	r1, [r3, #28]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1a      	ldr	r2, [r3, #32]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f042 0201 	orr.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b082      	sub	sp, #8
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d101      	bne.n	8003a20 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e021      	b.n	8003a64 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2224      	movs	r2, #36	@ 0x24
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0201 	bic.w	r2, r2, #1
 8003a36:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fe fa1d 	bl	8001e78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	4608      	mov	r0, r1
 8003a76:	4611      	mov	r1, r2
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	817b      	strh	r3, [r7, #10]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	813b      	strh	r3, [r7, #8]
 8003a82:	4613      	mov	r3, r2
 8003a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b20      	cmp	r3, #32
 8003a90:	f040 80f9 	bne.w	8003c86 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a94:	6a3b      	ldr	r3, [r7, #32]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_I2C_Mem_Write+0x34>
 8003a9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d105      	bne.n	8003aac <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aa6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0ed      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_I2C_Mem_Write+0x4e>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0e6      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ac2:	f7ff fa73 	bl	8002fac <HAL_GetTick>
 8003ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2319      	movs	r3, #25
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fac3 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0d1      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2221      	movs	r2, #33	@ 0x21
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2240      	movs	r2, #64	@ 0x40
 8003af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b0c:	88f8      	ldrh	r0, [r7, #6]
 8003b0e:	893a      	ldrh	r2, [r7, #8]
 8003b10:	8979      	ldrh	r1, [r7, #10]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f9d3 	bl	8003ec8 <I2C_RequestMemoryWrite>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0a9      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	2bff      	cmp	r3, #255	@ 0xff
 8003b3c:	d90e      	bls.n	8003b5c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	22ff      	movs	r2, #255	@ 0xff
 8003b42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	8979      	ldrh	r1, [r7, #10]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fc47 	bl	80043e8 <I2C_TransferConfig>
 8003b5a:	e00f      	b.n	8003b7c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	8979      	ldrh	r1, [r7, #10]
 8003b6e:	2300      	movs	r3, #0
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 fc36 	bl	80043e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fac6 	bl	8004112 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e07b      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d034      	beq.n	8003c34 <HAL_I2C_Mem_Write+0x1c8>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d130      	bne.n	8003c34 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2180      	movs	r1, #128	@ 0x80
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fa3f 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e04d      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2bff      	cmp	r3, #255	@ 0xff
 8003bf4:	d90e      	bls.n	8003c14 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	22ff      	movs	r2, #255	@ 0xff
 8003bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	2300      	movs	r3, #0
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fbeb 	bl	80043e8 <I2C_TransferConfig>
 8003c12:	e00f      	b.n	8003c34 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	8979      	ldrh	r1, [r7, #10]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fbda 	bl	80043e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d19e      	bne.n	8003b7c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 faac 	bl	80041a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e01a      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2220      	movs	r2, #32
 8003c58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <HAL_I2C_Mem_Write+0x224>)
 8003c66:	400b      	ands	r3, r1
 8003c68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c82:	2300      	movs	r3, #0
 8003c84:	e000      	b.n	8003c88 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003c86:	2302      	movs	r3, #2
  }
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	fe00e800 	.word	0xfe00e800

08003c94 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	817b      	strh	r3, [r7, #10]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	813b      	strh	r3, [r7, #8]
 8003caa:	4613      	mov	r3, r2
 8003cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	f040 80fd 	bne.w	8003eb6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_I2C_Mem_Read+0x34>
 8003cc2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cce:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0f1      	b.n	8003eb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2C_Mem_Read+0x4e>
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e0ea      	b.n	8003eb8 <HAL_I2C_Mem_Read+0x224>
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cea:	f7ff f95f 	bl	8002fac <HAL_GetTick>
 8003cee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2319      	movs	r3, #25
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 f9af 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e0d5      	b.n	8003eb8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2222      	movs	r2, #34	@ 0x22
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2240      	movs	r2, #64	@ 0x40
 8003d18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d34:	88f8      	ldrh	r0, [r7, #6]
 8003d36:	893a      	ldrh	r2, [r7, #8]
 8003d38:	8979      	ldrh	r1, [r7, #10]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	4603      	mov	r3, r0
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f000 f913 	bl	8003f70 <I2C_RequestMemoryRead>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d005      	beq.n	8003d5c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0ad      	b.n	8003eb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2bff      	cmp	r3, #255	@ 0xff
 8003d64:	d90e      	bls.n	8003d84 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	22ff      	movs	r2, #255	@ 0xff
 8003d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	8979      	ldrh	r1, [r7, #10]
 8003d74:	4b52      	ldr	r3, [pc, #328]	@ (8003ec0 <HAL_I2C_Mem_Read+0x22c>)
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d7c:	68f8      	ldr	r0, [r7, #12]
 8003d7e:	f000 fb33 	bl	80043e8 <I2C_TransferConfig>
 8003d82:	e00f      	b.n	8003da4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	8979      	ldrh	r1, [r7, #10]
 8003d96:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec0 <HAL_I2C_Mem_Read+0x22c>)
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fb22 	bl	80043e8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003daa:	2200      	movs	r2, #0
 8003dac:	2104      	movs	r1, #4
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 f956 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e07c      	b.n	8003eb8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd0:	1c5a      	adds	r2, r3, #1
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	3b01      	subs	r3, #1
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d034      	beq.n	8003e64 <HAL_I2C_Mem_Read+0x1d0>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d130      	bne.n	8003e64 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2180      	movs	r1, #128	@ 0x80
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f927 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e04d      	b.n	8003eb8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2bff      	cmp	r3, #255	@ 0xff
 8003e24:	d90e      	bls.n	8003e44 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	22ff      	movs	r2, #255	@ 0xff
 8003e2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	8979      	ldrh	r1, [r7, #10]
 8003e34:	2300      	movs	r3, #0
 8003e36:	9300      	str	r3, [sp, #0]
 8003e38:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fad3 	bl	80043e8 <I2C_TransferConfig>
 8003e42:	e00f      	b.n	8003e64 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	b2da      	uxtb	r2, r3
 8003e54:	8979      	ldrh	r1, [r7, #10]
 8003e56:	2300      	movs	r3, #0
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 fac2 	bl	80043e8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d19a      	bne.n	8003da4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f000 f994 	bl	80041a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e01a      	b.n	8003eb8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2220      	movs	r2, #32
 8003e88:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6859      	ldr	r1, [r3, #4]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <HAL_I2C_Mem_Read+0x230>)
 8003e96:	400b      	ands	r3, r1
 8003e98:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
  }
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3718      	adds	r7, #24
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	80002400 	.word	0x80002400
 8003ec4:	fe00e800 	.word	0xfe00e800

08003ec8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af02      	add	r7, sp, #8
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	4611      	mov	r1, r2
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	817b      	strh	r3, [r7, #10]
 8003eda:	460b      	mov	r3, r1
 8003edc:	813b      	strh	r3, [r7, #8]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	8979      	ldrh	r1, [r7, #10]
 8003ee8:	4b20      	ldr	r3, [pc, #128]	@ (8003f6c <I2C_RequestMemoryWrite+0xa4>)
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fa79 	bl	80043e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	69b9      	ldr	r1, [r7, #24]
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f909 	bl	8004112 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e02c      	b.n	8003f64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f1a:	e015      	b.n	8003f48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	69fa      	ldr	r2, [r7, #28]
 8003f2c:	69b9      	ldr	r1, [r7, #24]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f8ef 	bl	8004112 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e012      	b.n	8003f64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f3e:	893b      	ldrh	r3, [r7, #8]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	2180      	movs	r1, #128	@ 0x80
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f884 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	80002000 	.word	0x80002000

08003f70 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af02      	add	r7, sp, #8
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	817b      	strh	r3, [r7, #10]
 8003f82:	460b      	mov	r3, r1
 8003f84:	813b      	strh	r3, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	8979      	ldrh	r1, [r7, #10]
 8003f90:	4b20      	ldr	r3, [pc, #128]	@ (8004014 <I2C_RequestMemoryRead+0xa4>)
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	2300      	movs	r3, #0
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fa26 	bl	80043e8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	69b9      	ldr	r1, [r7, #24]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f8b6 	bl	8004112 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e02c      	b.n	800400a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fb0:	88fb      	ldrh	r3, [r7, #6]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d105      	bne.n	8003fc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fb6:	893b      	ldrh	r3, [r7, #8]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fc0:	e015      	b.n	8003fee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003fc2:	893b      	ldrh	r3, [r7, #8]
 8003fc4:	0a1b      	lsrs	r3, r3, #8
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	69b9      	ldr	r1, [r7, #24]
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 f89c 	bl	8004112 <I2C_WaitOnTXISFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e012      	b.n	800400a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe4:	893b      	ldrh	r3, [r7, #8]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2140      	movs	r1, #64	@ 0x40
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 f831 	bl	8004060 <I2C_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	80002000 	.word	0x80002000

08004018 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d103      	bne.n	8004036 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2200      	movs	r2, #0
 8004034:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b01      	cmp	r3, #1
 8004042:	d007      	beq.n	8004054 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	699a      	ldr	r2, [r3, #24]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	619a      	str	r2, [r3, #24]
  }
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	4613      	mov	r3, r2
 800406e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004070:	e03b      	b.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	6839      	ldr	r1, [r7, #0]
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 f8d6 	bl	8004228 <I2C_IsErrorOccurred>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e041      	b.n	800410a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408c:	d02d      	beq.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800408e:	f7fe ff8d 	bl	8002fac <HAL_GetTick>
 8004092:	4602      	mov	r2, r0
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d302      	bcc.n	80040a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d122      	bne.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d113      	bne.n	80040ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_lt_err_tIMEOUT;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c6:	f043 0220 	orr.w	r2, r3, #32
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e00f      	b.n	800410a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	699a      	ldr	r2, [r3, #24]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	4013      	ands	r3, r2
 80040f4:	68ba      	ldr	r2, [r7, #8]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	bf0c      	ite	eq
 80040fa:	2301      	moveq	r3, #1
 80040fc:	2300      	movne	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	461a      	mov	r2, r3
 8004102:	79fb      	ldrb	r3, [r7, #7]
 8004104:	429a      	cmp	r2, r3
 8004106:	d0b4      	beq.n	8004072 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	60b9      	str	r1, [r7, #8]
 800411c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800411e:	e033      	b.n	8004188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	68b9      	ldr	r1, [r7, #8]
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f87f 	bl	8004228 <I2C_IsErrorOccurred>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e031      	b.n	8004198 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800413a:	d025      	beq.n	8004188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413c:	f7fe ff36 	bl	8002fac <HAL_GetTick>
 8004140:	4602      	mov	r2, r0
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	d302      	bcc.n	8004152 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d11a      	bne.n	8004188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b02      	cmp	r3, #2
 800415e:	d013      	beq.n	8004188 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_lt_err_tIMEOUT;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004164:	f043 0220 	orr.w	r2, r3, #32
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e007      	b.n	8004198 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b02      	cmp	r3, #2
 8004194:	d1c4      	bne.n	8004120 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3710      	adds	r7, #16
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041ac:	e02f      	b.n	800420e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f838 	bl	8004228 <I2C_IsErrorOccurred>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e02d      	b.n	800421e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041c2:	f7fe fef3 	bl	8002fac <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d302      	bcc.n	80041d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d11a      	bne.n	800420e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d013      	beq.n	800420e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_lt_err_tIMEOUT;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ea:	f043 0220 	orr.w	r2, r3, #32
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e007      	b.n	800421e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b20      	cmp	r3, #32
 800421a:	d1c8      	bne.n	80041ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08a      	sub	sp, #40	@ 0x28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004234:	2300      	movs	r3, #0
 8004236:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004242:	2300      	movs	r3, #0
 8004244:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	f003 0310 	and.w	r3, r3, #16
 8004250:	2b00      	cmp	r3, #0
 8004252:	d068      	beq.n	8004326 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2210      	movs	r2, #16
 800425a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800425c:	e049      	b.n	80042f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d045      	beq.n	80042f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004266:	f7fe fea1 	bl	8002fac <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	429a      	cmp	r2, r3
 8004274:	d302      	bcc.n	800427c <I2C_IsErrorOccurred+0x54>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d13a      	bne.n	80042f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004286:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800428e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800429a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800429e:	d121      	bne.n	80042e4 <I2C_IsErrorOccurred+0xbc>
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042a6:	d01d      	beq.n	80042e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80042a8:	7cfb      	ldrb	r3, [r7, #19]
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d01a      	beq.n	80042e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042be:	f7fe fe75 	bl	8002fac <HAL_GetTick>
 80042c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042c4:	e00e      	b.n	80042e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042c6:	f7fe fe71 	bl	8002fac <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b19      	cmp	r3, #25
 80042d2:	d907      	bls.n	80042e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_lt_err_tIMEOUT;
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	f043 0320 	orr.w	r3, r3, #32
 80042da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80042e2:	e006      	b.n	80042f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d1e9      	bne.n	80042c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f003 0320 	and.w	r3, r3, #32
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d003      	beq.n	8004308 <I2C_IsErrorOccurred+0xe0>
 8004300:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0aa      	beq.n	800425e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004308:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800430c:	2b00      	cmp	r3, #0
 800430e:	d103      	bne.n	8004318 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2220      	movs	r2, #32
 8004316:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004348:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	f043 0308 	orr.w	r3, r3, #8
 8004360:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800436a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00b      	beq.n	8004394 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f043 0302 	orr.w	r3, r3, #2
 8004382:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800438c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004394:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01c      	beq.n	80043d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fe3b 	bl	8004018 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6859      	ldr	r1, [r3, #4]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b0d      	ldr	r3, [pc, #52]	@ (80043e4 <I2C_IsErrorOccurred+0x1bc>)
 80043ae:	400b      	ands	r3, r1
 80043b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2220      	movs	r2, #32
 80043c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80043d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3728      	adds	r7, #40	@ 0x28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	fe00e800 	.word	0xfe00e800

080043e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	607b      	str	r3, [r7, #4]
 80043f2:	460b      	mov	r3, r1
 80043f4:	817b      	strh	r3, [r7, #10]
 80043f6:	4613      	mov	r3, r2
 80043f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80043fa:	897b      	ldrh	r3, [r7, #10]
 80043fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004400:	7a7b      	ldrb	r3, [r7, #9]
 8004402:	041b      	lsls	r3, r3, #16
 8004404:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004408:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800440e:	6a3b      	ldr	r3, [r7, #32]
 8004410:	4313      	orrs	r3, r2
 8004412:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004416:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	6a3b      	ldr	r3, [r7, #32]
 8004420:	0d5b      	lsrs	r3, r3, #21
 8004422:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004426:	4b08      	ldr	r3, [pc, #32]	@ (8004448 <I2C_TransferConfig+0x60>)
 8004428:	430b      	orrs	r3, r1
 800442a:	43db      	mvns	r3, r3
 800442c:	ea02 0103 	and.w	r1, r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800443a:	bf00      	nop
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	03ff63ff 	.word	0x03ff63ff

0800444c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b20      	cmp	r3, #32
 8004460:	d138      	bne.n	80044d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004468:	2b01      	cmp	r3, #1
 800446a:	d101      	bne.n	8004470 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800446c:	2302      	movs	r3, #2
 800446e:	e032      	b.n	80044d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2224      	movs	r2, #36	@ 0x24
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800449e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	683a      	ldr	r2, [r7, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f042 0201 	orr.w	r2, r2, #1
 80044be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	e000      	b.n	80044d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044d4:	2302      	movs	r3, #2
  }
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b20      	cmp	r3, #32
 80044f6:	d139      	bne.n	800456c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004502:	2302      	movs	r3, #2
 8004504:	e033      	b.n	800456e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2224      	movs	r2, #36	@ 0x24
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004534:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	e000      	b.n	800456e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800456c:	2302      	movs	r3, #2
  }
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
	...

0800457c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8004584:	2300      	movs	r3, #0
 8004586:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01e      	beq.n	80045cc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800458e:	4b13      	ldr	r3, [pc, #76]	@ (80045dc <HAL_IPCC_Init+0x60>)
 8004590:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd fc8a 	bl	8001eb8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80045a4:	68b8      	ldr	r0, [r7, #8]
 80045a6:	f000 f85b 	bl	8004660 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f82c 	bl	8004614 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80045ca:	e001      	b.n	80045d0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80045d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	58000c00 	.word	0x58000c00

080045e0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	4613      	mov	r3, r2
 80045ec:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	4613      	mov	r3, r2
 8004606:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	e00f      	b.n	8004642 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	4a0b      	ldr	r2, [pc, #44]	@ (8004658 <IPCC_SetDefaultCallbacks+0x44>)
 800462c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3306      	adds	r3, #6
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	4a08      	ldr	r2, [pc, #32]	@ (800465c <IPCC_SetDefaultCallbacks+0x48>)
 800463a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3301      	adds	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b05      	cmp	r3, #5
 8004646:	d9ec      	bls.n	8004622 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	080045e1 	.word	0x080045e1
 800465c:	080045fb 	.word	0x080045fb

08004660 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8004674:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	223f      	movs	r2, #63	@ 0x3f
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	bf00      	nop
 800467e:	370c      	adds	r7, #12
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800468c:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a04      	ldr	r2, [pc, #16]	@ (80046a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004696:	6013      	str	r3, [r2, #0]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	58000400 	.word	0x58000400

080046a8 <LL_PWR_EnableSRAM2Retention>:
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80046ac:	4b05      	ldr	r3, [pc, #20]	@ (80046c4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	4a04      	ldr	r2, [pc, #16]	@ (80046c4 <LL_PWR_EnableSRAM2Retention+0x1c>)
 80046b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046b6:	6093      	str	r3, [r2, #8]
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	58000400 	.word	0x58000400

080046c8 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 80046cc:	f7ff ffec 	bl	80046a8 <LL_PWR_EnableSRAM2Retention>
}
 80046d0:	bf00      	nop
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80046d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046e6:	d101      	bne.n	80046ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <LL_RCC_HSE_Enable>:
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80046fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800470a:	6013      	str	r3, [r2, #0]
}
 800470c:	bf00      	nop
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <LL_RCC_HSE_Disable>:
{
 8004716:	b480      	push	{r7}
 8004718:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004728:	6013      	str	r3, [r2, #0]
}
 800472a:	bf00      	nop
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <LL_RCC_HSE_IsReady>:
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004742:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004746:	d101      	bne.n	800474c <LL_RCC_HSE_IsReady+0x18>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <LL_RCC_HSE_IsReady+0x1a>
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <LL_RCC_HSI_Enable>:
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800475c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004766:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800476a:	6013      	str	r3, [r2, #0]
}
 800476c:	bf00      	nop
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <LL_RCC_HSI_Disable>:
{
 8004776:	b480      	push	{r7}
 8004778:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800477a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004784:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004788:	6013      	str	r3, [r2, #0]
}
 800478a:	bf00      	nop
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <LL_RCC_HSI_IsReady>:
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a6:	d101      	bne.n	80047ac <LL_RCC_HSI_IsReady+0x18>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <LL_RCC_HSI_IsReady+0x1a>
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80047c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	061b      	lsls	r3, r3, #24
 80047ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047d2:	4313      	orrs	r3, r2
 80047d4:	604b      	str	r3, [r1, #4]
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <LL_RCC_LSE_Enable>:
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80047e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047f2:	f043 0301 	orr.w	r3, r3, #1
 80047f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80047fa:	bf00      	nop
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_RCC_LSE_Disable>:
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004808:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004810:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004814:	f023 0301 	bic.w	r3, r3, #1
 8004818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800481c:	bf00      	nop
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr

08004826 <LL_RCC_LSE_EnableBypass>:
{
 8004826:	b480      	push	{r7}
 8004828:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800482a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004836:	f043 0304 	orr.w	r3, r3, #4
 800483a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800483e:	bf00      	nop
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <LL_RCC_LSE_DisableBypass>:
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800484c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004854:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004858:	f023 0304 	bic.w	r3, r3, #4
 800485c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004860:	bf00      	nop
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <LL_RCC_LSE_IsReady>:
{
 800486a:	b480      	push	{r7}
 800486c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d101      	bne.n	8004882 <LL_RCC_LSE_IsReady+0x18>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <LL_RCC_LSE_IsReady+0x1a>
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <LL_RCC_LSI1_Enable>:
{
 800488e:	b480      	push	{r7}
 8004890:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800489a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80048a6:	bf00      	nop
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <LL_RCC_LSI1_Disable>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80048b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048c0:	f023 0301 	bic.w	r3, r3, #1
 80048c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <LL_RCC_LSI1_IsReady>:
{
 80048d2:	b480      	push	{r7}
 80048d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80048d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d101      	bne.n	80048ea <LL_RCC_LSI1_IsReady+0x18>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <LL_RCC_LSI1_IsReady+0x1a>
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <LL_RCC_LSI2_Enable>:
{
 80048f6:	b480      	push	{r7}
 80048f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80048fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004902:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004906:	f043 0304 	orr.w	r3, r3, #4
 800490a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800490e:	bf00      	nop
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_RCC_LSI2_Disable>:
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800491c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004924:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004928:	f023 0304 	bic.w	r3, r3, #4
 800492c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <LL_RCC_LSI2_IsReady>:
{
 800493a:	b480      	push	{r7}
 800493c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800493e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b08      	cmp	r3, #8
 800494c:	d101      	bne.n	8004952 <LL_RCC_LSI2_IsReady+0x18>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <LL_RCC_LSI2_IsReady+0x1a>
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <LL_RCC_LSI2_SetTrimming>:
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800496a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800496e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004980:	bf00      	nop
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <LL_RCC_MSI_Enable>:
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6013      	str	r3, [r2, #0]
}
 80049a0:	bf00      	nop
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <LL_RCC_MSI_Disable>:
{
 80049aa:	b480      	push	{r7}
 80049ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80049ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049b8:	f023 0301 	bic.w	r3, r3, #1
 80049bc:	6013      	str	r3, [r2, #0]
}
 80049be:	bf00      	nop
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <LL_RCC_MSI_IsReady>:
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80049cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d101      	bne.n	80049de <LL_RCC_MSI_IsReady+0x16>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <LL_RCC_MSI_IsReady+0x18>
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <LL_RCC_MSI_SetRange>:
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80049f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	600b      	str	r3, [r1, #0]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr

08004a12 <LL_RCC_MSI_GetRange>:
{
 8004a12:	b480      	push	{r7}
 8004a14:	b083      	sub	sp, #12
 8004a16:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a22:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2bb0      	cmp	r3, #176	@ 0xb0
 8004a28:	d901      	bls.n	8004a2e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004a2a:	23b0      	movs	r3, #176	@ 0xb0
 8004a2c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004a2e:	687b      	ldr	r3, [r7, #4]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <LL_RCC_MSI_SetCalibTrimming>:
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	021b      	lsls	r3, r3, #8
 8004a52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a56:	4313      	orrs	r3, r2
 8004a58:	604b      	str	r3, [r1, #4]
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr

08004a66 <LL_RCC_SetSysClkSource>:
{
 8004a66:	b480      	push	{r7}
 8004a68:	b083      	sub	sp, #12
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 0203 	bic.w	r2, r3, #3
 8004a78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <LL_RCC_GetSysClkSource>:
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 030c 	and.w	r3, r3, #12
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr

08004aa6 <LL_RCC_SetAHBPrescaler>:
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ab8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
}
 8004ac2:	bf00      	nop
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <LL_C2_RCC_SetAHBPrescaler>:
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ada:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004ade:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ae2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004aee:	bf00      	nop
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <LL_RCC_SetAHB4Prescaler>:
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b06:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b0a:	f023 020f 	bic.w	r2, r3, #15
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b16:	4313      	orrs	r3, r2
 8004b18:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <LL_RCC_SetAPB1Prescaler>:
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004b30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	608b      	str	r3, [r1, #8]
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <LL_RCC_SetAPB2Prescaler>:
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004b58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004b62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <LL_RCC_GetAHBPrescaler>:
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <LL_RCC_GetAHB4Prescaler>:
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004b94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b98:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_RCC_PLL_Enable>:
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004bbe:	6013      	str	r3, [r2, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <LL_RCC_PLL_Disable>:
{
 8004bca:	b480      	push	{r7}
 8004bcc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bdc:	6013      	str	r3, [r2, #0]
}
 8004bde:	bf00      	nop
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <LL_RCC_PLL_IsReady>:
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004bec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004bfa:	d101      	bne.n	8004c00 <LL_RCC_PLL_IsReady+0x18>
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e000      	b.n	8004c02 <LL_RCC_PLL_IsReady+0x1a>
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <LL_RCC_PLL_GetN>:
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	0a1b      	lsrs	r3, r3, #8
 8004c18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <LL_RCC_PLL_GetR>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <LL_RCC_PLL_GetDivider>:
{
 8004c3e:	b480      	push	{r7}
 8004c40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <LL_RCC_PLL_GetMainSource>:
{
 8004c56:	b480      	push	{r7}
 8004c58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f003 0303 	and.w	r3, r3, #3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <LL_RCC_IsActiveFlag_HPRE>:
{
 8004c6e:	b480      	push	{r7}
 8004c70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c80:	d101      	bne.n	8004c86 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr

08004c92 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004c92:	b480      	push	{r7}
 8004c94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004c96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ca6:	d101      	bne.n	8004cac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e000      	b.n	8004cae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004cb8:	b480      	push	{r7}
 8004cba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ccc:	d101      	bne.n	8004cd2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cf0:	d101      	bne.n	8004cf6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e000      	b.n	8004cf8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004d02:	b480      	push	{r7}
 8004d04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d14:	d101      	bne.n	8004d1a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
	...

08004d28 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b08d      	sub	sp, #52	@ 0x34
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e324      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	f000 808d 	beq.w	8004e62 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d48:	f7ff fea1 	bl	8004a8e <LL_RCC_GetSysClkSource>
 8004d4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d4e:	f7ff ff82 	bl	8004c56 <LL_RCC_PLL_GetMainSource>
 8004d52:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_RCC_OscConfig+0x3e>
 8004d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d5c:	2b0c      	cmp	r3, #12
 8004d5e:	d147      	bne.n	8004df0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d144      	bne.n	8004df0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e308      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004d76:	f7ff fe4c 	bl	8004a12 <LL_RCC_MSI_GetRange>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	429c      	cmp	r4, r3
 8004d7e:	d914      	bls.n	8004daa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 fcc5 	bl	8005714 <RCC_SetFlashLatencyFromMSIRange>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e2f7      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff fe26 	bl	80049ea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff fe4a 	bl	8004a3c <LL_RCC_MSI_SetCalibTrimming>
 8004da8:	e013      	b.n	8004dd2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fe1b 	bl	80049ea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fe3f 	bl	8004a3c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f000 fca6 	bl	8005714 <RCC_SetFlashLatencyFromMSIRange>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e2d8      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004dd2:	f000 fc8b 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	4aa4      	ldr	r2, [pc, #656]	@ (800506c <HAL_RCC_OscConfig+0x344>)
 8004dda:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ddc:	4ba4      	ldr	r3, [pc, #656]	@ (8005070 <HAL_RCC_OscConfig+0x348>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe f895 	bl	8002f10 <HAL_InitTick>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d039      	beq.n	8004e60 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	e2c9      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01e      	beq.n	8004e36 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004df8:	f7ff fdc8 	bl	800498c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dfc:	f7fe f8d6 	bl	8002fac <HAL_GetTick>
 8004e00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e04:	f7fe f8d2 	bl	8002fac <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e2b6      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004e16:	f7ff fdd7 	bl	80049c8 <LL_RCC_MSI_IsReady>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0f1      	beq.n	8004e04 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7ff fde0 	bl	80049ea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fe04 	bl	8004a3c <LL_RCC_MSI_SetCalibTrimming>
 8004e34:	e015      	b.n	8004e62 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e36:	f7ff fdb8 	bl	80049aa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e3a:	f7fe f8b7 	bl	8002fac <HAL_GetTick>
 8004e3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e40:	e008      	b.n	8004e54 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e42:	f7fe f8b3 	bl	8002fac <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e297      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004e54:	f7ff fdb8 	bl	80049c8 <LL_RCC_MSI_IsReady>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1f1      	bne.n	8004e42 <HAL_RCC_OscConfig+0x11a>
 8004e5e:	e000      	b.n	8004e62 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004e60:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d047      	beq.n	8004efe <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6e:	f7ff fe0e 	bl	8004a8e <LL_RCC_GetSysClkSource>
 8004e72:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e74:	f7ff feef 	bl	8004c56 <LL_RCC_PLL_GetMainSource>
 8004e78:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d005      	beq.n	8004e8c <HAL_RCC_OscConfig+0x164>
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	2b0c      	cmp	r3, #12
 8004e84:	d108      	bne.n	8004e98 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	2b03      	cmp	r3, #3
 8004e8a:	d105      	bne.n	8004e98 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d134      	bne.n	8004efe <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e275      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x180>
 8004ea2:	f7ff fc29 	bl	80046f8 <LL_RCC_HSE_Enable>
 8004ea6:	e001      	b.n	8004eac <HAL_RCC_OscConfig+0x184>
 8004ea8:	f7ff fc35 	bl	8004716 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d012      	beq.n	8004eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fe f87a 	bl	8002fac <HAL_GetTick>
 8004eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ebc:	f7fe f876 	bl	8002fac <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b64      	cmp	r3, #100	@ 0x64
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e25a      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004ece:	f7ff fc31 	bl	8004734 <LL_RCC_HSE_IsReady>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0f1      	beq.n	8004ebc <HAL_RCC_OscConfig+0x194>
 8004ed8:	e011      	b.n	8004efe <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eda:	f7fe f867 	bl	8002fac <HAL_GetTick>
 8004ede:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ee2:	f7fe f863 	bl	8002fac <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b64      	cmp	r3, #100	@ 0x64
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e247      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004ef4:	f7ff fc1e 	bl	8004734 <LL_RCC_HSE_IsReady>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f1      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d04c      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f0a:	f7ff fdc0 	bl	8004a8e <LL_RCC_GetSysClkSource>
 8004f0e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f10:	f7ff fea1 	bl	8004c56 <LL_RCC_PLL_GetMainSource>
 8004f14:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d005      	beq.n	8004f28 <HAL_RCC_OscConfig+0x200>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	2b0c      	cmp	r3, #12
 8004f20:	d10e      	bne.n	8004f40 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d10b      	bne.n	8004f40 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e227      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7ff fc3d 	bl	80047b8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004f3e:	e031      	b.n	8004fa4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d019      	beq.n	8004f7c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f48:	f7ff fc06 	bl	8004758 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fe f82e 	bl	8002fac <HAL_GetTick>
 8004f50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f54:	f7fe f82a 	bl	8002fac <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e20e      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004f66:	f7ff fc15 	bl	8004794 <LL_RCC_HSI_IsReady>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0f1      	beq.n	8004f54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff fc1f 	bl	80047b8 <LL_RCC_HSI_SetCalibTrimming>
 8004f7a:	e013      	b.n	8004fa4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f7c:	f7ff fbfb 	bl	8004776 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fe f814 	bl	8002fac <HAL_GetTick>
 8004f84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f88:	f7fe f810 	bl	8002fac <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e1f4      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004f9a:	f7ff fbfb 	bl	8004794 <LL_RCC_HSI_IsReady>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1f1      	bne.n	8004f88 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d106      	bne.n	8004fbe <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 80a3 	beq.w	8005104 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d076      	beq.n	80050b4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0310 	and.w	r3, r3, #16
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d046      	beq.n	8005060 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004fd2:	f7ff fc7e 	bl	80048d2 <LL_RCC_LSI1_IsReady>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d113      	bne.n	8005004 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004fdc:	f7ff fc57 	bl	800488e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fe0:	f7fd ffe4 	bl	8002fac <HAL_GetTick>
 8004fe4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004fe8:	f7fd ffe0 	bl	8002fac <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e1c4      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004ffa:	f7ff fc6a 	bl	80048d2 <LL_RCC_LSI1_IsReady>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d0f1      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005004:	f7ff fc77 	bl	80048f6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fd ffd0 	bl	8002fac <HAL_GetTick>
 800500c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005010:	f7fd ffcc 	bl	8002fac <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b03      	cmp	r3, #3
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e1b0      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005022:	f7ff fc8a 	bl	800493a <LL_RCC_LSI2_IsReady>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0f1      	beq.n	8005010 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fc94 	bl	800495e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005036:	f7ff fc3b 	bl	80048b0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503a:	f7fd ffb7 	bl	8002fac <HAL_GetTick>
 800503e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005042:	f7fd ffb3 	bl	8002fac <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e197      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005054:	f7ff fc3d 	bl	80048d2 <LL_RCC_LSI1_IsReady>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f1      	bne.n	8005042 <HAL_RCC_OscConfig+0x31a>
 800505e:	e051      	b.n	8005104 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8005060:	f7ff fc15 	bl	800488e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fd ffa2 	bl	8002fac <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800506a:	e00c      	b.n	8005086 <HAL_RCC_OscConfig+0x35e>
 800506c:	20000014 	.word	0x20000014
 8005070:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005074:	f7fd ff9a 	bl	8002fac <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e17e      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8005086:	f7ff fc24 	bl	80048d2 <LL_RCC_LSI1_IsReady>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d0f1      	beq.n	8005074 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8005090:	f7ff fc42 	bl	8004918 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8005094:	e008      	b.n	80050a8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005096:	f7fd ff89 	bl	8002fac <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	2b03      	cmp	r3, #3
 80050a2:	d901      	bls.n	80050a8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80050a4:	2303      	movs	r3, #3
 80050a6:	e16d      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80050a8:	f7ff fc47 	bl	800493a <LL_RCC_LSI2_IsReady>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f1      	bne.n	8005096 <HAL_RCC_OscConfig+0x36e>
 80050b2:	e027      	b.n	8005104 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80050b4:	f7ff fc30 	bl	8004918 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b8:	f7fd ff78 	bl	8002fac <HAL_GetTick>
 80050bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80050c0:	f7fd ff74 	bl	8002fac <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e158      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80050d2:	f7ff fc32 	bl	800493a <LL_RCC_LSI2_IsReady>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f1      	bne.n	80050c0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80050dc:	f7ff fbe8 	bl	80048b0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050e0:	f7fd ff64 	bl	8002fac <HAL_GetTick>
 80050e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80050e8:	f7fd ff60 	bl	8002fac <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e144      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80050fa:	f7ff fbea 	bl	80048d2 <LL_RCC_LSI1_IsReady>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f1      	bne.n	80050e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d05b      	beq.n	80051c8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005110:	4b9e      	ldr	r3, [pc, #632]	@ (800538c <HAL_RCC_OscConfig+0x664>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d114      	bne.n	8005146 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800511c:	f7ff fab4 	bl	8004688 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005120:	f7fd ff44 	bl	8002fac <HAL_GetTick>
 8005124:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005128:	f7fd ff40 	bl	8002fac <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e124      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800513a:	4b94      	ldr	r3, [pc, #592]	@ (800538c <HAL_RCC_OscConfig+0x664>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d102      	bne.n	8005154 <HAL_RCC_OscConfig+0x42c>
 800514e:	f7ff fb48 	bl	80047e2 <LL_RCC_LSE_Enable>
 8005152:	e00c      	b.n	800516e <HAL_RCC_OscConfig+0x446>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b05      	cmp	r3, #5
 800515a:	d104      	bne.n	8005166 <HAL_RCC_OscConfig+0x43e>
 800515c:	f7ff fb63 	bl	8004826 <LL_RCC_LSE_EnableBypass>
 8005160:	f7ff fb3f 	bl	80047e2 <LL_RCC_LSE_Enable>
 8005164:	e003      	b.n	800516e <HAL_RCC_OscConfig+0x446>
 8005166:	f7ff fb4d 	bl	8004804 <LL_RCC_LSE_Disable>
 800516a:	f7ff fb6d 	bl	8004848 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d014      	beq.n	80051a0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005176:	f7fd ff19 	bl	8002fac <HAL_GetTick>
 800517a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800517c:	e00a      	b.n	8005194 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800517e:	f7fd ff15 	bl	8002fac <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f241 3288 	movw	r2, #5000	@ 0x1388
 800518c:	4293      	cmp	r3, r2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e0f7      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005194:	f7ff fb69 	bl	800486a <LL_RCC_LSE_IsReady>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ef      	beq.n	800517e <HAL_RCC_OscConfig+0x456>
 800519e:	e013      	b.n	80051c8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a0:	f7fd ff04 	bl	8002fac <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80051a6:	e00a      	b.n	80051be <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051a8:	f7fd ff00 	bl	8002fac <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0e2      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 80051be:	f7ff fb54 	bl	800486a <LL_RCC_LSE_IsReady>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1ef      	bne.n	80051a8 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 80d8 	beq.w	8005382 <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d2:	f7ff fc5c 	bl	8004a8e <LL_RCC_GetSysClkSource>
 80051d6:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80051d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f040 80a6 	bne.w	8005336 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0203 	and.w	r2, r3, #3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d123      	bne.n	8005240 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005202:	429a      	cmp	r2, r3
 8005204:	d11c      	bne.n	8005240 <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	0a1b      	lsrs	r3, r3, #8
 800520a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005212:	429a      	cmp	r2, r3
 8005214:	d114      	bne.n	8005240 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8005220:	429a      	cmp	r2, r3
 8005222:	d10d      	bne.n	8005240 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800522e:	429a      	cmp	r2, r3
 8005230:	d106      	bne.n	8005240 <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800523c:	429a      	cmp	r2, r3
 800523e:	d054      	beq.n	80052ea <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	2b0c      	cmp	r3, #12
 8005244:	d04f      	beq.n	80052e6 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005246:	f7ff fcc0 	bl	8004bca <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800524a:	f7fd feaf 	bl	8002fac <HAL_GetTick>
 800524e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005252:	f7fd feab 	bl	8002fac <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e08f      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005264:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1ef      	bne.n	8005252 <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	4b45      	ldr	r3, [pc, #276]	@ (8005390 <HAL_RCC_OscConfig+0x668>)
 800527a:	4013      	ands	r3, r2
 800527c:	687a      	ldr	r2, [r7, #4]
 800527e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005284:	4311      	orrs	r1, r2
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800528a:	0212      	lsls	r2, r2, #8
 800528c:	4311      	orrs	r1, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005292:	4311      	orrs	r1, r2
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005298:	4311      	orrs	r1, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800529e:	430a      	orrs	r2, r1
 80052a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052a8:	f7ff fc80 	bl	8004bac <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052bc:	f7fd fe76 	bl	8002fac <HAL_GetTick>
 80052c0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c4:	f7fd fe72 	bl	8002fac <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e056      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d0ef      	beq.n	80052c4 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052e4:	e04d      	b.n	8005382 <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e04c      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d144      	bne.n	8005382 <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052f8:	f7ff fc58 	bl	8004bac <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800530a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800530c:	f7fd fe4e 	bl	8002fac <HAL_GetTick>
 8005310:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005314:	f7fd fe4a 	bl	8002fac <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e02e      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d0ef      	beq.n	8005314 <HAL_RCC_OscConfig+0x5ec>
 8005334:	e025      	b.n	8005382 <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b0c      	cmp	r3, #12
 800533a:	d020      	beq.n	800537e <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533c:	f7ff fc45 	bl	8004bca <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fd fe34 	bl	8002fac <HAL_GetTick>
 8005344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005348:	f7fd fe30 	bl	8002fac <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e014      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ef      	bne.n	8005348 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8005368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	60d3      	str	r3, [r2, #12]
 800537c:	e001      	b.n	8005382 <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3734      	adds	r7, #52	@ 0x34
 8005388:	46bd      	mov	sp, r7
 800538a:	bd90      	pop	{r4, r7, pc}
 800538c:	58000400 	.word	0x58000400
 8005390:	11c1808c 	.word	0x11c1808c

08005394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e12d      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053a8:	4b98      	ldr	r3, [pc, #608]	@ (800560c <HAL_RCC_ClockConfig+0x278>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d91b      	bls.n	80053ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b95      	ldr	r3, [pc, #596]	@ (800560c <HAL_RCC_ClockConfig+0x278>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f023 0207 	bic.w	r2, r3, #7
 80053be:	4993      	ldr	r1, [pc, #588]	@ (800560c <HAL_RCC_ClockConfig+0x278>)
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c6:	f7fd fdf1 	bl	8002fac <HAL_GetTick>
 80053ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053cc:	e008      	b.n	80053e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80053ce:	f7fd fded 	bl	8002fac <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d901      	bls.n	80053e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	e111      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e0:	4b8a      	ldr	r3, [pc, #552]	@ (800560c <HAL_RCC_ClockConfig+0x278>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0307 	and.w	r3, r3, #7
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d1ef      	bne.n	80053ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d016      	beq.n	8005428 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff fb51 	bl	8004aa6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005404:	f7fd fdd2 	bl	8002fac <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800540c:	f7fd fdce 	bl	8002fac <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0f2      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800541e:	f7ff fc26 	bl	8004c6e <LL_RCC_IsActiveFlag_HPRE>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f1      	beq.n	800540c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d016      	beq.n	8005462 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	4618      	mov	r0, r3
 800543a:	f7ff fb48 	bl	8004ace <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800543e:	f7fd fdb5 	bl	8002fac <HAL_GetTick>
 8005442:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005446:	f7fd fdb1 	bl	8002fac <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e0d5      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005458:	f7ff fc1b 	bl	8004c92 <LL_RCC_IsActiveFlag_C2HPRE>
 800545c:	4603      	mov	r3, r0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0f1      	beq.n	8005446 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800546a:	2b00      	cmp	r3, #0
 800546c:	d016      	beq.n	800549c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	4618      	mov	r0, r3
 8005474:	f7ff fb41 	bl	8004afa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005478:	f7fd fd98 	bl	8002fac <HAL_GetTick>
 800547c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800547e:	e008      	b.n	8005492 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005480:	f7fd fd94 	bl	8002fac <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	2b02      	cmp	r3, #2
 800548c:	d901      	bls.n	8005492 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e0b8      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005492:	f7ff fc11 	bl	8004cb8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f1      	beq.n	8005480 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d016      	beq.n	80054d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7ff fb3b 	bl	8004b28 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054b2:	f7fd fd7b 	bl	8002fac <HAL_GetTick>
 80054b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80054b8:	e008      	b.n	80054cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054ba:	f7fd fd77 	bl	8002fac <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e09b      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80054cc:	f7ff fc07 	bl	8004cde <LL_RCC_IsActiveFlag_PPRE1>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0f1      	beq.n	80054ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0308 	and.w	r3, r3, #8
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d017      	beq.n	8005512 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	691b      	ldr	r3, [r3, #16]
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7ff fb31 	bl	8004b50 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80054ee:	f7fd fd5d 	bl	8002fac <HAL_GetTick>
 80054f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80054f4:	e008      	b.n	8005508 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80054f6:	f7fd fd59 	bl	8002fac <HAL_GetTick>
 80054fa:	4602      	mov	r2, r0
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	2b02      	cmp	r3, #2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e07d      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005508:	f7ff fbfb 	bl	8004d02 <LL_RCC_IsActiveFlag_PPRE2>
 800550c:	4603      	mov	r3, r0
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0f1      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	d043      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d106      	bne.n	8005534 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005526:	f7ff f905 	bl	8004734 <LL_RCC_HSE_IsReady>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11e      	bne.n	800556e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e067      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d106      	bne.n	800554a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800553c:	f7ff fb54 	bl	8004be8 <LL_RCC_PLL_IsReady>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d113      	bne.n	800556e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e05c      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005552:	f7ff fa39 	bl	80049c8 <LL_RCC_MSI_IsReady>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d108      	bne.n	800556e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e051      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005560:	f7ff f918 	bl	8004794 <LL_RCC_HSI_IsReady>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e04a      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff fa77 	bl	8004a66 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005578:	f7fd fd18 	bl	8002fac <HAL_GetTick>
 800557c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557e:	e00a      	b.n	8005596 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005580:	f7fd fd14 	bl	8002fac <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558e:	4293      	cmp	r3, r2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e036      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005596:	f7ff fa7a 	bl	8004a8e <LL_RCC_GetSysClkSource>
 800559a:	4602      	mov	r2, r0
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d1ec      	bne.n	8005580 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055a6:	4b19      	ldr	r3, [pc, #100]	@ (800560c <HAL_RCC_ClockConfig+0x278>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	683a      	ldr	r2, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d21b      	bcs.n	80055ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b4:	4b15      	ldr	r3, [pc, #84]	@ (800560c <HAL_RCC_ClockConfig+0x278>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f023 0207 	bic.w	r2, r3, #7
 80055bc:	4913      	ldr	r1, [pc, #76]	@ (800560c <HAL_RCC_ClockConfig+0x278>)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c4:	f7fd fcf2 	bl	8002fac <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ca:	e008      	b.n	80055de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055cc:	f7fd fcee 	bl	8002fac <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d901      	bls.n	80055de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e012      	b.n	8005604 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055de:	4b0b      	ldr	r3, [pc, #44]	@ (800560c <HAL_RCC_ClockConfig+0x278>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d1ef      	bne.n	80055cc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80055ec:	f000 f87e 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 80055f0:	4603      	mov	r3, r0
 80055f2:	4a07      	ldr	r2, [pc, #28]	@ (8005610 <HAL_RCC_ClockConfig+0x27c>)
 80055f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80055f6:	f7fd fce5 	bl	8002fc4 <HAL_GetTickPrio>
 80055fa:	4603      	mov	r3, r0
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fd fc87 	bl	8002f10 <HAL_InitTick>
 8005602:	4603      	mov	r3, r0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	58004000 	.word	0x58004000
 8005610:	20000014 	.word	0x20000014

08005614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005614:	b590      	push	{r4, r7, lr}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800561a:	f7ff fa38 	bl	8004a8e <LL_RCC_GetSysClkSource>
 800561e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10a      	bne.n	800563c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005626:	f7ff f9f4 	bl	8004a12 <LL_RCC_MSI_GetRange>
 800562a:	4603      	mov	r3, r0
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	4a2b      	ldr	r2, [pc, #172]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8005634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e04b      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b04      	cmp	r3, #4
 8005640:	d102      	bne.n	8005648 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005642:	4b28      	ldr	r3, [pc, #160]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	e045      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b08      	cmp	r3, #8
 800564c:	d10a      	bne.n	8005664 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800564e:	f7ff f841 	bl	80046d4 <LL_RCC_HSE_IsEnabledDiv2>
 8005652:	4603      	mov	r3, r0
 8005654:	2b01      	cmp	r3, #1
 8005656:	d102      	bne.n	800565e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005658:	4b22      	ldr	r3, [pc, #136]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	e03a      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800565e:	4b22      	ldr	r3, [pc, #136]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005660:	60fb      	str	r3, [r7, #12]
 8005662:	e037      	b.n	80056d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005664:	f7ff faf7 	bl	8004c56 <LL_RCC_PLL_GetMainSource>
 8005668:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b02      	cmp	r3, #2
 800566e:	d003      	beq.n	8005678 <HAL_RCC_GetSysClockFreq+0x64>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d003      	beq.n	800567e <HAL_RCC_GetSysClockFreq+0x6a>
 8005676:	e00d      	b.n	8005694 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005678:	4b1a      	ldr	r3, [pc, #104]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800567a:	60bb      	str	r3, [r7, #8]
        break;
 800567c:	e015      	b.n	80056aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800567e:	f7ff f829 	bl	80046d4 <LL_RCC_HSE_IsEnabledDiv2>
 8005682:	4603      	mov	r3, r0
 8005684:	2b01      	cmp	r3, #1
 8005686:	d102      	bne.n	800568e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005688:	4b16      	ldr	r3, [pc, #88]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800568a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800568c:	e00d      	b.n	80056aa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800568e:	4b16      	ldr	r3, [pc, #88]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005690:	60bb      	str	r3, [r7, #8]
        break;
 8005692:	e00a      	b.n	80056aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005694:	f7ff f9bd 	bl	8004a12 <LL_RCC_MSI_GetRange>
 8005698:	4603      	mov	r3, r0
 800569a:	091b      	lsrs	r3, r3, #4
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	4a0f      	ldr	r2, [pc, #60]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80056a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a6:	60bb      	str	r3, [r7, #8]
        break;
 80056a8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80056aa:	f7ff faaf 	bl	8004c0c <LL_RCC_PLL_GetN>
 80056ae:	4602      	mov	r2, r0
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	fb03 f402 	mul.w	r4, r3, r2
 80056b6:	f7ff fac2 	bl	8004c3e <LL_RCC_PLL_GetDivider>
 80056ba:	4603      	mov	r3, r0
 80056bc:	091b      	lsrs	r3, r3, #4
 80056be:	3301      	adds	r3, #1
 80056c0:	fbb4 f4f3 	udiv	r4, r4, r3
 80056c4:	f7ff faaf 	bl	8004c26 <LL_RCC_PLL_GetR>
 80056c8:	4603      	mov	r3, r0
 80056ca:	0f5b      	lsrs	r3, r3, #29
 80056cc:	3301      	adds	r3, #1
 80056ce:	fbb4 f3f3 	udiv	r3, r4, r3
 80056d2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80056d4:	68fb      	ldr	r3, [r7, #12]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd90      	pop	{r4, r7, pc}
 80056de:	bf00      	nop
 80056e0:	0800a1f8 	.word	0x0800a1f8
 80056e4:	00f42400 	.word	0x00f42400
 80056e8:	01e84800 	.word	0x01e84800

080056ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ec:	b598      	push	{r3, r4, r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80056f0:	f7ff ff90 	bl	8005614 <HAL_RCC_GetSysClockFreq>
 80056f4:	4604      	mov	r4, r0
 80056f6:	f7ff fa3f 	bl	8004b78 <LL_RCC_GetAHBPrescaler>
 80056fa:	4603      	mov	r3, r0
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	4a03      	ldr	r2, [pc, #12]	@ (8005710 <HAL_RCC_GetHCLKFreq+0x24>)
 8005704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005708:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd98      	pop	{r3, r4, r7, pc}
 8005710:	0800a1b8 	.word	0x0800a1b8

08005714 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2bb0      	cmp	r3, #176	@ 0xb0
 8005720:	d903      	bls.n	800572a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005722:	4b14      	ldr	r3, [pc, #80]	@ (8005774 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e007      	b.n	800573a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	091b      	lsrs	r3, r3, #4
 800572e:	f003 030f 	and.w	r3, r3, #15
 8005732:	4a10      	ldr	r2, [pc, #64]	@ (8005774 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005738:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800573a:	f7ff fa29 	bl	8004b90 <LL_RCC_GetAHB4Prescaler>
 800573e:	4603      	mov	r3, r0
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	4a0c      	ldr	r2, [pc, #48]	@ (8005778 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005752:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4a09      	ldr	r2, [pc, #36]	@ (800577c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	0c9b      	lsrs	r3, r3, #18
 800575e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005762:	4618      	mov	r0, r3
 8005764:	f000 f80c 	bl	8005780 <RCC_SetFlashLatency>
 8005768:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	0800a1f8 	.word	0x0800a1f8
 8005778:	0800a1b8 	.word	0x0800a1b8
 800577c:	431bde83 	.word	0x431bde83

08005780 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b08f      	sub	sp, #60	@ 0x3c
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800578a:	4b24      	ldr	r3, [pc, #144]	@ (800581c <RCC_SetFlashLatency+0x9c>)
 800578c:	f107 041c 	add.w	r4, r7, #28
 8005790:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005792:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8005796:	4b22      	ldr	r3, [pc, #136]	@ (8005820 <RCC_SetFlashLatency+0xa0>)
 8005798:	f107 040c 	add.w	r4, r7, #12
 800579c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800579e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80057a2:	2300      	movs	r3, #0
 80057a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057a6:	2300      	movs	r3, #0
 80057a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80057aa:	e013      	b.n	80057d4 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80057ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	3338      	adds	r3, #56	@ 0x38
 80057b2:	443b      	add	r3, r7
 80057b4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d807      	bhi.n	80057ce <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80057be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	3338      	adds	r3, #56	@ 0x38
 80057c4:	443b      	add	r3, r7
 80057c6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80057ca:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 80057cc:	e005      	b.n	80057da <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	3301      	adds	r3, #1
 80057d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d9e8      	bls.n	80057ac <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80057da:	4b12      	ldr	r3, [pc, #72]	@ (8005824 <RCC_SetFlashLatency+0xa4>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f023 0207 	bic.w	r2, r3, #7
 80057e2:	4910      	ldr	r1, [pc, #64]	@ (8005824 <RCC_SetFlashLatency+0xa4>)
 80057e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057e6:	4313      	orrs	r3, r2
 80057e8:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80057ea:	f7fd fbdf 	bl	8002fac <HAL_GetTick>
 80057ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80057f0:	e008      	b.n	8005804 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057f2:	f7fd fbdb 	bl	8002fac <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d901      	bls.n	8005804 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	e007      	b.n	8005814 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005804:	4b07      	ldr	r3, [pc, #28]	@ (8005824 <RCC_SetFlashLatency+0xa4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800580e:	429a      	cmp	r2, r3
 8005810:	d1ef      	bne.n	80057f2 <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	373c      	adds	r7, #60	@ 0x3c
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}
 800581c:	0800a00c 	.word	0x0800a00c
 8005820:	0800a01c 	.word	0x0800a01c
 8005824:	58004000 	.word	0x58004000

08005828 <LL_RCC_LSE_IsEnabled>:
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800582c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <LL_RCC_LSE_IsEnabled+0x18>
 800583c:	2301      	movs	r3, #1
 800583e:	e000      	b.n	8005842 <LL_RCC_LSE_IsEnabled+0x1a>
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <LL_RCC_LSE_IsReady>:
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b02      	cmp	r3, #2
 800585e:	d101      	bne.n	8005864 <LL_RCC_LSE_IsReady+0x18>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <LL_RCC_LSE_IsReady+0x1a>
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <LL_RCC_SetRFWKPClockSource>:
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005878:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800587c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005880:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005884:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <LL_RCC_SetUSARTClockSource>:
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80058a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ac:	f023 0203 	bic.w	r2, r3, #3
 80058b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <LL_RCC_SetI2CClockSource>:
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80058d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	091b      	lsrs	r3, r3, #4
 80058dc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80058e0:	43db      	mvns	r3, r3
 80058e2:	401a      	ands	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80058ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80058f6:	bf00      	nop
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <LL_RCC_SetLPTIMClockSource>:
{
 8005902:	b480      	push	{r7}
 8005904:	b083      	sub	sp, #12
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800590a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800590e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	0c1b      	lsrs	r3, r3, #16
 8005916:	041b      	lsls	r3, r3, #16
 8005918:	43db      	mvns	r3, r3
 800591a:	401a      	ands	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	041b      	lsls	r3, r3, #16
 8005920:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <LL_RCC_SetRNGClockSource>:
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800593e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005946:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800594a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4313      	orrs	r3, r2
 8005952:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <LL_RCC_SetCLK48ClockSource>:
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800596a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005972:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <LL_RCC_SetADCClockSource>:
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005996:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800599e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80059a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <LL_RCC_SetRTCClockSource>:
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80059c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80059da:	bf00      	nop
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <LL_RCC_GetRTCClockSource>:
{
 80059e6:	b480      	push	{r7}
 80059e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80059ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <LL_RCC_ForceBackupDomainReset>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a18:	bf00      	nop
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005a22:	b480      	push	{r7}
 8005a24:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005a3a:	bf00      	nop
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005a50:	2300      	movs	r3, #0
 8005a52:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d046      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005a60:	f7ff ffc1 	bl	80059e6 <LL_RCC_GetRTCClockSource>
 8005a64:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	69db      	ldr	r3, [r3, #28]
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d03c      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a70:	f7fe fe0a 	bl	8004688 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d105      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff ff9b 	bl	80059ba <LL_RCC_SetRTCClockSource>
 8005a84:	e02e      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005a86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005a90:	f7ff ffb6 	bl	8005a00 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005a94:	f7ff ffc5 	bl	8005a22 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005aa6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005ab0:	f7ff feba 	bl	8005828 <LL_RCC_LSE_IsEnabled>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d114      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005aba:	f7fd fa77 	bl	8002fac <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ac0:	e00b      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fd fa73 	bl	8002fac <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d902      	bls.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	77fb      	strb	r3, [r7, #31]
              break;
 8005ad8:	e004      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ada:	f7ff feb7 	bl	800584c <LL_RCC_LSE_IsReady>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d1ee      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005ae4:	7ffb      	ldrb	r3, [r7, #31]
 8005ae6:	77bb      	strb	r3, [r7, #30]
 8005ae8:	e001      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aea:	7ffb      	ldrb	r3, [r7, #31]
 8005aec:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0301 	and.w	r3, r3, #1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d004      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff fecc 	bl	800589c <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0310 	and.w	r3, r3, #16
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d004      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fef4 	bl	8005902 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0320 	and.w	r3, r3, #32
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d004      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7ff fee9 	bl	8005902 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0304 	and.w	r3, r3, #4
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d004      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fec1 	bl	80058c8 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02b      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b5a:	d008      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005b64:	d003      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d105      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7ff fedf 	bl	8005936 <LL_RCC_SetRNGClockSource>
 8005b78:	e00a      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	2000      	movs	r0, #0
 8005b86:	f7ff fed6 	bl	8005936 <LL_RCC_SetRNGClockSource>
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7ff fee9 	bl	8005962 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005b98:	d107      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ba4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005ba8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d011      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fee7 	bl	800598e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bc8:	d107      	bne.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd8:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d004      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fe40 	bl	8005870 <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005bf0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3720      	adds	r7, #32
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d101      	bne.n	8005c0e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	e09f      	b.n	8005d4e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fc f96c 	bl	8001f00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c30:	4b49      	ldr	r3, [pc, #292]	@ (8005d58 <HAL_RTC_Init+0x15c>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d07e      	beq.n	8005d3a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	22ca      	movs	r2, #202	@ 0xca
 8005c42:	625a      	str	r2, [r3, #36]	@ 0x24
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2253      	movs	r2, #83	@ 0x53
 8005c4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 f8ab 	bl	8005da8 <RTC_EnterInitMode>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	22ff      	movs	r2, #255	@ 0xff
 8005c5e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2204      	movs	r2, #4
 8005c64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	73fb      	strb	r3, [r7, #15]
 8005c6c:	e067      	b.n	8005d3e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6812      	ldr	r2, [r2, #0]
 8005c78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005c7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c80:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	6899      	ldr	r1, [r3, #8]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	431a      	orrs	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	68d2      	ldr	r2, [r2, #12]
 8005ca8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6919      	ldr	r1, [r3, #16]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	041a      	lsls	r2, r3, #16
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68da      	ldr	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ccc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0202 	bic.w	r2, r2, #2
 8005cdc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	431a      	orrs	r2, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d113      	bne.n	8005d2c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f829 	bl	8005d5c <HAL_RTC_WaitForSynchro>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00d      	beq.n	8005d2c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	22ff      	movs	r2, #255	@ 0xff
 8005d16:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e010      	b.n	8005d4e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	22ff      	movs	r2, #255	@ 0xff
 8005d32:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	73fb      	strb	r3, [r7, #15]
 8005d38:	e001      	b.n	8005d3e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d103      	bne.n	8005d4c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40002800 	.word	0x40002800

08005d5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d72:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005d74:	f7fd f91a 	bl	8002fac <HAL_GetTick>
 8005d78:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d7a:	e009      	b.n	8005d90 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d7c:	f7fd f916 	bl	8002fac <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005d8a:	d901      	bls.n	8005d90 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e007      	b.n	8005da0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ee      	beq.n	8005d7c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d119      	bne.n	8005df2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005dc8:	f7fd f8f0 	bl	8002fac <HAL_GetTick>
 8005dcc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005dce:	e009      	b.n	8005de4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005dd0:	f7fd f8ec 	bl	8002fac <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005dde:	d901      	bls.n	8005de4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005de0:	2303      	movs	r3, #3
 8005de2:	e007      	b.n	8005df4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0ee      	beq.n	8005dd0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e095      	b.n	8005f3a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d108      	bne.n	8005e28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e1e:	d009      	beq.n	8005e34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2200      	movs	r2, #0
 8005e24:	61da      	str	r2, [r3, #28]
 8005e26:	e005      	b.n	8005e34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fc f882 	bl	8001f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e6a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e74:	d902      	bls.n	8005e7c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e76:	2300      	movs	r3, #0
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	e002      	b.n	8005e82 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e80:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005e8a:	d007      	beq.n	8005e9c <HAL_SPI_Init+0xa0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005e94:	d002      	beq.n	8005e9c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	691b      	ldr	r3, [r3, #16]
 8005eb2:	f003 0302 	and.w	r3, r3, #2
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	f003 0301 	and.w	r3, r3, #1
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ede:	ea42 0103 	orr.w	r1, r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	0c1b      	lsrs	r3, r3, #16
 8005ef8:	f003 0204 	and.w	r2, r3, #4
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0a:	f003 0308 	and.w	r3, r3, #8
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68db      	ldr	r3, [r3, #12]
 8005f14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005f18:	ea42 0103 	orr.w	r1, r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b082      	sub	sp, #8
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e049      	b.n	8005fe8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d106      	bne.n	8005f6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fc f835 	bl	8001fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2202      	movs	r2, #2
 8005f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f000 f949 	bl	8006218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2201      	movs	r2, #1
 8005f92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2201      	movs	r2, #1
 8005fba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b086      	sub	sp, #24
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800600a:	2302      	movs	r3, #2
 800600c:	e0ff      	b.n	800620e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2b14      	cmp	r3, #20
 800601a:	f200 80f0 	bhi.w	80061fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800601e:	a201      	add	r2, pc, #4	@ (adr r2, 8006024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006024:	08006079 	.word	0x08006079
 8006028:	080061ff 	.word	0x080061ff
 800602c:	080061ff 	.word	0x080061ff
 8006030:	080061ff 	.word	0x080061ff
 8006034:	080060b9 	.word	0x080060b9
 8006038:	080061ff 	.word	0x080061ff
 800603c:	080061ff 	.word	0x080061ff
 8006040:	080061ff 	.word	0x080061ff
 8006044:	080060fb 	.word	0x080060fb
 8006048:	080061ff 	.word	0x080061ff
 800604c:	080061ff 	.word	0x080061ff
 8006050:	080061ff 	.word	0x080061ff
 8006054:	0800613b 	.word	0x0800613b
 8006058:	080061ff 	.word	0x080061ff
 800605c:	080061ff 	.word	0x080061ff
 8006060:	080061ff 	.word	0x080061ff
 8006064:	0800617d 	.word	0x0800617d
 8006068:	080061ff 	.word	0x080061ff
 800606c:	080061ff 	.word	0x080061ff
 8006070:	080061ff 	.word	0x080061ff
 8006074:	080061bd 	.word	0x080061bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68b9      	ldr	r1, [r7, #8]
 800607e:	4618      	mov	r0, r3
 8006080:	f000 f926 	bl	80062d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0208 	orr.w	r2, r2, #8
 8006092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	699a      	ldr	r2, [r3, #24]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0204 	bic.w	r2, r2, #4
 80060a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6999      	ldr	r1, [r3, #24]
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	691a      	ldr	r2, [r3, #16]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	619a      	str	r2, [r3, #24]
      break;
 80060b6:	e0a5      	b.n	8006204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	68b9      	ldr	r1, [r7, #8]
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 f96e 	bl	80063a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6999      	ldr	r1, [r3, #24]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	021a      	lsls	r2, r3, #8
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	430a      	orrs	r2, r1
 80060f6:	619a      	str	r2, [r3, #24]
      break;
 80060f8:	e084      	b.n	8006204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68b9      	ldr	r1, [r7, #8]
 8006100:	4618      	mov	r0, r3
 8006102:	f000 f9bb 	bl	800647c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	69da      	ldr	r2, [r3, #28]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f042 0208 	orr.w	r2, r2, #8
 8006114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	69da      	ldr	r2, [r3, #28]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0204 	bic.w	r2, r2, #4
 8006124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69d9      	ldr	r1, [r3, #28]
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	430a      	orrs	r2, r1
 8006136:	61da      	str	r2, [r3, #28]
      break;
 8006138:	e064      	b.n	8006204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	4618      	mov	r0, r3
 8006142:	f000 fa07 	bl	8006554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69d9      	ldr	r1, [r3, #28]
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	021a      	lsls	r2, r3, #8
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	61da      	str	r2, [r3, #28]
      break;
 800617a:	e043      	b.n	8006204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 fa38 	bl	80065f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0208 	orr.w	r2, r2, #8
 8006196:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0204 	bic.w	r2, r2, #4
 80061a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	691a      	ldr	r2, [r3, #16]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061ba:	e023      	b.n	8006204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68b9      	ldr	r1, [r7, #8]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fa64 	bl	8006690 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80061fc:	e002      	b.n	8006204 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	75fb      	strb	r3, [r7, #23]
      break;
 8006202:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800620c:	7dfb      	ldrb	r3, [r7, #23]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop

08006218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a28      	ldr	r2, [pc, #160]	@ (80062cc <TIM_Base_SetConfig+0xb4>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_Base_SetConfig+0x20>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006236:	d108      	bne.n	800624a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800623e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	68fa      	ldr	r2, [r7, #12]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a1f      	ldr	r2, [pc, #124]	@ (80062cc <TIM_Base_SetConfig+0xb4>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_Base_SetConfig+0x42>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006258:	d108      	bne.n	800626c <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	689a      	ldr	r2, [r3, #8]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a0e      	ldr	r2, [pc, #56]	@ (80062cc <TIM_Base_SetConfig+0xb4>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d103      	bne.n	80062a0 <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	691a      	ldr	r2, [r3, #16]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0301 	and.w	r3, r3, #1
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d105      	bne.n	80062be <TIM_Base_SetConfig+0xa6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	f023 0201 	bic.w	r2, r3, #1
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	611a      	str	r2, [r3, #16]
  }
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	40012c00 	.word	0x40012c00

080062d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a1b      	ldr	r3, [r3, #32]
 80062de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a1b      	ldr	r3, [r3, #32]
 80062e4:	f023 0201 	bic.w	r2, r3, #1
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f023 0302 	bic.w	r3, r3, #2
 800631c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	4a1c      	ldr	r2, [pc, #112]	@ (800639c <TIM_OC1_SetConfig+0xcc>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d10c      	bne.n	800634a <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	f023 0308 	bic.w	r3, r3, #8
 8006336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f023 0304 	bic.w	r3, r3, #4
 8006348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a13      	ldr	r2, [pc, #76]	@ (800639c <TIM_OC1_SetConfig+0xcc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d111      	bne.n	8006376 <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	621a      	str	r2, [r3, #32]
}
 8006390:	bf00      	nop
 8006392:	371c      	adds	r7, #28
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	40012c00 	.word	0x40012c00

080063a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f023 0210 	bic.w	r2, r3, #16
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	021b      	lsls	r3, r3, #8
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	f023 0320 	bic.w	r3, r3, #32
 80063ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	011b      	lsls	r3, r3, #4
 80063f6:	697a      	ldr	r2, [r7, #20]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	4a1e      	ldr	r2, [pc, #120]	@ (8006478 <TIM_OC2_SetConfig+0xd8>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d10d      	bne.n	8006420 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800640a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	011b      	lsls	r3, r3, #4
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800641e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a15      	ldr	r2, [pc, #84]	@ (8006478 <TIM_OC2_SetConfig+0xd8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d113      	bne.n	8006450 <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800642e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	4313      	orrs	r3, r2
 800644e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	693a      	ldr	r2, [r7, #16]
 8006454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685a      	ldr	r2, [r3, #4]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	bf00      	nop
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40012c00 	.word	0x40012c00

0800647c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	69db      	ldr	r3, [r3, #28]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0303 	bic.w	r3, r3, #3
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006550 <TIM_OC3_SetConfig+0xd4>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10d      	bne.n	80064fa <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a14      	ldr	r2, [pc, #80]	@ (8006550 <TIM_OC3_SetConfig+0xd4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d113      	bne.n	800652a <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	621a      	str	r2, [r3, #32]
}
 8006544:	bf00      	nop
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40012c00 	.word	0x40012c00

08006554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	031b      	lsls	r3, r3, #12
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a10      	ldr	r2, [pc, #64]	@ (80065f4 <TIM_OC4_SetConfig+0xa0>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d109      	bne.n	80065cc <TIM_OC4_SetConfig+0x78>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	019b      	lsls	r3, r3, #6
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	621a      	str	r2, [r3, #32]
}
 80065e6:	bf00      	nop
 80065e8:	371c      	adds	r7, #28
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	40012c00 	.word	0x40012c00

080065f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b087      	sub	sp, #28
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
 8006600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006626:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800662a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800663c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	041b      	lsls	r3, r3, #16
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	4313      	orrs	r3, r2
 8006648:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a0f      	ldr	r2, [pc, #60]	@ (800668c <TIM_OC5_SetConfig+0x94>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d109      	bne.n	8006666 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006658:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	693a      	ldr	r2, [r7, #16]
 800667e:	621a      	str	r2, [r3, #32]
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40012c00 	.word	0x40012c00

08006690 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80066d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	051b      	lsls	r3, r3, #20
 80066de:	693a      	ldr	r2, [r7, #16]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a10      	ldr	r2, [pc, #64]	@ (8006728 <TIM_OC6_SetConfig+0x98>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d109      	bne.n	8006700 <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80066f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	029b      	lsls	r3, r3, #10
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	685a      	ldr	r2, [r3, #4]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	621a      	str	r2, [r3, #32]
}
 800671a:	bf00      	nop
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	40012c00 	.word	0x40012c00

0800672c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006740:	2302      	movs	r3, #2
 8006742:	e04a      	b.n	80067da <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a1f      	ldr	r2, [pc, #124]	@ (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d108      	bne.n	8006780 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006774:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006786:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a12      	ldr	r2, [pc, #72]	@ (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d004      	beq.n	80067ae <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067ac:	d10c      	bne.n	80067c8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	40012c00 	.word	0x40012c00

080067ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006804:	2302      	movs	r3, #2
 8006806:	e06e      	b.n	80068e6 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	695b      	ldr	r3, [r3, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686e:	4313      	orrs	r3, r2
 8006870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	041b      	lsls	r3, r3, #16
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	69db      	ldr	r3, [r3, #28]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d11c      	bne.n	80068d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	051b      	lsls	r3, r3, #20
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	6a1b      	ldr	r3, [r3, #32]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3714      	adds	r7, #20
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr
 80068f2:	bf00      	nop
 80068f4:	40012c00 	.word	0x40012c00

080068f8 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80068fe:	2300      	movs	r3, #0
 8006900:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006902:	f107 0308 	add.w	r3, r7, #8
 8006906:	2218      	movs	r2, #24
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f001 f8dd 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006910:	233f      	movs	r3, #63	@ 0x3f
 8006912:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006914:	2381      	movs	r3, #129	@ 0x81
 8006916:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006918:	1dfb      	adds	r3, r7, #7
 800691a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800691c:	2301      	movs	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006920:	f107 0308 	add.w	r3, r7, #8
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f001 fc8c 	bl	8008244 <hci_send_req>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	da01      	bge.n	8006936 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006932:	23ff      	movs	r3, #255	@ 0xff
 8006934:	e000      	b.n	8006938 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006936:	79fb      	ldrb	r3, [r7, #7]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8006940:	b5b0      	push	{r4, r5, r7, lr}
 8006942:	b0ce      	sub	sp, #312	@ 0x138
 8006944:	af00      	add	r7, sp, #0
 8006946:	4605      	mov	r5, r0
 8006948:	460c      	mov	r4, r1
 800694a:	4610      	mov	r0, r2
 800694c:	4619      	mov	r1, r3
 800694e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006952:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006956:	462a      	mov	r2, r5
 8006958:	701a      	strb	r2, [r3, #0]
 800695a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800695e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8006962:	4622      	mov	r2, r4
 8006964:	801a      	strh	r2, [r3, #0]
 8006966:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800696a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800696e:	4602      	mov	r2, r0
 8006970:	801a      	strh	r2, [r3, #0]
 8006972:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006976:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800697a:	460a      	mov	r2, r1
 800697c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800697e:	f107 0310 	add.w	r3, r7, #16
 8006982:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006986:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800698a:	3308      	adds	r3, #8
 800698c:	f107 0210 	add.w	r2, r7, #16
 8006990:	4413      	add	r3, r2
 8006992:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8006996:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800699a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800699e:	4413      	add	r3, r2
 80069a0:	3309      	adds	r3, #9
 80069a2:	f107 0210 	add.w	r2, r7, #16
 80069a6:	4413      	add	r3, r2
 80069a8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80069ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069b0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80069b4:	2200      	movs	r2, #0
 80069b6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80069be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80069c2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80069c6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80069ca:	7812      	ldrb	r2, [r2, #0]
 80069cc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80069ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80069d2:	3301      	adds	r3, #1
 80069d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80069d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80069dc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80069e0:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80069e4:	8812      	ldrh	r2, [r2, #0]
 80069e6:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80069ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80069ee:	3302      	adds	r3, #2
 80069f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80069f4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80069f8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80069fc:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8006a00:	8812      	ldrh	r2, [r2, #0]
 8006a02:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006a06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8006a10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a14:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a18:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006a1c:	7812      	ldrb	r2, [r2, #0]
 8006a1e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006a20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a24:	3301      	adds	r3, #1
 8006a26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006a2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a2e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006a32:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006a34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a38:	3301      	adds	r3, #1
 8006a3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8006a3e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a42:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006a46:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006a48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8006a52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006a56:	3308      	adds	r3, #8
 8006a58:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006a5c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 f822 	bl	8007aaa <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006a66:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006a6a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006a6e:	4413      	add	r3, r2
 8006a70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006a74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006a78:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006a7c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006a7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a82:	3301      	adds	r3, #1
 8006a84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006a88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006a92:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8006a96:	4618      	mov	r0, r3
 8006a98:	f001 f807 	bl	8007aaa <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8006a9c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8006aa0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006aa4:	4413      	add	r3, r2
 8006aa6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8006aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006aae:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8006ab2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ab8:	3302      	adds	r3, #2
 8006aba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 8006abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ac2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8006ac6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8006ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006acc:	3302      	adds	r3, #2
 8006ace:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ad2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ad6:	2218      	movs	r2, #24
 8006ad8:	2100      	movs	r1, #0
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fff5 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ae0:	233f      	movs	r3, #63	@ 0x3f
 8006ae2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8006ae6:	2383      	movs	r3, #131	@ 0x83
 8006ae8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006aec:	f107 0310 	add.w	r3, r7, #16
 8006af0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006af8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006afc:	f107 030f 	add.w	r3, r7, #15
 8006b00:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006b0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b0e:	2100      	movs	r1, #0
 8006b10:	4618      	mov	r0, r3
 8006b12:	f001 fb97 	bl	8008244 <hci_send_req>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	da01      	bge.n	8006b20 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006b1c:	23ff      	movs	r3, #255	@ 0xff
 8006b1e:	e004      	b.n	8006b2a <aci_gap_set_discoverable+0x1ea>
  return status;
 8006b20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006b24:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006b28:	781b      	ldrb	r3, [r3, #0]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bdb0      	pop	{r4, r5, r7, pc}

08006b34 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b0cc      	sub	sp, #304	@ 0x130
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b40:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006b44:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006b46:	f107 0310 	add.w	r3, r7, #16
 8006b4a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006b4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006b52:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006b56:	2200      	movs	r2, #0
 8006b58:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8006b60:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006b64:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006b68:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006b6c:	7812      	ldrb	r2, [r2, #0]
 8006b6e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006b70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006b74:	3301      	adds	r3, #1
 8006b76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006b7a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006b7e:	2218      	movs	r2, #24
 8006b80:	2100      	movs	r1, #0
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 ffa1 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006b88:	233f      	movs	r3, #63	@ 0x3f
 8006b8a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8006b8e:	2385      	movs	r3, #133	@ 0x85
 8006b90:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006b94:	f107 0310 	add.w	r3, r7, #16
 8006b98:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006b9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ba0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006ba4:	f107 030f 	add.w	r3, r7, #15
 8006ba8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006bac:	2301      	movs	r3, #1
 8006bae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006bb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006bb6:	2100      	movs	r1, #0
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f001 fb43 	bl	8008244 <hci_send_req>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	da01      	bge.n	8006bc8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8006bc4:	23ff      	movs	r3, #255	@ 0xff
 8006bc6:	e004      	b.n	8006bd2 <aci_gap_set_io_capability+0x9e>
  return status;
 8006bc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bcc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006bd0:	781b      	ldrb	r3, [r3, #0]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8006bdc:	b5b0      	push	{r4, r5, r7, lr}
 8006bde:	b0cc      	sub	sp, #304	@ 0x130
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4605      	mov	r5, r0
 8006be4:	460c      	mov	r4, r1
 8006be6:	4610      	mov	r0, r2
 8006be8:	4619      	mov	r1, r3
 8006bea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006bf2:	462a      	mov	r2, r5
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006bfa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006bfe:	4622      	mov	r2, r4
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c06:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006c16:	460a      	mov	r2, r1
 8006c18:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006c1a:	f107 0310 	add.w	r3, r7, #16
 8006c1e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006c22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006c26:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c3c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006c40:	7812      	ldrb	r2, [r2, #0]
 8006c42:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006c44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c48:	3301      	adds	r3, #1
 8006c4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8006c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c52:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c56:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006c5a:	7812      	ldrb	r2, [r2, #0]
 8006c5c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006c5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c62:	3301      	adds	r3, #1
 8006c64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8006c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c6c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c70:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006c74:	7812      	ldrb	r2, [r2, #0]
 8006c76:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006c78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006c82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006c86:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006c8a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006c8e:	7812      	ldrb	r2, [r2, #0]
 8006c90:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8006c92:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006c96:	3301      	adds	r3, #1
 8006c98:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ca0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8006ca4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006ca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006caa:	3301      	adds	r3, #1
 8006cac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cb4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8006cb8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006cba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cbe:	3301      	adds	r3, #1
 8006cc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cc8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8006ccc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006cce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8006cd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cdc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8006ce0:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8006ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ce8:	3304      	adds	r3, #4
 8006cea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 8006cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006cf2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006cf6:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006cf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006d02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d06:	2218      	movs	r2, #24
 8006d08:	2100      	movs	r1, #0
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 fedd 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006d10:	233f      	movs	r3, #63	@ 0x3f
 8006d12:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8006d16:	2386      	movs	r3, #134	@ 0x86
 8006d18:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006d1c:	f107 0310 	add.w	r3, r7, #16
 8006d20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006d24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006d2c:	f107 030f 	add.w	r3, r7, #15
 8006d30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006d34:	2301      	movs	r3, #1
 8006d36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006d3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006d3e:	2100      	movs	r1, #0
 8006d40:	4618      	mov	r0, r3
 8006d42:	f001 fa7f 	bl	8008244 <hci_send_req>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da01      	bge.n	8006d50 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006d4c:	23ff      	movs	r3, #255	@ 0xff
 8006d4e:	e004      	b.n	8006d5a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8006d50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d54:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006d58:	781b      	ldrb	r3, [r3, #0]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bdb0      	pop	{r4, r5, r7, pc}

08006d64 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006d64:	b590      	push	{r4, r7, lr}
 8006d66:	b0cd      	sub	sp, #308	@ 0x134
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d74:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006d78:	6013      	str	r3, [r2, #0]
 8006d7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d7e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006d82:	4622      	mov	r2, r4
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d8a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006d8e:	4602      	mov	r2, r0
 8006d90:	701a      	strb	r2, [r3, #0]
 8006d92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d96:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006d9a:	460a      	mov	r2, r1
 8006d9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8006d9e:	f107 0310 	add.w	r3, r7, #16
 8006da2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006da6:	f107 0308 	add.w	r3, r7, #8
 8006daa:	2207      	movs	r2, #7
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fe8b 	bl	8007aca <Osal_MemSet>
  int index_input = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8006dba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006dbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006dc2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006dc6:	7812      	ldrb	r2, [r2, #0]
 8006dc8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006dca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006dce:	3301      	adds	r3, #1
 8006dd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8006dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006dd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006ddc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006de0:	7812      	ldrb	r2, [r2, #0]
 8006de2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006de8:	3301      	adds	r3, #1
 8006dea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8006dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006df2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006df6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006dfa:	7812      	ldrb	r2, [r2, #0]
 8006dfc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e02:	3301      	adds	r3, #1
 8006e04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e0c:	2218      	movs	r2, #24
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fe5a 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006e16:	233f      	movs	r3, #63	@ 0x3f
 8006e18:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8006e1c:	238a      	movs	r3, #138	@ 0x8a
 8006e1e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006e22:	f107 0310 	add.w	r3, r7, #16
 8006e26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8006e32:	f107 0308 	add.w	r3, r7, #8
 8006e36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006e3a:	2307      	movs	r3, #7
 8006e3c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 f9fc 	bl	8008244 <hci_send_req>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da01      	bge.n	8006e56 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8006e52:	23ff      	movs	r3, #255	@ 0xff
 8006e54:	e02e      	b.n	8006eb4 <aci_gap_init+0x150>
  if ( resp.Status )
 8006e56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e5a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <aci_gap_init+0x10c>
    return resp.Status;
 8006e64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e68:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	e021      	b.n	8006eb4 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8006e70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e74:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006e78:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006e8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006e92:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8006e96:	b29a      	uxth	r2, r3
 8006e98:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8006e9c:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8006e9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ea2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006ea6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8006eaa:	b29a      	uxth	r2, r3
 8006eac:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8006eb0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006eb2:	2300      	movs	r3, #0
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd90      	pop	{r4, r7, pc}

08006ebe <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8006ebe:	b580      	push	{r7, lr}
 8006ec0:	b0cc      	sub	sp, #304	@ 0x130
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006eca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006ece:	6019      	str	r1, [r3, #0]
 8006ed0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ed4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006ed8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8006eda:	f107 0310 	add.w	r3, r7, #16
 8006ede:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006ee2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ee6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006eea:	2200      	movs	r2, #0
 8006eec:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006ef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006ef8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006efc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006f00:	7812      	ldrb	r2, [r2, #0]
 8006f02:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8006f0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f12:	1c58      	adds	r0, r3, #1
 8006f14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f18:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006f1c:	781a      	ldrb	r2, [r3, #0]
 8006f1e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f22:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006f26:	6819      	ldr	r1, [r3, #0]
 8006f28:	f000 fdbf 	bl	8007aaa <Osal_MemCpy>
  index_input += AdvDataLen;
 8006f2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f30:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006f40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f44:	2218      	movs	r2, #24
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fdbe 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006f4e:	233f      	movs	r3, #63	@ 0x3f
 8006f50:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8006f54:	238e      	movs	r3, #142	@ 0x8e
 8006f56:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006f5a:	f107 0310 	add.w	r3, r7, #16
 8006f5e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f66:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006f6a:	f107 030f 	add.w	r3, r7, #15
 8006f6e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006f78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 f960 	bl	8008244 <hci_send_req>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da01      	bge.n	8006f8e <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006f8a:	23ff      	movs	r3, #255	@ 0xff
 8006f8c:	e004      	b.n	8006f98 <aci_gap_update_adv_data+0xda>
  return status;
 8006f8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f92:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006f96:	781b      	ldrb	r3, [r3, #0]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fac:	f107 0308 	add.w	r3, r7, #8
 8006fb0:	2218      	movs	r2, #24
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f000 fd88 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fba:	233f      	movs	r3, #63	@ 0x3f
 8006fbc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8006fbe:	2392      	movs	r3, #146	@ 0x92
 8006fc0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006fc2:	1dfb      	adds	r3, r7, #7
 8006fc4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006fca:	f107 0308 	add.w	r3, r7, #8
 8006fce:	2100      	movs	r1, #0
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 f937 	bl	8008244 <hci_send_req>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	da01      	bge.n	8006fe0 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8006fdc:	23ff      	movs	r3, #255	@ 0xff
 8006fde:	e000      	b.n	8006fe2 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8006fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3720      	adds	r7, #32
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b088      	sub	sp, #32
 8006fee:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006ff4:	f107 0308 	add.w	r3, r7, #8
 8006ff8:	2218      	movs	r2, #24
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f000 fd64 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007002:	233f      	movs	r3, #63	@ 0x3f
 8007004:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007006:	f240 1301 	movw	r3, #257	@ 0x101
 800700a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800700c:	1dfb      	adds	r3, r7, #7
 800700e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007010:	2301      	movs	r3, #1
 8007012:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007014:	f107 0308 	add.w	r3, r7, #8
 8007018:	2100      	movs	r1, #0
 800701a:	4618      	mov	r0, r3
 800701c:	f001 f912 	bl	8008244 <hci_send_req>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	da01      	bge.n	800702a <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007026:	23ff      	movs	r3, #255	@ 0xff
 8007028:	e000      	b.n	800702c <aci_gatt_init+0x42>
  return status;
 800702a:	79fb      	ldrb	r3, [r7, #7]
}
 800702c:	4618      	mov	r0, r3
 800702e:	3720      	adds	r7, #32
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007034:	b590      	push	{r4, r7, lr}
 8007036:	b0cf      	sub	sp, #316	@ 0x13c
 8007038:	af00      	add	r7, sp, #0
 800703a:	4604      	mov	r4, r0
 800703c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8007040:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8007044:	6001      	str	r1, [r0, #0]
 8007046:	4610      	mov	r0, r2
 8007048:	4619      	mov	r1, r3
 800704a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800704e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8007052:	4622      	mov	r2, r4
 8007054:	701a      	strb	r2, [r3, #0]
 8007056:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800705a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800705e:	4602      	mov	r2, r0
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007066:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800706a:	460a      	mov	r2, r1
 800706c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800706e:	f107 0310 	add.w	r3, r7, #16
 8007072:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007076:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800707a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d00a      	beq.n	800709a <aci_gatt_add_service+0x66>
 8007084:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007088:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d101      	bne.n	8007096 <aci_gatt_add_service+0x62>
 8007092:	2311      	movs	r3, #17
 8007094:	e002      	b.n	800709c <aci_gatt_add_service+0x68>
 8007096:	2301      	movs	r3, #1
 8007098:	e000      	b.n	800709c <aci_gatt_add_service+0x68>
 800709a:	2303      	movs	r3, #3
 800709c:	f107 0210 	add.w	r2, r7, #16
 80070a0:	4413      	add	r3, r2
 80070a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80070a6:	f107 030c 	add.w	r3, r7, #12
 80070aa:	2203      	movs	r2, #3
 80070ac:	2100      	movs	r1, #0
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fd0b 	bl	8007aca <Osal_MemSet>
  int index_input = 0;
 80070b4:	2300      	movs	r3, #0
 80070b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80070ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80070be:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80070c2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80070c6:	7812      	ldrb	r2, [r2, #0]
 80070c8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80070ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80070ce:	3301      	adds	r3, #1
 80070d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80070d4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80070d8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d002      	beq.n	80070e8 <aci_gatt_add_service+0xb4>
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d004      	beq.n	80070f0 <aci_gatt_add_service+0xbc>
 80070e6:	e007      	b.n	80070f8 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80070e8:	2302      	movs	r3, #2
 80070ea:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80070ee:	e005      	b.n	80070fc <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80070f0:	2310      	movs	r3, #16
 80070f2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80070f6:	e001      	b.n	80070fc <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80070f8:	2397      	movs	r3, #151	@ 0x97
 80070fa:	e06c      	b.n	80071d6 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80070fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007100:	1c58      	adds	r0, r3, #1
 8007102:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8007106:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800710a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800710e:	6819      	ldr	r1, [r3, #0]
 8007110:	f000 fccb 	bl	8007aaa <Osal_MemCpy>
    index_input += size;
 8007114:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8007118:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800711c:	4413      	add	r3, r2
 800711e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8007122:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007126:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800712a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800712e:	7812      	ldrb	r2, [r2, #0]
 8007130:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007132:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007136:	3301      	adds	r3, #1
 8007138:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800713c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007140:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8007144:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8007148:	7812      	ldrb	r2, [r2, #0]
 800714a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800714c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007150:	3301      	adds	r3, #1
 8007152:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007156:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800715a:	2218      	movs	r2, #24
 800715c:	2100      	movs	r1, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fcb3 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007164:	233f      	movs	r3, #63	@ 0x3f
 8007166:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800716a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800716e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007172:	f107 0310 	add.w	r3, r7, #16
 8007176:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800717a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800717e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8007182:	f107 030c 	add.w	r3, r7, #12
 8007186:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800718a:	2303      	movs	r3, #3
 800718c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007190:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007194:	2100      	movs	r1, #0
 8007196:	4618      	mov	r0, r3
 8007198:	f001 f854 	bl	8008244 <hci_send_req>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	da01      	bge.n	80071a6 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80071a2:	23ff      	movs	r3, #255	@ 0xff
 80071a4:	e017      	b.n	80071d6 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80071a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071aa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80071b4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071b8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	e00a      	b.n	80071d6 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80071c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071c4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80071c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80071d2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd90      	pop	{r4, r7, pc}

080071e0 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b0d1      	sub	sp, #324	@ 0x144
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4604      	mov	r4, r0
 80071e8:	4608      	mov	r0, r1
 80071ea:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80071ee:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80071f2:	600a      	str	r2, [r1, #0]
 80071f4:	4619      	mov	r1, r3
 80071f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80071fa:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80071fe:	4622      	mov	r2, r4
 8007200:	801a      	strh	r2, [r3, #0]
 8007202:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007206:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800720a:	4602      	mov	r2, r0
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007212:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8007216:	460a      	mov	r2, r1
 8007218:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800721a:	f107 0318 	add.w	r3, r7, #24
 800721e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007222:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007226:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d00a      	beq.n	8007246 <aci_gatt_add_char+0x66>
 8007230:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007234:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d101      	bne.n	8007242 <aci_gatt_add_char+0x62>
 800723e:	2313      	movs	r3, #19
 8007240:	e002      	b.n	8007248 <aci_gatt_add_char+0x68>
 8007242:	2303      	movs	r3, #3
 8007244:	e000      	b.n	8007248 <aci_gatt_add_char+0x68>
 8007246:	2305      	movs	r3, #5
 8007248:	f107 0218 	add.w	r2, r7, #24
 800724c:	4413      	add	r3, r2
 800724e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007252:	f107 0314 	add.w	r3, r7, #20
 8007256:	2203      	movs	r2, #3
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fc35 	bl	8007aca <Osal_MemSet>
  int index_input = 0;
 8007260:	2300      	movs	r3, #0
 8007262:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8007266:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800726a:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800726e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8007272:	8812      	ldrh	r2, [r2, #0]
 8007274:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007276:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800727a:	3302      	adds	r3, #2
 800727c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007280:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8007284:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8007288:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800728c:	7812      	ldrb	r2, [r2, #0]
 800728e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007290:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007294:	3301      	adds	r3, #1
 8007296:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800729a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800729e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d002      	beq.n	80072ae <aci_gatt_add_char+0xce>
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d004      	beq.n	80072b6 <aci_gatt_add_char+0xd6>
 80072ac:	e007      	b.n	80072be <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80072ae:	2302      	movs	r3, #2
 80072b0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80072b4:	e005      	b.n	80072c2 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80072b6:	2310      	movs	r3, #16
 80072b8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80072bc:	e001      	b.n	80072c2 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80072be:	2397      	movs	r3, #151	@ 0x97
 80072c0:	e091      	b.n	80073e6 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80072c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80072c6:	1cd8      	adds	r0, r3, #3
 80072c8:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80072cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80072d0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80072d4:	6819      	ldr	r1, [r3, #0]
 80072d6:	f000 fbe8 	bl	8007aaa <Osal_MemCpy>
    index_input += size;
 80072da:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80072de:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80072e2:	4413      	add	r3, r2
 80072e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80072e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80072ec:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80072f0:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80072f4:	8812      	ldrh	r2, [r2, #0]
 80072f6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80072f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80072fc:	3302      	adds	r3, #2
 80072fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007302:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007306:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800730a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800730c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007310:	3301      	adds	r3, #1
 8007312:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007316:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800731a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800731e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007320:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007324:	3301      	adds	r3, #1
 8007326:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800732a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800732e:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8007332:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007334:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007338:	3301      	adds	r3, #1
 800733a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800733e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007342:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8007346:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007348:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800734c:	3301      	adds	r3, #1
 800734e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007352:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007356:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800735a:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800735c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007360:	3301      	adds	r3, #1
 8007362:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007366:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800736a:	2218      	movs	r2, #24
 800736c:	2100      	movs	r1, #0
 800736e:	4618      	mov	r0, r3
 8007370:	f000 fbab 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007374:	233f      	movs	r3, #63	@ 0x3f
 8007376:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800737a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800737e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8007382:	f107 0318 	add.w	r3, r7, #24
 8007386:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800738a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800738e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8007392:	f107 0314 	add.w	r3, r7, #20
 8007396:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800739a:	2303      	movs	r3, #3
 800739c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80073a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 ff4c 	bl	8008244 <hci_send_req>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	da01      	bge.n	80073b6 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80073b2:	23ff      	movs	r3, #255	@ 0xff
 80073b4:	e017      	b.n	80073e6 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80073b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80073ba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80073c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80073c8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	e00a      	b.n	80073e6 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80073d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80073d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80073d8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80073dc:	b29a      	uxth	r2, r3
 80073de:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80073e2:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd90      	pop	{r4, r7, pc}

080073f0 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80073f0:	b5b0      	push	{r4, r5, r7, lr}
 80073f2:	b0cc      	sub	sp, #304	@ 0x130
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4605      	mov	r5, r0
 80073f8:	460c      	mov	r4, r1
 80073fa:	4610      	mov	r0, r2
 80073fc:	4619      	mov	r1, r3
 80073fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007402:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007406:	462a      	mov	r2, r5
 8007408:	801a      	strh	r2, [r3, #0]
 800740a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800740e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8007412:	4622      	mov	r2, r4
 8007414:	801a      	strh	r2, [r3, #0]
 8007416:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800741a:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800741e:	4602      	mov	r2, r0
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007426:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800742a:	460a      	mov	r2, r1
 800742c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800742e:	f107 0310 	add.w	r3, r7, #16
 8007432:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007436:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800743a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800743e:	2200      	movs	r2, #0
 8007440:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007442:	2300      	movs	r3, #0
 8007444:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8007448:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800744c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007450:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007454:	8812      	ldrh	r2, [r2, #0]
 8007456:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007458:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800745c:	3302      	adds	r3, #2
 800745e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8007462:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007466:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800746a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800746e:	8812      	ldrh	r2, [r2, #0]
 8007470:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8007472:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007476:	3302      	adds	r3, #2
 8007478:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800747c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007480:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007484:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8007488:	7812      	ldrb	r2, [r2, #0]
 800748a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800748c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007490:	3301      	adds	r3, #1
 8007492:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8007496:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800749a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800749e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80074a2:	7812      	ldrb	r2, [r2, #0]
 80074a4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80074a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80074aa:	3301      	adds	r3, #1
 80074ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80074b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80074b4:	1d98      	adds	r0, r3, #6
 80074b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80074ba:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80074c6:	f000 faf0 	bl	8007aaa <Osal_MemCpy>
  index_input += Char_Value_Length;
 80074ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80074ce:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80074d8:	4413      	add	r3, r2
 80074da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80074e2:	2218      	movs	r2, #24
 80074e4:	2100      	movs	r1, #0
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 faef 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 80074ec:	233f      	movs	r3, #63	@ 0x3f
 80074ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80074f2:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80074f6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80074fa:	f107 0310 	add.w	r3, r7, #16
 80074fe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007502:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007506:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800750a:	f107 030f 	add.w	r3, r7, #15
 800750e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007512:	2301      	movs	r3, #1
 8007514:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007518:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800751c:	2100      	movs	r1, #0
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fe90 	bl	8008244 <hci_send_req>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	da01      	bge.n	800752e <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800752a:	23ff      	movs	r3, #255	@ 0xff
 800752c:	e004      	b.n	8007538 <aci_gatt_update_char_value+0x148>
  return status;
 800752e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007532:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007536:	781b      	ldrb	r3, [r3, #0]
}
 8007538:	4618      	mov	r0, r3
 800753a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800753e:	46bd      	mov	sp, r7
 8007540:	bdb0      	pop	{r4, r5, r7, pc}

08007542 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8007542:	b580      	push	{r7, lr}
 8007544:	b0cc      	sub	sp, #304	@ 0x130
 8007546:	af00      	add	r7, sp, #0
 8007548:	4602      	mov	r2, r0
 800754a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800754e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007552:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8007554:	f107 0310 	add.w	r3, r7, #16
 8007558:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800755c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007560:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800756e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007572:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007576:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800757a:	8812      	ldrh	r2, [r2, #0]
 800757c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800757e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007582:	3302      	adds	r3, #2
 8007584:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007588:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800758c:	2218      	movs	r2, #24
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fa9a 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007596:	233f      	movs	r3, #63	@ 0x3f
 8007598:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800759c:	f240 1325 	movw	r3, #293	@ 0x125
 80075a0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80075a4:	f107 0310 	add.w	r3, r7, #16
 80075a8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80075ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80075b0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80075b4:	f107 030f 	add.w	r3, r7, #15
 80075b8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80075bc:	2301      	movs	r3, #1
 80075be:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80075c6:	2100      	movs	r1, #0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fe3b 	bl	8008244 <hci_send_req>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	da01      	bge.n	80075d8 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80075d4:	23ff      	movs	r3, #255	@ 0xff
 80075d6:	e004      	b.n	80075e2 <aci_gatt_confirm_indication+0xa0>
  return status;
 80075d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80075dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80075e0:	781b      	ldrb	r3, [r3, #0]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b0cc      	sub	sp, #304	@ 0x130
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80075f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007600:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007604:	4602      	mov	r2, r0
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800760c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007610:	460a      	mov	r2, r1
 8007612:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800761c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007620:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800762e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007632:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007636:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800763a:	7812      	ldrb	r2, [r2, #0]
 800763c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800763e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007642:	3301      	adds	r3, #1
 8007644:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8007648:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800764c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007650:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007654:	7812      	ldrb	r2, [r2, #0]
 8007656:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007658:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800765c:	3301      	adds	r3, #1
 800765e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8007662:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007666:	1c98      	adds	r0, r3, #2
 8007668:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800766c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007670:	781a      	ldrb	r2, [r3, #0]
 8007672:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007676:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800767a:	6819      	ldr	r1, [r3, #0]
 800767c:	f000 fa15 	bl	8007aaa <Osal_MemCpy>
  index_input += Length;
 8007680:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007684:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800768e:	4413      	add	r3, r2
 8007690:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007694:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007698:	2218      	movs	r2, #24
 800769a:	2100      	movs	r1, #0
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fa14 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 80076a2:	233f      	movs	r3, #63	@ 0x3f
 80076a4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80076a8:	230c      	movs	r3, #12
 80076aa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80076ae:	f107 0310 	add.w	r3, r7, #16
 80076b2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80076b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80076ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80076be:	f107 030f 	add.w	r3, r7, #15
 80076c2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80076cc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f000 fdb6 	bl	8008244 <hci_send_req>
 80076d8:	4603      	mov	r3, r0
 80076da:	2b00      	cmp	r3, #0
 80076dc:	da01      	bge.n	80076e2 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80076de:	23ff      	movs	r3, #255	@ 0xff
 80076e0:	e004      	b.n	80076ec <aci_hal_write_config_data+0x100>
  return status;
 80076e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80076e6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80076ea:	781b      	ldrb	r3, [r3, #0]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b0cc      	sub	sp, #304	@ 0x130
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	4602      	mov	r2, r0
 80076fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007702:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800770c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8007710:	460a      	mov	r2, r1
 8007712:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007714:	f107 0310 	add.w	r3, r7, #16
 8007718:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800771c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007720:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007724:	2200      	movs	r2, #0
 8007726:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007728:	2300      	movs	r3, #0
 800772a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800772e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007732:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007736:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800773a:	7812      	ldrb	r2, [r2, #0]
 800773c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800773e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007742:	3301      	adds	r3, #1
 8007744:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8007748:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800774c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007750:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007754:	7812      	ldrb	r2, [r2, #0]
 8007756:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007758:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800775c:	3301      	adds	r3, #1
 800775e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007762:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007766:	2218      	movs	r2, #24
 8007768:	2100      	movs	r1, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f000 f9ad 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007770:	233f      	movs	r3, #63	@ 0x3f
 8007772:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8007776:	230f      	movs	r3, #15
 8007778:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800777c:	f107 0310 	add.w	r3, r7, #16
 8007780:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007784:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007788:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800778c:	f107 030f 	add.w	r3, r7, #15
 8007790:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007794:	2301      	movs	r3, #1
 8007796:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800779a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800779e:	2100      	movs	r1, #0
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 fd4f 	bl	8008244 <hci_send_req>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	da01      	bge.n	80077b0 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80077ac:	23ff      	movs	r3, #255	@ 0xff
 80077ae:	e004      	b.n	80077ba <aci_hal_set_tx_power_level+0xc4>
  return status;
 80077b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80077b8:	781b      	ldrb	r3, [r3, #0]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b0cc      	sub	sp, #304	@ 0x130
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	4602      	mov	r2, r0
 80077cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077d0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80077d4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80077d6:	f107 0310 	add.w	r3, r7, #16
 80077da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80077de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80077e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80077f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80077f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80077f8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80077fc:	8812      	ldrh	r2, [r2, #0]
 80077fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007800:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007804:	3302      	adds	r3, #2
 8007806:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800780a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800780e:	2218      	movs	r2, #24
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f000 f959 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x3f;
 8007818:	233f      	movs	r3, #63	@ 0x3f
 800781a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800781e:	2318      	movs	r3, #24
 8007820:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007824:	f107 0310 	add.w	r3, r7, #16
 8007828:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800782c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007830:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007834:	f107 030f 	add.w	r3, r7, #15
 8007838:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800783c:	2301      	movs	r3, #1
 800783e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007842:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007846:	2100      	movs	r1, #0
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fcfb 	bl	8008244 <hci_send_req>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	da01      	bge.n	8007858 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007854:	23ff      	movs	r3, #255	@ 0xff
 8007856:	e004      	b.n	8007862 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007858:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800785c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007860:	781b      	ldrb	r3, [r3, #0]
}
 8007862:	4618      	mov	r0, r3
 8007864:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007876:	f107 0308 	add.w	r3, r7, #8
 800787a:	2218      	movs	r2, #24
 800787c:	2100      	movs	r1, #0
 800787e:	4618      	mov	r0, r3
 8007880:	f000 f923 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x03;
 8007884:	2303      	movs	r3, #3
 8007886:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007888:	2303      	movs	r3, #3
 800788a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800788c:	1dfb      	adds	r3, r7, #7
 800788e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007890:	2301      	movs	r3, #1
 8007892:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007894:	f107 0308 	add.w	r3, r7, #8
 8007898:	2100      	movs	r1, #0
 800789a:	4618      	mov	r0, r3
 800789c:	f000 fcd2 	bl	8008244 <hci_send_req>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	da01      	bge.n	80078aa <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80078a6:	23ff      	movs	r3, #255	@ 0xff
 80078a8:	e000      	b.n	80078ac <hci_reset+0x40>
  return status;
 80078aa:	79fb      	ldrb	r3, [r7, #7]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3720      	adds	r7, #32
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}

080078b4 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b0ce      	sub	sp, #312	@ 0x138
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078be:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80078c2:	6019      	str	r1, [r3, #0]
 80078c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078c8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80078d2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80078d6:	4602      	mov	r2, r0
 80078d8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80078da:	f107 0318 	add.w	r3, r7, #24
 80078de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80078e2:	f107 0310 	add.w	r3, r7, #16
 80078e6:	2205      	movs	r2, #5
 80078e8:	2100      	movs	r1, #0
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 f8ed 	bl	8007aca <Osal_MemSet>
  int index_input = 0;
 80078f0:	2300      	movs	r3, #0
 80078f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 80078f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80078fa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80078fe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007902:	8812      	ldrh	r2, [r2, #0]
 8007904:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007906:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800790a:	3302      	adds	r3, #2
 800790c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007910:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007914:	2218      	movs	r2, #24
 8007916:	2100      	movs	r1, #0
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f8d6 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x08;
 800791e:	2308      	movs	r3, #8
 8007920:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 8007924:	2330      	movs	r3, #48	@ 0x30
 8007926:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800792a:	f107 0318 	add.w	r3, r7, #24
 800792e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8007932:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007936:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800793a:	f107 0310 	add.w	r3, r7, #16
 800793e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8007942:	2305      	movs	r3, #5
 8007944:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007948:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fc78 	bl	8008244 <hci_send_req>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	da01      	bge.n	800795e <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800795a:	23ff      	movs	r3, #255	@ 0xff
 800795c:	e023      	b.n	80079a6 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800795e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007962:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <hci_le_read_phy+0xc4>
    return resp.Status;
 800796c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007970:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	e016      	b.n	80079a6 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8007978:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800797c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007980:	78da      	ldrb	r2, [r3, #3]
 8007982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007986:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800798e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007992:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007996:	791a      	ldrb	r2, [r3, #4]
 8007998:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800799c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80079b0:	b590      	push	{r4, r7, lr}
 80079b2:	b0cd      	sub	sp, #308	@ 0x134
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	4604      	mov	r4, r0
 80079b8:	4608      	mov	r0, r1
 80079ba:	4611      	mov	r1, r2
 80079bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079c0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80079c4:	4622      	mov	r2, r4
 80079c6:	701a      	strb	r2, [r3, #0]
 80079c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079cc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80079d0:	4602      	mov	r2, r0
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079d8:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80079dc:	460a      	mov	r2, r1
 80079de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80079e0:	f107 0310 	add.w	r3, r7, #16
 80079e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80079e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80079ec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80079f4:	2300      	movs	r3, #0
 80079f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80079fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80079fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a02:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007a06:	7812      	ldrb	r2, [r2, #0]
 8007a08:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a0e:	3301      	adds	r3, #1
 8007a10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a18:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a1c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007a20:	7812      	ldrb	r2, [r2, #0]
 8007a22:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a28:	3301      	adds	r3, #1
 8007a2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8007a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007a32:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007a36:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007a3a:	7812      	ldrb	r2, [r2, #0]
 8007a3c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a42:	3301      	adds	r3, #1
 8007a44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007a48:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a4c:	2218      	movs	r2, #24
 8007a4e:	2100      	movs	r1, #0
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 f83a 	bl	8007aca <Osal_MemSet>
  rq.ogf = 0x08;
 8007a56:	2308      	movs	r3, #8
 8007a58:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8007a5c:	2331      	movs	r3, #49	@ 0x31
 8007a5e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007a62:	f107 0310 	add.w	r3, r7, #16
 8007a66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007a6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007a72:	f107 030f 	add.w	r3, r7, #15
 8007a76:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a80:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007a84:	2100      	movs	r1, #0
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fbdc 	bl	8008244 <hci_send_req>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	da01      	bge.n	8007a96 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8007a92:	23ff      	movs	r3, #255	@ 0xff
 8007a94:	e004      	b.n	8007aa0 <hci_le_set_default_phy+0xf0>
  return status;
 8007a96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007a9a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007a9e:	781b      	ldrb	r3, [r3, #0]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd90      	pop	{r4, r7, pc}

08007aaa <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f002 fa36 	bl	8009f2c <memcpy>
 8007ac0:	4603      	mov	r3, r0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b084      	sub	sp, #16
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	60f8      	str	r0, [r7, #12]
 8007ad2:	60b9      	str	r1, [r7, #8]
 8007ad4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	68b9      	ldr	r1, [r7, #8]
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f002 f9e6 	bl	8009eac <memset>
 8007ae0:	4603      	mov	r3, r0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08a      	sub	sp, #40	@ 0x28
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8007af4:	2300      	movs	r3, #0
 8007af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	3301      	adds	r3, #1
 8007afe:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	2bff      	cmp	r3, #255	@ 0xff
 8007b06:	d14c      	bne.n	8007ba2 <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	3302      	adds	r3, #2
 8007b0c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	461a      	mov	r2, r3
 8007b16:	f640 4301 	movw	r3, #3073	@ 0xc01
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d13d      	bne.n	8007b9a <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	3302      	adds	r3, #2
 8007b22:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8007b24:	69bb      	ldr	r3, [r7, #24]
 8007b26:	885b      	ldrh	r3, [r3, #2]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	4b20      	ldr	r3, [pc, #128]	@ (8007bb0 <PeerToPeer_Event_Handler+0xc4>)
 8007b2e:	889b      	ldrh	r3, [r3, #4]
 8007b30:	3302      	adds	r3, #2
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d118      	bne.n	8007b68 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8007b36:	2301      	movs	r3, #1
 8007b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	7a1b      	ldrb	r3, [r3, #8]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d007      	beq.n	8007b58 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	4618      	mov	r0, r3
 8007b52:	f001 fc79 	bl	8009448 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8007b56:	e022      	b.n	8007b9e <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007b5c:	f107 0308 	add.w	r3, r7, #8
 8007b60:	4618      	mov	r0, r3
 8007b62:	f001 fc71 	bl	8009448 <P2PS_STM_App_Notification>
        break;
 8007b66:	e01a      	b.n	8007b9e <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	885b      	ldrh	r3, [r3, #2]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb0 <PeerToPeer_Event_Handler+0xc4>)
 8007b72:	885b      	ldrh	r3, [r3, #2]
 8007b74:	3301      	adds	r3, #1
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d111      	bne.n	8007b9e <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	88db      	ldrh	r3, [r3, #6]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8007b8e:	f107 0308 	add.w	r3, r7, #8
 8007b92:	4618      	mov	r0, r3
 8007b94:	f001 fc58 	bl	8009448 <P2PS_STM_App_Notification>
        break;
 8007b98:	e001      	b.n	8007b9e <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 8007b9a:	bf00      	nop
 8007b9c:	e002      	b.n	8007ba4 <PeerToPeer_Event_Handler+0xb8>
        break;
 8007b9e:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007ba0:	e000      	b.n	8007ba4 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 8007ba2:	bf00      	nop
  }

  return(return_value);
 8007ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3728      	adds	r7, #40	@ 0x28
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}
 8007bb0:	2000004c 	.word	0x2000004c

08007bb4 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b08a      	sub	sp, #40	@ 0x28
 8007bb8:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8007bba:	484a      	ldr	r0, [pc, #296]	@ (8007ce4 <P2PS_STM_Init+0x130>)
 8007bbc:	f000 f94a 	bl	8007e54 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8007bc0:	238f      	movs	r3, #143	@ 0x8f
 8007bc2:	703b      	strb	r3, [r7, #0]
 8007bc4:	23e5      	movs	r3, #229	@ 0xe5
 8007bc6:	707b      	strb	r3, [r7, #1]
 8007bc8:	23b3      	movs	r3, #179	@ 0xb3
 8007bca:	70bb      	strb	r3, [r7, #2]
 8007bcc:	23d5      	movs	r3, #213	@ 0xd5
 8007bce:	70fb      	strb	r3, [r7, #3]
 8007bd0:	232e      	movs	r3, #46	@ 0x2e
 8007bd2:	713b      	strb	r3, [r7, #4]
 8007bd4:	237f      	movs	r3, #127	@ 0x7f
 8007bd6:	717b      	strb	r3, [r7, #5]
 8007bd8:	234a      	movs	r3, #74	@ 0x4a
 8007bda:	71bb      	strb	r3, [r7, #6]
 8007bdc:	2398      	movs	r3, #152	@ 0x98
 8007bde:	71fb      	strb	r3, [r7, #7]
 8007be0:	232a      	movs	r3, #42	@ 0x2a
 8007be2:	723b      	strb	r3, [r7, #8]
 8007be4:	2348      	movs	r3, #72	@ 0x48
 8007be6:	727b      	strb	r3, [r7, #9]
 8007be8:	237a      	movs	r3, #122	@ 0x7a
 8007bea:	72bb      	strb	r3, [r7, #10]
 8007bec:	23cc      	movs	r3, #204	@ 0xcc
 8007bee:	72fb      	strb	r3, [r7, #11]
 8007bf0:	2340      	movs	r3, #64	@ 0x40
 8007bf2:	733b      	strb	r3, [r7, #12]
 8007bf4:	23fe      	movs	r3, #254	@ 0xfe
 8007bf6:	737b      	strb	r3, [r7, #13]
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73bb      	strb	r3, [r7, #14]
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8007c00:	4639      	mov	r1, r7
 8007c02:	4b39      	ldr	r3, [pc, #228]	@ (8007ce8 <P2PS_STM_Init+0x134>)
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	2306      	movs	r3, #6
 8007c08:	2201      	movs	r2, #1
 8007c0a:	2002      	movs	r0, #2
 8007c0c:	f7ff fa12 	bl	8007034 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8007c10:	2319      	movs	r3, #25
 8007c12:	703b      	strb	r3, [r7, #0]
 8007c14:	23ed      	movs	r3, #237	@ 0xed
 8007c16:	707b      	strb	r3, [r7, #1]
 8007c18:	2382      	movs	r3, #130	@ 0x82
 8007c1a:	70bb      	strb	r3, [r7, #2]
 8007c1c:	23ae      	movs	r3, #174	@ 0xae
 8007c1e:	70fb      	strb	r3, [r7, #3]
 8007c20:	23ed      	movs	r3, #237	@ 0xed
 8007c22:	713b      	strb	r3, [r7, #4]
 8007c24:	2321      	movs	r3, #33	@ 0x21
 8007c26:	717b      	strb	r3, [r7, #5]
 8007c28:	234c      	movs	r3, #76	@ 0x4c
 8007c2a:	71bb      	strb	r3, [r7, #6]
 8007c2c:	239d      	movs	r3, #157	@ 0x9d
 8007c2e:	71fb      	strb	r3, [r7, #7]
 8007c30:	2341      	movs	r3, #65	@ 0x41
 8007c32:	723b      	strb	r3, [r7, #8]
 8007c34:	2345      	movs	r3, #69	@ 0x45
 8007c36:	727b      	strb	r3, [r7, #9]
 8007c38:	2322      	movs	r3, #34	@ 0x22
 8007c3a:	72bb      	strb	r3, [r7, #10]
 8007c3c:	238e      	movs	r3, #142	@ 0x8e
 8007c3e:	72fb      	strb	r3, [r7, #11]
 8007c40:	2341      	movs	r3, #65	@ 0x41
 8007c42:	733b      	strb	r3, [r7, #12]
 8007c44:	23fe      	movs	r3, #254	@ 0xfe
 8007c46:	737b      	strb	r3, [r7, #13]
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73bb      	strb	r3, [r7, #14]
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007c50:	4b25      	ldr	r3, [pc, #148]	@ (8007ce8 <P2PS_STM_Init+0x134>)
 8007c52:	8818      	ldrh	r0, [r3, #0]
 8007c54:	463a      	mov	r2, r7
 8007c56:	4b25      	ldr	r3, [pc, #148]	@ (8007cec <P2PS_STM_Init+0x138>)
 8007c58:	9305      	str	r3, [sp, #20]
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	9304      	str	r3, [sp, #16]
 8007c5e:	230a      	movs	r3, #10
 8007c60:	9303      	str	r3, [sp, #12]
 8007c62:	2301      	movs	r3, #1
 8007c64:	9302      	str	r3, [sp, #8]
 8007c66:	2300      	movs	r3, #0
 8007c68:	9301      	str	r3, [sp, #4]
 8007c6a:	2306      	movs	r3, #6
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	2302      	movs	r3, #2
 8007c70:	2102      	movs	r1, #2
 8007c72:	f7ff fab5 	bl	80071e0 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8007c76:	2319      	movs	r3, #25
 8007c78:	703b      	strb	r3, [r7, #0]
 8007c7a:	23ed      	movs	r3, #237	@ 0xed
 8007c7c:	707b      	strb	r3, [r7, #1]
 8007c7e:	2382      	movs	r3, #130	@ 0x82
 8007c80:	70bb      	strb	r3, [r7, #2]
 8007c82:	23ae      	movs	r3, #174	@ 0xae
 8007c84:	70fb      	strb	r3, [r7, #3]
 8007c86:	23ed      	movs	r3, #237	@ 0xed
 8007c88:	713b      	strb	r3, [r7, #4]
 8007c8a:	2321      	movs	r3, #33	@ 0x21
 8007c8c:	717b      	strb	r3, [r7, #5]
 8007c8e:	234c      	movs	r3, #76	@ 0x4c
 8007c90:	71bb      	strb	r3, [r7, #6]
 8007c92:	239d      	movs	r3, #157	@ 0x9d
 8007c94:	71fb      	strb	r3, [r7, #7]
 8007c96:	2341      	movs	r3, #65	@ 0x41
 8007c98:	723b      	strb	r3, [r7, #8]
 8007c9a:	2345      	movs	r3, #69	@ 0x45
 8007c9c:	727b      	strb	r3, [r7, #9]
 8007c9e:	2322      	movs	r3, #34	@ 0x22
 8007ca0:	72bb      	strb	r3, [r7, #10]
 8007ca2:	238e      	movs	r3, #142	@ 0x8e
 8007ca4:	72fb      	strb	r3, [r7, #11]
 8007ca6:	2342      	movs	r3, #66	@ 0x42
 8007ca8:	733b      	strb	r3, [r7, #12]
 8007caa:	23fe      	movs	r3, #254	@ 0xfe
 8007cac:	737b      	strb	r3, [r7, #13]
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73bb      	strb	r3, [r7, #14]
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8007cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce8 <P2PS_STM_Init+0x134>)
 8007cb8:	8818      	ldrh	r0, [r3, #0]
 8007cba:	463a      	mov	r2, r7
 8007cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf0 <P2PS_STM_Init+0x13c>)
 8007cbe:	9305      	str	r3, [sp, #20]
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	230a      	movs	r3, #10
 8007cc6:	9303      	str	r3, [sp, #12]
 8007cc8:	2301      	movs	r3, #1
 8007cca:	9302      	str	r3, [sp, #8]
 8007ccc:	2300      	movs	r3, #0
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	2310      	movs	r3, #16
 8007cd2:	9300      	str	r3, [sp, #0]
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	2102      	movs	r1, #2
 8007cd8:	f7ff fa82 	bl	80071e0 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8007cdc:	bf00      	nop
}
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	08007aed 	.word	0x08007aed
 8007ce8:	2000004c 	.word	0x2000004c
 8007cec:	2000004e 	.word	0x2000004e
 8007cf0:	20000050 	.word	0x20000050

08007cf4 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	af00      	add	r7, sp, #0
  return;
 8007cf8:	bf00      	nop
}
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8007d02:	b480      	push	{r7}
 8007d04:	af00      	add	r7, sp, #0
  return;
 8007d06:	bf00      	nop
}
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8007d10:	b480      	push	{r7}
 8007d12:	af00      	add	r7, sp, #0
  return;
 8007d14:	bf00      	nop
}
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8007d1e:	b480      	push	{r7}
 8007d20:	af00      	add	r7, sp, #0
  return;
 8007d22:	bf00      	nop
}
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	af00      	add	r7, sp, #0
  return;
 8007d30:	bf00      	nop
}
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	af00      	add	r7, sp, #0
  return;
 8007d3e:	bf00      	nop
}
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
  return;
 8007d4c:	bf00      	nop
}
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007d56:	b480      	push	{r7}
 8007d58:	af00      	add	r7, sp, #0
  return;
 8007d5a:	bf00      	nop
}
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	af00      	add	r7, sp, #0
  return;
 8007d68:	bf00      	nop
}
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8007d72:	b480      	push	{r7}
 8007d74:	af00      	add	r7, sp, #0
  return;
 8007d76:	bf00      	nop
}
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8007d80:	b480      	push	{r7}
 8007d82:	af00      	add	r7, sp, #0
  return;
 8007d84:	bf00      	nop
}
 8007d86:	46bd      	mov	sp, r7
 8007d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8c:	4770      	bx	lr

08007d8e <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8007d8e:	b480      	push	{r7}
 8007d90:	af00      	add	r7, sp, #0
  return;
 8007d92:	bf00      	nop
}
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	af00      	add	r7, sp, #0
  return;
 8007da0:	bf00      	nop
}
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8007daa:	b480      	push	{r7}
 8007dac:	af00      	add	r7, sp, #0
  return;
 8007dae:	bf00      	nop
}
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  return;
 8007dbc:	bf00      	nop
}
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	af00      	add	r7, sp, #0
  return;
 8007dca:	bf00      	nop
}
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	af00      	add	r7, sp, #0
  return;
 8007dd8:	bf00      	nop
}
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
	...

08007de4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007de8:	4b04      	ldr	r3, [pc, #16]	@ (8007dfc <SVCCTL_Init+0x18>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007dee:	4b04      	ldr	r3, [pc, #16]	@ (8007e00 <SVCCTL_Init+0x1c>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007df4:	f000 f806 	bl	8007e04 <SVCCTL_SvcInit>

  return;
 8007df8:	bf00      	nop
}
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	20000054 	.word	0x20000054
 8007e00:	20000074 	.word	0x20000074

08007e04 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	af00      	add	r7, sp, #0
  BAS_Init();
 8007e08:	f7ff ff74 	bl	8007cf4 <BAS_Init>

  BLS_Init();
 8007e0c:	f7ff ff79 	bl	8007d02 <BLS_Init>

  CRS_STM_Init();
 8007e10:	f7ff ff7e 	bl	8007d10 <CRS_STM_Init>

  DIS_Init();
 8007e14:	f7ff ff83 	bl	8007d1e <DIS_Init>

  EDS_STM_Init();
 8007e18:	f7ff ff88 	bl	8007d2c <EDS_STM_Init>

  HIDS_Init();
 8007e1c:	f7ff ff8d 	bl	8007d3a <HIDS_Init>

  HRS_Init();
 8007e20:	f7ff ff92 	bl	8007d48 <HRS_Init>

  HTS_Init();
 8007e24:	f7ff ff97 	bl	8007d56 <HTS_Init>

  IAS_Init();
 8007e28:	f7ff ff9c 	bl	8007d64 <IAS_Init>

  LLS_Init();
 8007e2c:	f7ff ffa1 	bl	8007d72 <LLS_Init>

  TPS_Init();
 8007e30:	f7ff ffa6 	bl	8007d80 <TPS_Init>

  MOTENV_STM_Init();
 8007e34:	f7ff ffab 	bl	8007d8e <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007e38:	f7ff febc 	bl	8007bb4 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007e3c:	f7ff ffae 	bl	8007d9c <ZDD_STM_Init>

  OTAS_STM_Init();
 8007e40:	f7ff ffb3 	bl	8007daa <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007e44:	f7ff ffbf 	bl	8007dc6 <BVOPUS_STM_Init>

  MESH_Init();
 8007e48:	f7ff ffb6 	bl	8007db8 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007e4c:	f7ff ffc2 	bl	8007dd4 <SVCCTL_InitCustomSvc>
  
  return;
 8007e50:	bf00      	nop
}
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007e5c:	4b09      	ldr	r3, [pc, #36]	@ (8007e84 <SVCCTL_RegisterSvcHandler+0x30>)
 8007e5e:	7f1b      	ldrb	r3, [r3, #28]
 8007e60:	4619      	mov	r1, r3
 8007e62:	4a08      	ldr	r2, [pc, #32]	@ (8007e84 <SVCCTL_RegisterSvcHandler+0x30>)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007e6a:	4b06      	ldr	r3, [pc, #24]	@ (8007e84 <SVCCTL_RegisterSvcHandler+0x30>)
 8007e6c:	7f1b      	ldrb	r3, [r3, #28]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	4b04      	ldr	r3, [pc, #16]	@ (8007e84 <SVCCTL_RegisterSvcHandler+0x30>)
 8007e74:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007e76:	bf00      	nop
}
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20000054 	.word	0x20000054

08007e88 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3301      	adds	r3, #1
 8007e94:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007e96:	2300      	movs	r3, #0
 8007e98:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	2bff      	cmp	r3, #255	@ 0xff
 8007ea0:	d125      	bne.n	8007eee <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	881b      	ldrh	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007eb2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007eb6:	d118      	bne.n	8007eea <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007eb8:	2300      	movs	r3, #0
 8007eba:	757b      	strb	r3, [r7, #21]
 8007ebc:	e00d      	b.n	8007eda <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007ebe:	7d7b      	ldrb	r3, [r7, #21]
 8007ec0:	4a1a      	ldr	r2, [pc, #104]	@ (8007f2c <SVCCTL_UserEvtRx+0xa4>)
 8007ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d108      	bne.n	8007ee6 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007ed4:	7d7b      	ldrb	r3, [r7, #21]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	757b      	strb	r3, [r7, #21]
 8007eda:	4b14      	ldr	r3, [pc, #80]	@ (8007f2c <SVCCTL_UserEvtRx+0xa4>)
 8007edc:	7f1b      	ldrb	r3, [r3, #28]
 8007ede:	7d7a      	ldrb	r2, [r7, #21]
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d3ec      	bcc.n	8007ebe <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007ee4:	e002      	b.n	8007eec <SVCCTL_UserEvtRx+0x64>
              break;
 8007ee6:	bf00      	nop
          break;
 8007ee8:	e000      	b.n	8007eec <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007eea:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8007eec:	e000      	b.n	8007ef0 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007eee:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d00f      	beq.n	8007f16 <SVCCTL_UserEvtRx+0x8e>
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	dc10      	bgt.n	8007f1c <SVCCTL_UserEvtRx+0x94>
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d002      	beq.n	8007f04 <SVCCTL_UserEvtRx+0x7c>
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d006      	beq.n	8007f10 <SVCCTL_UserEvtRx+0x88>
 8007f02:	e00b      	b.n	8007f1c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 ffd9 	bl	8008ebc <SVCCTL_App_Notification>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75bb      	strb	r3, [r7, #22]
      break;
 8007f0e:	e008      	b.n	8007f22 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007f10:	2301      	movs	r3, #1
 8007f12:	75bb      	strb	r3, [r7, #22]
      break;
 8007f14:	e005      	b.n	8007f22 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75bb      	strb	r3, [r7, #22]
      break;
 8007f1a:	e002      	b.n	8007f22 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	75bb      	strb	r3, [r7, #22]
      break;
 8007f20:	bf00      	nop
  }

  return (return_status);
 8007f22:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000054 	.word	0x20000054

08007f30 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007f38:	f107 030c 	add.w	r3, r7, #12
 8007f3c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	212e      	movs	r1, #46	@ 0x2e
 8007f48:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8007f4c:	f000 fb16 	bl	800857c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	330b      	adds	r3, #11
 8007f54:	78db      	ldrb	r3, [r3, #3]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3720      	adds	r7, #32
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8007f5e:	b580      	push	{r7, lr}
 8007f60:	b088      	sub	sp, #32
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007f66:	f107 030c 	add.w	r3, r7, #12
 8007f6a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	210f      	movs	r1, #15
 8007f76:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8007f7a:	f000 faff 	bl	800857c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	330b      	adds	r3, #11
 8007f82:	78db      	ldrb	r3, [r3, #3]
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3720      	adds	r7, #32
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <SHCI_C2_ExtpaConfig>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ExtpaConfig(uint32_t gpio_port, uint16_t gpio_pin_number, uint8_t gpio_polarity, uint8_t gpio_status)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b088      	sub	sp, #32
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	4608      	mov	r0, r1
 8007f96:	4611      	mov	r1, r2
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	807b      	strh	r3, [r7, #2]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	707b      	strb	r3, [r7, #1]
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	703b      	strb	r3, [r7, #0]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007fa6:	f107 030c 	add.w	r3, r7, #12
 8007faa:	61fb      	str	r3, [r7, #28]

  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_port = gpio_port;
 8007fac:	f107 030c 	add.w	r3, r7, #12
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	601a      	str	r2, [r3, #0]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_pin_number = gpio_pin_number;
 8007fb4:	f107 030c 	add.w	r3, r7, #12
 8007fb8:	887a      	ldrh	r2, [r7, #2]
 8007fba:	809a      	strh	r2, [r3, #4]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_polarity = gpio_polarity;
 8007fbc:	f107 030c 	add.w	r3, r7, #12
 8007fc0:	787a      	ldrb	r2, [r7, #1]
 8007fc2:	719a      	strb	r2, [r3, #6]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_status = gpio_status;
 8007fc4:	f107 030c 	add.w	r3, r7, #12
 8007fc8:	783a      	ldrb	r2, [r7, #0]
 8007fca:	71da      	strb	r2, [r3, #7]

  shci_send( SHCI_OPCODE_C2_EXTPA_CONFIG,
 8007fcc:	f107 020c 	add.w	r2, r7, #12
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2108      	movs	r1, #8
 8007fd4:	f64f 4072 	movw	r0, #64626	@ 0xfc72
 8007fd8:	f000 fad0 	bl	800857c <shci_send>
             8,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	330b      	adds	r3, #11
 8007fe0:	78db      	ldrb	r3, [r3, #3]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b088      	sub	sp, #32
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007ff2:	f107 030c 	add.w	r3, r7, #12
 8007ff6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007ff8:	69fb      	ldr	r3, [r7, #28]
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	2110      	movs	r1, #16
 8007ffe:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8008002:	f000 fabb 	bl	800857c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	330b      	adds	r3, #11
 800800a:	78db      	ldrb	r3, [r3, #3]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3720      	adds	r7, #32
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8008014:	b480      	push	{r7}
 8008016:	b08b      	sub	sp, #44	@ 0x2c
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8008020:	2300      	movs	r3, #0
 8008022:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8008028:	2300      	movs	r3, #0
 800802a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800802c:	2300      	movs	r3, #0
 800802e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8008030:	2300      	movs	r3, #0
 8008032:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8008034:	2300      	movs	r3, #0
 8008036:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800803c:	4b4a      	ldr	r3, [pc, #296]	@ (8008168 <SHCI_GetWirelessFwInfo+0x154>)
 800803e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008040:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008044:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800804e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a44      	ldr	r2, [pc, #272]	@ (800816c <SHCI_GetWirelessFwInfo+0x158>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d10f      	bne.n	8008080 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	695b      	ldr	r3, [r3, #20]
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	69db      	ldr	r3, [r3, #28]
 8008070:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	617b      	str	r3, [r7, #20]
 800807e:	e01a      	b.n	80080b6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8008088:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800808c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	699b      	ldr	r3, [r3, #24]
 80080a4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	0e1b      	lsrs	r3, r3, #24
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80080c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c2:	0c1b      	lsrs	r3, r3, #16
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80080ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080cc:	0a1b      	lsrs	r3, r3, #8
 80080ce:	b2da      	uxtb	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80080d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d6:	091b      	lsrs	r3, r3, #4
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	f003 030f 	and.w	r3, r3, #15
 80080de:	b2da      	uxtb	r2, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	f003 030f 	and.w	r3, r3, #15
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	0e1b      	lsrs	r3, r3, #24
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80080fc:	6a3b      	ldr	r3, [r7, #32]
 80080fe:	0c1b      	lsrs	r3, r3, #16
 8008100:	b2da      	uxtb	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	0a1b      	lsrs	r3, r3, #8
 800810a:	b2da      	uxtb	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008110:	6a3b      	ldr	r3, [r7, #32]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	b2da      	uxtb	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	0e1b      	lsrs	r3, r3, #24
 8008124:	b2da      	uxtb	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	0c1b      	lsrs	r3, r3, #16
 800812e:	b2da      	uxtb	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	b2da      	uxtb	r2, r3
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	0e1b      	lsrs	r3, r3, #24
 8008142:	b2da      	uxtb	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	0c1b      	lsrs	r3, r3, #16
 800814c:	b2da      	uxtb	r2, r3
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	b2da      	uxtb	r2, r3
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800815a:	2300      	movs	r3, #0
}
 800815c:	4618      	mov	r0, r3
 800815e:	372c      	adds	r7, #44	@ 0x2c
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	58004000 	.word	0x58004000
 800816c:	a94656b9 	.word	0xa94656b9

08008170 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	4a08      	ldr	r2, [pc, #32]	@ (80081a0 <hci_init+0x30>)
 8008180:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8008182:	4a08      	ldr	r2, [pc, #32]	@ (80081a4 <hci_init+0x34>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8008188:	4806      	ldr	r0, [pc, #24]	@ (80081a4 <hci_init+0x34>)
 800818a:	f000 f979 	bl	8008480 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 f8da 	bl	800834c <TlInit>

  return;
 8008198:	bf00      	nop
}
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	2000034c 	.word	0x2000034c
 80081a4:	20000324 	.word	0x20000324

080081a8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80081ae:	4822      	ldr	r0, [pc, #136]	@ (8008238 <hci_user_evt_proc+0x90>)
 80081b0:	f000 fd32 	bl	8008c18 <LST_is_empty>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d12b      	bne.n	8008212 <hci_user_evt_proc+0x6a>
 80081ba:	4b20      	ldr	r3, [pc, #128]	@ (800823c <hci_user_evt_proc+0x94>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d027      	beq.n	8008212 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80081c2:	f107 030c 	add.w	r3, r7, #12
 80081c6:	4619      	mov	r1, r3
 80081c8:	481b      	ldr	r0, [pc, #108]	@ (8008238 <hci_user_evt_proc+0x90>)
 80081ca:	f000 fdb4 	bl	8008d36 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80081ce:	4b1c      	ldr	r3, [pc, #112]	@ (8008240 <hci_user_evt_proc+0x98>)
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00c      	beq.n	80081f0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80081da:	2301      	movs	r3, #1
 80081dc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80081de:	4b18      	ldr	r3, [pc, #96]	@ (8008240 <hci_user_evt_proc+0x98>)
 80081e0:	69db      	ldr	r3, [r3, #28]
 80081e2:	1d3a      	adds	r2, r7, #4
 80081e4:	4610      	mov	r0, r2
 80081e6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80081e8:	793a      	ldrb	r2, [r7, #4]
 80081ea:	4b14      	ldr	r3, [pc, #80]	@ (800823c <hci_user_evt_proc+0x94>)
 80081ec:	701a      	strb	r2, [r3, #0]
 80081ee:	e002      	b.n	80081f6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80081f0:	4b12      	ldr	r3, [pc, #72]	@ (800823c <hci_user_evt_proc+0x94>)
 80081f2:	2201      	movs	r2, #1
 80081f4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80081f6:	4b11      	ldr	r3, [pc, #68]	@ (800823c <hci_user_evt_proc+0x94>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d004      	beq.n	8008208 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fc0d 	bl	8008a20 <TL_MM_EvtDone>
 8008206:	e004      	b.n	8008212 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4619      	mov	r1, r3
 800820c:	480a      	ldr	r0, [pc, #40]	@ (8008238 <hci_user_evt_proc+0x90>)
 800820e:	f000 fd25 	bl	8008c5c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008212:	4809      	ldr	r0, [pc, #36]	@ (8008238 <hci_user_evt_proc+0x90>)
 8008214:	f000 fd00 	bl	8008c18 <LST_is_empty>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d107      	bne.n	800822e <hci_user_evt_proc+0x86>
 800821e:	4b07      	ldr	r3, [pc, #28]	@ (800823c <hci_user_evt_proc+0x94>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008226:	4804      	ldr	r0, [pc, #16]	@ (8008238 <hci_user_evt_proc+0x90>)
 8008228:	f001 f8b5 	bl	8009396 <hci_notify_asynch_evt>
  }


  return;
 800822c:	bf00      	nop
 800822e:	bf00      	nop
}
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	2000007c 	.word	0x2000007c
 800823c:	20000088 	.word	0x20000088
 8008240:	20000324 	.word	0x20000324

08008244 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	460b      	mov	r3, r1
 800824e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008250:	2000      	movs	r0, #0
 8008252:	f000 f8d1 	bl	80083f8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008256:	2300      	movs	r3, #0
 8008258:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	885b      	ldrh	r3, [r3, #2]
 800825e:	b21b      	sxth	r3, r3
 8008260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008264:	b21a      	sxth	r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	029b      	lsls	r3, r3, #10
 800826c:	b21b      	sxth	r3, r3
 800826e:	4313      	orrs	r3, r2
 8008270:	b21b      	sxth	r3, r3
 8008272:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8008274:	4b33      	ldr	r3, [pc, #204]	@ (8008344 <hci_send_req+0x100>)
 8008276:	2201      	movs	r2, #1
 8008278:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	b2d9      	uxtb	r1, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	8bbb      	ldrh	r3, [r7, #28]
 8008286:	4618      	mov	r0, r3
 8008288:	f000 f890 	bl	80083ac <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800828c:	e04e      	b.n	800832c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800828e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8008292:	f001 f897 	bl	80093c4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008296:	e043      	b.n	8008320 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8008298:	f107 030c 	add.w	r3, r7, #12
 800829c:	4619      	mov	r1, r3
 800829e:	482a      	ldr	r0, [pc, #168]	@ (8008348 <hci_send_req+0x104>)
 80082a0:	f000 fd49 	bl	8008d36 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	7a5b      	ldrb	r3, [r3, #9]
 80082a8:	2b0f      	cmp	r3, #15
 80082aa:	d114      	bne.n	80082d6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	330b      	adds	r3, #11
 80082b0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	885b      	ldrh	r3, [r3, #2]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	8bba      	ldrh	r2, [r7, #28]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d104      	bne.n	80082c8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	693a      	ldr	r2, [r7, #16]
 80082c4:	7812      	ldrb	r2, [r2, #0]
 80082c6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	785b      	ldrb	r3, [r3, #1]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d027      	beq.n	8008320 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80082d0:	2301      	movs	r3, #1
 80082d2:	77fb      	strb	r3, [r7, #31]
 80082d4:	e024      	b.n	8008320 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	330b      	adds	r3, #11
 80082da:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	8bba      	ldrh	r2, [r7, #28]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d114      	bne.n	8008314 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	7a9b      	ldrb	r3, [r3, #10]
 80082ee:	3b03      	subs	r3, #3
 80082f0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	695a      	ldr	r2, [r3, #20]
 80082f6:	7dfb      	ldrb	r3, [r7, #23]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	bfa8      	it	ge
 80082fc:	461a      	movge	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6918      	ldr	r0, [r3, #16]
 8008306:	69bb      	ldr	r3, [r7, #24]
 8008308:	1cd9      	adds	r1, r3, #3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	461a      	mov	r2, r3
 8008310:	f001 fe0c 	bl	8009f2c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800831c:	2301      	movs	r3, #1
 800831e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8008320:	4809      	ldr	r0, [pc, #36]	@ (8008348 <hci_send_req+0x104>)
 8008322:	f000 fc79 	bl	8008c18 <LST_is_empty>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0b5      	beq.n	8008298 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800832c:	7ffb      	ldrb	r3, [r7, #31]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0ad      	beq.n	800828e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8008332:	2001      	movs	r0, #1
 8008334:	f000 f860 	bl	80083f8 <NotifyCmdStatus>

  return 0;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3720      	adds	r7, #32
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	20000350 	.word	0x20000350
 8008348:	20000344 	.word	0x20000344

0800834c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008354:	480f      	ldr	r0, [pc, #60]	@ (8008394 <TlInit+0x48>)
 8008356:	f000 fc4f 	bl	8008bf8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800835a:	4a0f      	ldr	r2, [pc, #60]	@ (8008398 <TlInit+0x4c>)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008360:	480e      	ldr	r0, [pc, #56]	@ (800839c <TlInit+0x50>)
 8008362:	f000 fc49 	bl	8008bf8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008366:	4b0e      	ldr	r3, [pc, #56]	@ (80083a0 <TlInit+0x54>)
 8008368:	2201      	movs	r2, #1
 800836a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800836c:	4b0d      	ldr	r3, [pc, #52]	@ (80083a4 <TlInit+0x58>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00a      	beq.n	800838a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8008378:	4b0b      	ldr	r3, [pc, #44]	@ (80083a8 <TlInit+0x5c>)
 800837a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800837c:	4b09      	ldr	r3, [pc, #36]	@ (80083a4 <TlInit+0x58>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f107 0208 	add.w	r2, r7, #8
 8008384:	4610      	mov	r0, r2
 8008386:	4798      	blx	r3
  }

  return;
 8008388:	bf00      	nop
 800838a:	bf00      	nop
}
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20000344 	.word	0x20000344
 8008398:	20000084 	.word	0x20000084
 800839c:	2000007c 	.word	0x2000007c
 80083a0:	20000088 	.word	0x20000088
 80083a4:	20000324 	.word	0x20000324
 80083a8:	08008439 	.word	0x08008439

080083ac <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	603a      	str	r2, [r7, #0]
 80083b6:	80fb      	strh	r3, [r7, #6]
 80083b8:	460b      	mov	r3, r1
 80083ba:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80083bc:	4b0c      	ldr	r3, [pc, #48]	@ (80083f0 <SendCmd+0x44>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	88fa      	ldrh	r2, [r7, #6]
 80083c2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80083c6:	4b0a      	ldr	r3, [pc, #40]	@ (80083f0 <SendCmd+0x44>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	797a      	ldrb	r2, [r7, #5]
 80083cc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80083ce:	4b08      	ldr	r3, [pc, #32]	@ (80083f0 <SendCmd+0x44>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	330c      	adds	r3, #12
 80083d4:	797a      	ldrb	r2, [r7, #5]
 80083d6:	6839      	ldr	r1, [r7, #0]
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 fda7 	bl	8009f2c <memcpy>

  hciContext.io.Send(0,0);
 80083de:	4b05      	ldr	r3, [pc, #20]	@ (80083f4 <SendCmd+0x48>)
 80083e0:	691b      	ldr	r3, [r3, #16]
 80083e2:	2100      	movs	r1, #0
 80083e4:	2000      	movs	r0, #0
 80083e6:	4798      	blx	r3

  return;
 80083e8:	bf00      	nop
}
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20000084 	.word	0x20000084
 80083f4:	20000324 	.word	0x20000324

080083f8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008402:	79fb      	ldrb	r3, [r7, #7]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d108      	bne.n	800841a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008408:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <NotifyCmdStatus+0x3c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00d      	beq.n	800842c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008410:	4b08      	ldr	r3, [pc, #32]	@ (8008434 <NotifyCmdStatus+0x3c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2000      	movs	r0, #0
 8008416:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008418:	e008      	b.n	800842c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800841a:	4b06      	ldr	r3, [pc, #24]	@ (8008434 <NotifyCmdStatus+0x3c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d004      	beq.n	800842c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008422:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <NotifyCmdStatus+0x3c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2001      	movs	r0, #1
 8008428:	4798      	blx	r3
  return;
 800842a:	bf00      	nop
 800842c:	bf00      	nop
}
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}
 8008434:	2000034c 	.word	0x2000034c

08008438 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	7a5b      	ldrb	r3, [r3, #9]
 8008444:	2b0f      	cmp	r3, #15
 8008446:	d003      	beq.n	8008450 <TlEvtReceived+0x18>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	7a5b      	ldrb	r3, [r3, #9]
 800844c:	2b0e      	cmp	r3, #14
 800844e:	d107      	bne.n	8008460 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008450:	6879      	ldr	r1, [r7, #4]
 8008452:	4809      	ldr	r0, [pc, #36]	@ (8008478 <TlEvtReceived+0x40>)
 8008454:	f000 fc28 	bl	8008ca8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008458:	2000      	movs	r0, #0
 800845a:	f000 ffa8 	bl	80093ae <hci_cmd_resp_release>
 800845e:	e006      	b.n	800846e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008460:	6879      	ldr	r1, [r7, #4]
 8008462:	4806      	ldr	r0, [pc, #24]	@ (800847c <TlEvtReceived+0x44>)
 8008464:	f000 fc20 	bl	8008ca8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008468:	4804      	ldr	r0, [pc, #16]	@ (800847c <TlEvtReceived+0x44>)
 800846a:	f000 ff94 	bl	8009396 <hci_notify_asynch_evt>
  }

  return;
 800846e:	bf00      	nop
}
 8008470:	3708      	adds	r7, #8
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000344 	.word	0x20000344
 800847c:	2000007c 	.word	0x2000007c

08008480 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a05      	ldr	r2, [pc, #20]	@ (80084a0 <hci_register_io_bus+0x20>)
 800848c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a04      	ldr	r2, [pc, #16]	@ (80084a4 <hci_register_io_bus+0x24>)
 8008492:	611a      	str	r2, [r3, #16]

  return;
 8008494:	bf00      	nop
}
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	08008799 	.word	0x08008799
 80084a4:	08008801 	.word	0x08008801

080084a8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	4a08      	ldr	r2, [pc, #32]	@ (80084d8 <shci_init+0x30>)
 80084b8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80084ba:	4a08      	ldr	r2, [pc, #32]	@ (80084dc <shci_init+0x34>)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80084c0:	4806      	ldr	r0, [pc, #24]	@ (80084dc <shci_init+0x34>)
 80084c2:	f000 f915 	bl	80086f0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 f898 	bl	8008600 <TlInit>

  return;
 80084d0:	bf00      	nop
}
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}
 80084d8:	20000374 	.word	0x20000374
 80084dc:	20000354 	.word	0x20000354

080084e0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80084e6:	4822      	ldr	r0, [pc, #136]	@ (8008570 <shci_user_evt_proc+0x90>)
 80084e8:	f000 fb96 	bl	8008c18 <LST_is_empty>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d12b      	bne.n	800854a <shci_user_evt_proc+0x6a>
 80084f2:	4b20      	ldr	r3, [pc, #128]	@ (8008574 <shci_user_evt_proc+0x94>)
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d027      	beq.n	800854a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80084fa:	f107 030c 	add.w	r3, r7, #12
 80084fe:	4619      	mov	r1, r3
 8008500:	481b      	ldr	r0, [pc, #108]	@ (8008570 <shci_user_evt_proc+0x90>)
 8008502:	f000 fc18 	bl	8008d36 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008506:	4b1c      	ldr	r3, [pc, #112]	@ (8008578 <shci_user_evt_proc+0x98>)
 8008508:	69db      	ldr	r3, [r3, #28]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00c      	beq.n	8008528 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008512:	2301      	movs	r3, #1
 8008514:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008516:	4b18      	ldr	r3, [pc, #96]	@ (8008578 <shci_user_evt_proc+0x98>)
 8008518:	69db      	ldr	r3, [r3, #28]
 800851a:	1d3a      	adds	r2, r7, #4
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008520:	793a      	ldrb	r2, [r7, #4]
 8008522:	4b14      	ldr	r3, [pc, #80]	@ (8008574 <shci_user_evt_proc+0x94>)
 8008524:	701a      	strb	r2, [r3, #0]
 8008526:	e002      	b.n	800852e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008528:	4b12      	ldr	r3, [pc, #72]	@ (8008574 <shci_user_evt_proc+0x94>)
 800852a:	2201      	movs	r2, #1
 800852c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800852e:	4b11      	ldr	r3, [pc, #68]	@ (8008574 <shci_user_evt_proc+0x94>)
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d004      	beq.n	8008540 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 fa71 	bl	8008a20 <TL_MM_EvtDone>
 800853e:	e004      	b.n	800854a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	4619      	mov	r1, r3
 8008544:	480a      	ldr	r0, [pc, #40]	@ (8008570 <shci_user_evt_proc+0x90>)
 8008546:	f000 fb89 	bl	8008c5c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800854a:	4809      	ldr	r0, [pc, #36]	@ (8008570 <shci_user_evt_proc+0x90>)
 800854c:	f000 fb64 	bl	8008c18 <LST_is_empty>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d107      	bne.n	8008566 <shci_user_evt_proc+0x86>
 8008556:	4b07      	ldr	r3, [pc, #28]	@ (8008574 <shci_user_evt_proc+0x94>)
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800855e:	4804      	ldr	r0, [pc, #16]	@ (8008570 <shci_user_evt_proc+0x90>)
 8008560:	f7f8 f87b 	bl	800065a <shci_notify_asynch_evt>
  }


  return;
 8008564:	bf00      	nop
 8008566:	bf00      	nop
}
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}
 800856e:	bf00      	nop
 8008570:	2000008c 	.word	0x2000008c
 8008574:	2000009c 	.word	0x2000009c
 8008578:	20000354 	.word	0x20000354

0800857c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	60ba      	str	r2, [r7, #8]
 8008584:	607b      	str	r3, [r7, #4]
 8008586:	4603      	mov	r3, r0
 8008588:	81fb      	strh	r3, [r7, #14]
 800858a:	460b      	mov	r3, r1
 800858c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800858e:	2000      	movs	r0, #0
 8008590:	f000 f868 	bl	8008664 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008594:	4b17      	ldr	r3, [pc, #92]	@ (80085f4 <shci_send+0x78>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	89fa      	ldrh	r2, [r7, #14]
 800859a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800859e:	4b15      	ldr	r3, [pc, #84]	@ (80085f4 <shci_send+0x78>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	7b7a      	ldrb	r2, [r7, #13]
 80085a4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80085a6:	4b13      	ldr	r3, [pc, #76]	@ (80085f4 <shci_send+0x78>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	330c      	adds	r3, #12
 80085ac:	7b7a      	ldrb	r2, [r7, #13]
 80085ae:	68b9      	ldr	r1, [r7, #8]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f001 fcbb 	bl	8009f2c <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80085b6:	4b10      	ldr	r3, [pc, #64]	@ (80085f8 <shci_send+0x7c>)
 80085b8:	2201      	movs	r2, #1
 80085ba:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80085bc:	4b0f      	ldr	r3, [pc, #60]	@ (80085fc <shci_send+0x80>)
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2100      	movs	r1, #0
 80085c2:	2000      	movs	r0, #0
 80085c4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80085c6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80085ca:	f7f8 f85d 	bl	8000688 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f103 0008 	add.w	r0, r3, #8
 80085d4:	4b07      	ldr	r3, [pc, #28]	@ (80085f4 <shci_send+0x78>)
 80085d6:	6819      	ldr	r1, [r3, #0]
 80085d8:	4b06      	ldr	r3, [pc, #24]	@ (80085f4 <shci_send+0x78>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	789b      	ldrb	r3, [r3, #2]
 80085de:	3303      	adds	r3, #3
 80085e0:	461a      	mov	r2, r3
 80085e2:	f001 fca3 	bl	8009f2c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80085e6:	2001      	movs	r0, #1
 80085e8:	f000 f83c 	bl	8008664 <Cmd_SetStatus>

  return;
 80085ec:	bf00      	nop
}
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	20000098 	.word	0x20000098
 80085f8:	20000378 	.word	0x20000378
 80085fc:	20000354 	.word	0x20000354

08008600 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008608:	4a10      	ldr	r2, [pc, #64]	@ (800864c <TlInit+0x4c>)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800860e:	4810      	ldr	r0, [pc, #64]	@ (8008650 <TlInit+0x50>)
 8008610:	f000 faf2 	bl	8008bf8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008614:	2001      	movs	r0, #1
 8008616:	f000 f825 	bl	8008664 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800861a:	4b0e      	ldr	r3, [pc, #56]	@ (8008654 <TlInit+0x54>)
 800861c:	2201      	movs	r2, #1
 800861e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008620:	4b0d      	ldr	r3, [pc, #52]	@ (8008658 <TlInit+0x58>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00c      	beq.n	8008642 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800862c:	4b0b      	ldr	r3, [pc, #44]	@ (800865c <TlInit+0x5c>)
 800862e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008630:	4b0b      	ldr	r3, [pc, #44]	@ (8008660 <TlInit+0x60>)
 8008632:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008634:	4b08      	ldr	r3, [pc, #32]	@ (8008658 <TlInit+0x58>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f107 020c 	add.w	r2, r7, #12
 800863c:	4610      	mov	r0, r2
 800863e:	4798      	blx	r3
  }

  return;
 8008640:	bf00      	nop
 8008642:	bf00      	nop
}
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000098 	.word	0x20000098
 8008650:	2000008c 	.word	0x2000008c
 8008654:	2000009c 	.word	0x2000009c
 8008658:	20000354 	.word	0x20000354
 800865c:	080086b5 	.word	0x080086b5
 8008660:	080086cd 	.word	0x080086cd

08008664 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
 800866a:	4603      	mov	r3, r0
 800866c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800866e:	79fb      	ldrb	r3, [r7, #7]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d10b      	bne.n	800868c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008674:	4b0d      	ldr	r3, [pc, #52]	@ (80086ac <Cmd_SetStatus+0x48>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800867c:	4b0b      	ldr	r3, [pc, #44]	@ (80086ac <Cmd_SetStatus+0x48>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2000      	movs	r0, #0
 8008682:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008684:	4b0a      	ldr	r3, [pc, #40]	@ (80086b0 <Cmd_SetStatus+0x4c>)
 8008686:	2200      	movs	r2, #0
 8008688:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800868a:	e00b      	b.n	80086a4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800868c:	4b08      	ldr	r3, [pc, #32]	@ (80086b0 <Cmd_SetStatus+0x4c>)
 800868e:	2201      	movs	r2, #1
 8008690:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008692:	4b06      	ldr	r3, [pc, #24]	@ (80086ac <Cmd_SetStatus+0x48>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800869a:	4b04      	ldr	r3, [pc, #16]	@ (80086ac <Cmd_SetStatus+0x48>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2001      	movs	r0, #1
 80086a0:	4798      	blx	r3
  return;
 80086a2:	bf00      	nop
 80086a4:	bf00      	nop
}
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000374 	.word	0x20000374
 80086b0:	20000094 	.word	0x20000094

080086b4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80086bc:	2000      	movs	r0, #0
 80086be:	f7f7 ffd8 	bl	8000672 <shci_cmd_resp_release>

  return;
 80086c2:	bf00      	nop
}
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
	...

080086cc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4805      	ldr	r0, [pc, #20]	@ (80086ec <TlUserEvtReceived+0x20>)
 80086d8:	f000 fae6 	bl	8008ca8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80086dc:	4803      	ldr	r0, [pc, #12]	@ (80086ec <TlUserEvtReceived+0x20>)
 80086de:	f7f7 ffbc 	bl	800065a <shci_notify_asynch_evt>

  return;
 80086e2:	bf00      	nop
}
 80086e4:	3708      	adds	r7, #8
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}
 80086ea:	bf00      	nop
 80086ec:	2000008c 	.word	0x2000008c

080086f0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b083      	sub	sp, #12
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a05      	ldr	r2, [pc, #20]	@ (8008710 <shci_register_io_bus+0x20>)
 80086fc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a04      	ldr	r2, [pc, #16]	@ (8008714 <shci_register_io_bus+0x24>)
 8008702:	611a      	str	r2, [r3, #16]

  return;
 8008704:	bf00      	nop
}
 8008706:	370c      	adds	r7, #12
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr
 8008710:	080088ad 	.word	0x080088ad
 8008714:	08008901 	.word	0x08008901

08008718 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800871c:	f001 f850 	bl	80097c0 <HW_IPCC_Enable>

  return;
 8008720:	bf00      	nop
}
 8008722:	bd80      	pop	{r7, pc}

08008724 <TL_Init>:


void TL_Init( void )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008728:	4b10      	ldr	r3, [pc, #64]	@ (800876c <TL_Init+0x48>)
 800872a:	4a11      	ldr	r2, [pc, #68]	@ (8008770 <TL_Init+0x4c>)
 800872c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800872e:	4b0f      	ldr	r3, [pc, #60]	@ (800876c <TL_Init+0x48>)
 8008730:	4a10      	ldr	r2, [pc, #64]	@ (8008774 <TL_Init+0x50>)
 8008732:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008734:	4b0d      	ldr	r3, [pc, #52]	@ (800876c <TL_Init+0x48>)
 8008736:	4a10      	ldr	r2, [pc, #64]	@ (8008778 <TL_Init+0x54>)
 8008738:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800873a:	4b0c      	ldr	r3, [pc, #48]	@ (800876c <TL_Init+0x48>)
 800873c:	4a0f      	ldr	r2, [pc, #60]	@ (800877c <TL_Init+0x58>)
 800873e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8008740:	4b0a      	ldr	r3, [pc, #40]	@ (800876c <TL_Init+0x48>)
 8008742:	4a0f      	ldr	r2, [pc, #60]	@ (8008780 <TL_Init+0x5c>)
 8008744:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008746:	4b09      	ldr	r3, [pc, #36]	@ (800876c <TL_Init+0x48>)
 8008748:	4a0e      	ldr	r2, [pc, #56]	@ (8008784 <TL_Init+0x60>)
 800874a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800874c:	4b07      	ldr	r3, [pc, #28]	@ (800876c <TL_Init+0x48>)
 800874e:	4a0e      	ldr	r2, [pc, #56]	@ (8008788 <TL_Init+0x64>)
 8008750:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8008752:	4b06      	ldr	r3, [pc, #24]	@ (800876c <TL_Init+0x48>)
 8008754:	4a0d      	ldr	r2, [pc, #52]	@ (800878c <TL_Init+0x68>)
 8008756:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008758:	4b04      	ldr	r3, [pc, #16]	@ (800876c <TL_Init+0x48>)
 800875a:	4a0d      	ldr	r2, [pc, #52]	@ (8008790 <TL_Init+0x6c>)
 800875c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800875e:	4b03      	ldr	r3, [pc, #12]	@ (800876c <TL_Init+0x48>)
 8008760:	4a0c      	ldr	r2, [pc, #48]	@ (8008794 <TL_Init+0x70>)
 8008762:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008764:	f001 f840 	bl	80097e8 <HW_IPCC_Init>

  return;
 8008768:	bf00      	nop
}
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20030000 	.word	0x20030000
 8008770:	20030028 	.word	0x20030028
 8008774:	20030048 	.word	0x20030048
 8008778:	20030058 	.word	0x20030058
 800877c:	20030068 	.word	0x20030068
 8008780:	20030070 	.word	0x20030070
 8008784:	20030078 	.word	0x20030078
 8008788:	20030080 	.word	0x20030080
 800878c:	2003009c 	.word	0x2003009c
 8008790:	200300a0 	.word	0x200300a0
 8008794:	200300ac 	.word	0x200300ac

08008798 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80087a4:	4811      	ldr	r0, [pc, #68]	@ (80087ec <TL_BLE_Init+0x54>)
 80087a6:	f000 fa27 	bl	8008bf8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80087aa:	4b11      	ldr	r3, [pc, #68]	@ (80087f0 <TL_BLE_Init+0x58>)
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	4a0c      	ldr	r2, [pc, #48]	@ (80087f4 <TL_BLE_Init+0x5c>)
 80087c4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80087c6:	68bb      	ldr	r3, [r7, #8]
 80087c8:	4a08      	ldr	r2, [pc, #32]	@ (80087ec <TL_BLE_Init+0x54>)
 80087ca:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80087cc:	f001 f822 	bl	8009814 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a08      	ldr	r2, [pc, #32]	@ (80087f8 <TL_BLE_Init+0x60>)
 80087d6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	4a07      	ldr	r2, [pc, #28]	@ (80087fc <TL_BLE_Init+0x64>)
 80087de:	6013      	str	r3, [r2, #0]

  return 0;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	200300c8 	.word	0x200300c8
 80087f0:	20030000 	.word	0x20030000
 80087f4:	20030a58 	.word	0x20030a58
 80087f8:	20000384 	.word	0x20000384
 80087fc:	20000388 	.word	0x20000388

08008800 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b082      	sub	sp, #8
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800880c:	4b09      	ldr	r3, [pc, #36]	@ (8008834 <TL_BLE_SendCmd+0x34>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2201      	movs	r2, #1
 8008814:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008816:	4b07      	ldr	r3, [pc, #28]	@ (8008834 <TL_BLE_SendCmd+0x34>)
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4619      	mov	r1, r3
 800881e:	2001      	movs	r0, #1
 8008820:	f000 f96c 	bl	8008afc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008824:	f001 f800 	bl	8009828 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20030000 	.word	0x20030000

08008838 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b082      	sub	sp, #8
 800883c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800883e:	e01c      	b.n	800887a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8008840:	1d3b      	adds	r3, r7, #4
 8008842:	4619      	mov	r1, r3
 8008844:	4812      	ldr	r0, [pc, #72]	@ (8008890 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008846:	f000 fa76 	bl	8008d36 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	7a5b      	ldrb	r3, [r3, #9]
 800884e:	2b0f      	cmp	r3, #15
 8008850:	d003      	beq.n	800885a <HW_IPCC_BLE_RxEvtNot+0x22>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	7a5b      	ldrb	r3, [r3, #9]
 8008856:	2b0e      	cmp	r3, #14
 8008858:	d105      	bne.n	8008866 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4619      	mov	r1, r3
 800885e:	2002      	movs	r0, #2
 8008860:	f000 f94c 	bl	8008afc <OutputDbgTrace>
 8008864:	e004      	b.n	8008870 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4619      	mov	r1, r3
 800886a:	2003      	movs	r0, #3
 800886c:	f000 f946 	bl	8008afc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8008870:	4b08      	ldr	r3, [pc, #32]	@ (8008894 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	4610      	mov	r0, r2
 8008878:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800887a:	4805      	ldr	r0, [pc, #20]	@ (8008890 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800887c:	f000 f9cc 	bl	8008c18 <LST_is_empty>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d0dc      	beq.n	8008840 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008886:	bf00      	nop
}
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	200300c8 	.word	0x200300c8
 8008894:	20000384 	.word	0x20000384

08008898 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800889c:	4b02      	ldr	r3, [pc, #8]	@ (80088a8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4798      	blx	r3

  return;
 80088a2:	bf00      	nop
}
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000388 	.word	0x20000388

080088ac <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80088b8:	480d      	ldr	r0, [pc, #52]	@ (80088f0 <TL_SYS_Init+0x44>)
 80088ba:	f000 f99d 	bl	8008bf8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80088be:	4b0d      	ldr	r3, [pc, #52]	@ (80088f4 <TL_SYS_Init+0x48>)
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4a08      	ldr	r2, [pc, #32]	@ (80088f0 <TL_SYS_Init+0x44>)
 80088d0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80088d2:	f000 ffcb 	bl	800986c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a07      	ldr	r2, [pc, #28]	@ (80088f8 <TL_SYS_Init+0x4c>)
 80088dc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4a06      	ldr	r2, [pc, #24]	@ (80088fc <TL_SYS_Init+0x50>)
 80088e4:	6013      	str	r3, [r2, #0]

  return 0;
 80088e6:	2300      	movs	r3, #0
}
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	200300d0 	.word	0x200300d0
 80088f4:	20030000 	.word	0x20030000
 80088f8:	2000038c 	.word	0x2000038c
 80088fc:	20000390 	.word	0x20000390

08008900 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	460b      	mov	r3, r1
 800890a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800890c:	4b09      	ldr	r3, [pc, #36]	@ (8008934 <TL_SYS_SendCmd+0x34>)
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2210      	movs	r2, #16
 8008914:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008916:	4b07      	ldr	r3, [pc, #28]	@ (8008934 <TL_SYS_SendCmd+0x34>)
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4619      	mov	r1, r3
 800891e:	2004      	movs	r0, #4
 8008920:	f000 f8ec 	bl	8008afc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008924:	f000 ffac 	bl	8009880 <HW_IPCC_SYS_SendCmd>

  return 0;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20030000 	.word	0x20030000

08008938 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800893c:	4b07      	ldr	r3, [pc, #28]	@ (800895c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4619      	mov	r1, r3
 8008944:	2005      	movs	r0, #5
 8008946:	f000 f8d9 	bl	8008afc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800894a:	4b05      	ldr	r3, [pc, #20]	@ (8008960 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4a03      	ldr	r2, [pc, #12]	@ (800895c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8008950:	68d2      	ldr	r2, [r2, #12]
 8008952:	6812      	ldr	r2, [r2, #0]
 8008954:	4610      	mov	r0, r2
 8008956:	4798      	blx	r3

  return;
 8008958:	bf00      	nop
}
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20030000 	.word	0x20030000
 8008960:	2000038c 	.word	0x2000038c

08008964 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800896a:	e00e      	b.n	800898a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800896c:	1d3b      	adds	r3, r7, #4
 800896e:	4619      	mov	r1, r3
 8008970:	480b      	ldr	r0, [pc, #44]	@ (80089a0 <HW_IPCC_SYS_EvtNot+0x3c>)
 8008972:	f000 f9e0 	bl	8008d36 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4619      	mov	r1, r3
 800897a:	2006      	movs	r0, #6
 800897c:	f000 f8be 	bl	8008afc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8008980:	4b08      	ldr	r3, [pc, #32]	@ (80089a4 <HW_IPCC_SYS_EvtNot+0x40>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	4610      	mov	r0, r2
 8008988:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800898a:	4805      	ldr	r0, [pc, #20]	@ (80089a0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800898c:	f000 f944 	bl	8008c18 <LST_is_empty>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d0ea      	beq.n	800896c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8008996:	bf00      	nop
}
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	200300d0 	.word	0x200300d0
 80089a4:	20000390 	.word	0x20000390

080089a8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80089b0:	4817      	ldr	r0, [pc, #92]	@ (8008a10 <TL_MM_Init+0x68>)
 80089b2:	f000 f921 	bl	8008bf8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80089b6:	4817      	ldr	r0, [pc, #92]	@ (8008a14 <TL_MM_Init+0x6c>)
 80089b8:	f000 f91e 	bl	8008bf8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80089bc:	4b16      	ldr	r3, [pc, #88]	@ (8008a18 <TL_MM_Init+0x70>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	4a16      	ldr	r2, [pc, #88]	@ (8008a1c <TL_MM_Init+0x74>)
 80089c2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80089c4:	4b15      	ldr	r3, [pc, #84]	@ (8008a1c <TL_MM_Init+0x74>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	6892      	ldr	r2, [r2, #8]
 80089cc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80089ce:	4b13      	ldr	r3, [pc, #76]	@ (8008a1c <TL_MM_Init+0x74>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	68d2      	ldr	r2, [r2, #12]
 80089d6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80089d8:	4b10      	ldr	r3, [pc, #64]	@ (8008a1c <TL_MM_Init+0x74>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a0c      	ldr	r2, [pc, #48]	@ (8008a10 <TL_MM_Init+0x68>)
 80089de:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80089e0:	4b0e      	ldr	r3, [pc, #56]	@ (8008a1c <TL_MM_Init+0x74>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80089ea:	4b0c      	ldr	r3, [pc, #48]	@ (8008a1c <TL_MM_Init+0x74>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6852      	ldr	r2, [r2, #4]
 80089f2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80089f4:	4b09      	ldr	r3, [pc, #36]	@ (8008a1c <TL_MM_Init+0x74>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	6912      	ldr	r2, [r2, #16]
 80089fc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80089fe:	4b07      	ldr	r3, [pc, #28]	@ (8008a1c <TL_MM_Init+0x74>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	6952      	ldr	r2, [r2, #20]
 8008a06:	619a      	str	r2, [r3, #24]

  return;
 8008a08:	bf00      	nop
}
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}
 8008a10:	200300b8 	.word	0x200300b8
 8008a14:	2000037c 	.word	0x2000037c
 8008a18:	20030000 	.word	0x20030000
 8008a1c:	20000394 	.word	0x20000394

08008a20 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008a28:	6879      	ldr	r1, [r7, #4]
 8008a2a:	4807      	ldr	r0, [pc, #28]	@ (8008a48 <TL_MM_EvtDone+0x28>)
 8008a2c:	f000 f93c 	bl	8008ca8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8008a30:	6879      	ldr	r1, [r7, #4]
 8008a32:	2000      	movs	r0, #0
 8008a34:	f000 f862 	bl	8008afc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008a38:	4804      	ldr	r0, [pc, #16]	@ (8008a4c <TL_MM_EvtDone+0x2c>)
 8008a3a:	f000 ff47 	bl	80098cc <HW_IPCC_MM_SendFreeBuf>

  return;
 8008a3e:	bf00      	nop
}
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	2000037c 	.word	0x2000037c
 8008a4c:	08008a51 	.word	0x08008a51

08008a50 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008a56:	e00c      	b.n	8008a72 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008a58:	1d3b      	adds	r3, r7, #4
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	480a      	ldr	r0, [pc, #40]	@ (8008a88 <SendFreeBuf+0x38>)
 8008a5e:	f000 f96a 	bl	8008d36 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8008a62:	4b0a      	ldr	r3, [pc, #40]	@ (8008a8c <SendFreeBuf+0x3c>)
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	691b      	ldr	r3, [r3, #16]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 f91b 	bl	8008ca8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008a72:	4805      	ldr	r0, [pc, #20]	@ (8008a88 <SendFreeBuf+0x38>)
 8008a74:	f000 f8d0 	bl	8008c18 <LST_is_empty>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d0ec      	beq.n	8008a58 <SendFreeBuf+0x8>
  }

  return;
 8008a7e:	bf00      	nop
}
 8008a80:	3708      	adds	r7, #8
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	2000037c 	.word	0x2000037c
 8008a8c:	20030000 	.word	0x20030000

08008a90 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8008a94:	4805      	ldr	r0, [pc, #20]	@ (8008aac <TL_TRACES_Init+0x1c>)
 8008a96:	f000 f8af 	bl	8008bf8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8008a9a:	4b05      	ldr	r3, [pc, #20]	@ (8008ab0 <TL_TRACES_Init+0x20>)
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	4a03      	ldr	r2, [pc, #12]	@ (8008aac <TL_TRACES_Init+0x1c>)
 8008aa0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8008aa2:	f000 ff49 	bl	8009938 <HW_IPCC_TRACES_Init>

  return;
 8008aa6:	bf00      	nop
}
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	200300c0 	.word	0x200300c0
 8008ab0:	20030000 	.word	0x20030000

08008ab4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008aba:	e008      	b.n	8008ace <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8008abc:	1d3b      	adds	r3, r7, #4
 8008abe:	4619      	mov	r1, r3
 8008ac0:	4808      	ldr	r0, [pc, #32]	@ (8008ae4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008ac2:	f000 f938 	bl	8008d36 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 f80d 	bl	8008ae8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8008ace:	4805      	ldr	r0, [pc, #20]	@ (8008ae4 <HW_IPCC_TRACES_EvtNot+0x30>)
 8008ad0:	f000 f8a2 	bl	8008c18 <LST_is_empty>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d0f0      	beq.n	8008abc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8008ada:	bf00      	nop
}
 8008adc:	3708      	adds	r7, #8
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
 8008ae2:	bf00      	nop
 8008ae4:	200300c0 	.word	0x200300c0

08008ae8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	6039      	str	r1, [r7, #0]
 8008b06:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008b08:	79fb      	ldrb	r3, [r7, #7]
 8008b0a:	2b06      	cmp	r3, #6
 8008b0c:	d845      	bhi.n	8008b9a <OutputDbgTrace+0x9e>
 8008b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b14 <OutputDbgTrace+0x18>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b31 	.word	0x08008b31
 8008b18:	08008b55 	.word	0x08008b55
 8008b1c:	08008b5b 	.word	0x08008b5b
 8008b20:	08008b6f 	.word	0x08008b6f
 8008b24:	08008b7b 	.word	0x08008b7b
 8008b28:	08008b81 	.word	0x08008b81
 8008b2c:	08008b8f 	.word	0x08008b8f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	7a5b      	ldrb	r3, [r3, #9]
 8008b38:	2bff      	cmp	r3, #255	@ 0xff
 8008b3a:	d005      	beq.n	8008b48 <OutputDbgTrace+0x4c>
 8008b3c:	2bff      	cmp	r3, #255	@ 0xff
 8008b3e:	dc05      	bgt.n	8008b4c <OutputDbgTrace+0x50>
 8008b40:	2b0e      	cmp	r3, #14
 8008b42:	d005      	beq.n	8008b50 <OutputDbgTrace+0x54>
 8008b44:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008b46:	e001      	b.n	8008b4c <OutputDbgTrace+0x50>
          break;
 8008b48:	bf00      	nop
 8008b4a:	e027      	b.n	8008b9c <OutputDbgTrace+0xa0>
          break;
 8008b4c:	bf00      	nop
 8008b4e:	e025      	b.n	8008b9c <OutputDbgTrace+0xa0>
          break;
 8008b50:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8008b52:	e023      	b.n	8008b9c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008b58:	e020      	b.n	8008b9c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	7a5b      	ldrb	r3, [r3, #9]
 8008b62:	2b0e      	cmp	r3, #14
 8008b64:	d001      	beq.n	8008b6a <OutputDbgTrace+0x6e>
 8008b66:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008b68:	e000      	b.n	8008b6c <OutputDbgTrace+0x70>
          break;
 8008b6a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008b6c:	e016      	b.n	8008b9c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	7a5b      	ldrb	r3, [r3, #9]
 8008b76:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008b78:	e010      	b.n	8008b9c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008b7e:	e00d      	b.n	8008b9c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	7a5b      	ldrb	r3, [r3, #9]
 8008b88:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008b8a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008b8c:	e006      	b.n	8008b9c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	7a5b      	ldrb	r3, [r3, #9]
 8008b96:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008b98:	e000      	b.n	8008b9c <OutputDbgTrace+0xa0>

    default:
      break;
 8008b9a:	bf00      	nop
  }

  return;
 8008b9c:	bf00      	nop
}
 8008b9e:	3714      	adds	r7, #20
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008bf0 <OTP_Read+0x48>)
 8008bb4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008bb6:	e002      	b.n	8008bbe <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3b08      	subs	r3, #8
 8008bbc:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	3307      	adds	r3, #7
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	79fa      	ldrb	r2, [r7, #7]
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d003      	beq.n	8008bd2 <OTP_Read+0x2a>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4a09      	ldr	r2, [pc, #36]	@ (8008bf4 <OTP_Read+0x4c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d1f2      	bne.n	8008bb8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	3307      	adds	r3, #7
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	79fa      	ldrb	r2, [r7, #7]
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d001      	beq.n	8008be2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008be2:	68fb      	ldr	r3, [r7, #12]
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	1fff73f8 	.word	0x1fff73f8
 8008bf4:	1fff7000 	.word	0x1fff7000

08008bf8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	605a      	str	r2, [r3, #4]
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b087      	sub	sp, #28
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c20:	f3ef 8310 	mrs	r3, PRIMASK
 8008c24:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c26:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c2a:	b672      	cpsid	i
}
 8008c2c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d102      	bne.n	8008c3e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	75fb      	strb	r3, [r7, #23]
 8008c3c:	e001      	b.n	8008c42 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	75fb      	strb	r3, [r7, #23]
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	f383 8810 	msr	PRIMASK, r3
}
 8008c4c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	371c      	adds	r7, #28
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c66:	f3ef 8310 	mrs	r3, PRIMASK
 8008c6a:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008c6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008c70:	b672      	cpsid	i
}
 8008c72:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	683a      	ldr	r2, [r7, #0]
 8008c86:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	605a      	str	r2, [r3, #4]
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	f383 8810 	msr	PRIMASK, r3
}
 8008c9a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008c9c:	bf00      	nop
 8008c9e:	371c      	adds	r7, #28
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b087      	sub	sp, #28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8008cb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008cbc:	b672      	cpsid	i
}
 8008cbe:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	683a      	ldr	r2, [r7, #0]
 8008cd2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	f383 8810 	msr	PRIMASK, r3
}
 8008ce6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008ce8:	bf00      	nop
 8008cea:	371c      	adds	r7, #28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8008d00:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d02:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d06:	b672      	cpsid	i
}
 8008d08:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	6852      	ldr	r2, [r2, #4]
 8008d1c:	605a      	str	r2, [r3, #4]
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	f383 8810 	msr	PRIMASK, r3
}
 8008d28:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008d2a:	bf00      	nop
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr

08008d36 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b086      	sub	sp, #24
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d40:	f3ef 8310 	mrs	r3, PRIMASK
 8008d44:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d46:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008d48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008d4a:	b672      	cpsid	i
}
 8008d4c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f7ff ffca 	bl	8008cf4 <LST_remove_node>
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f383 8810 	msr	PRIMASK, r3
}
 8008d6a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008d6c:	bf00      	nop
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008d74:	b480      	push	{r7}
 8008d76:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008d78:	4b03      	ldr	r3, [pc, #12]	@ (8008d88 <LL_FLASH_GetUDN+0x14>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
 8008d86:	bf00      	nop
 8008d88:	1fff7580 	.word	0x1fff7580

08008d8c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008d90:	4b03      	ldr	r3, [pc, #12]	@ (8008da0 <LL_FLASH_GetDeviceID+0x14>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	b2db      	uxtb	r3, r3
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	1fff7584 	.word	0x1fff7584

08008da4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008da4:	b480      	push	{r7}
 8008da6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8008da8:	4b03      	ldr	r3, [pc, #12]	@ (8008db8 <LL_FLASH_GetSTCompanyID+0x14>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	0a1b      	lsrs	r3, r3, #8
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	1fff7584 	.word	0x1fff7584

08008dbc <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8008dbc:	b5b0      	push	{r4, r5, r7, lr}
 8008dbe:	b090      	sub	sp, #64	@ 0x40
 8008dc0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008dc2:	2392      	movs	r3, #146	@ 0x92
 8008dc4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008dc8:	4b31      	ldr	r3, [pc, #196]	@ (8008e90 <APP_BLE_Init+0xd4>)
 8008dca:	1d3c      	adds	r4, r7, #4
 8008dcc:	461d      	mov	r5, r3
 8008dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008dde:	c403      	stmia	r4!, {r0, r1}
 8008de0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8008de2:	f000 f923 	bl	800902c <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8008de6:	2101      	movs	r1, #1
 8008de8:	2002      	movs	r0, #2
 8008dea:	f000 fdcd 	bl	8009988 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008dee:	4a29      	ldr	r2, [pc, #164]	@ (8008e94 <APP_BLE_Init+0xd8>)
 8008df0:	2100      	movs	r1, #0
 8008df2:	2002      	movs	r0, #2
 8008df4:	f000 ff2a 	bl	8009c4c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008df8:	1d3b      	adds	r3, r7, #4
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff f898 	bl	8007f30 <SHCI_C2_BLE_Init>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8008e06:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8008e0e:	f7f8 fd69 	bl	80018e4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008e12:	f000 f921 	bl	8009058 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008e16:	f7fe ffe5 	bl	8007de4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8008e98 <APP_BLE_Init+0xdc>)
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008e22:	4b1d      	ldr	r3, [pc, #116]	@ (8008e98 <APP_BLE_Init+0xdc>)
 8008e24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008e28:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8008e9c <APP_BLE_Init+0xe0>)
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	2001      	movs	r0, #1
 8008e30:	f000 ff0c 	bl	8009c4c <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008e34:	2006      	movs	r0, #6
 8008e36:	f7fe fcc5 	bl	80077c4 <aci_hal_set_radio_activity_mask>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8008e40:	f000 fb40 	bl	80094c4 <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  SHCI_C2_ExtpaConfig((uint32_t)RFPA_CSD_GPIO_Port, RFPA_CSD_Pin, EXT_PA_ENABLED_HIGH, EXT_PA_ENABLED);
 8008e44:	2301      	movs	r3, #1
 8008e46:	2201      	movs	r2, #1
 8008e48:	2102      	movs	r1, #2
 8008e4a:	4815      	ldr	r0, [pc, #84]	@ (8008ea0 <APP_BLE_Init+0xe4>)
 8008e4c:	f7ff f89e 	bl	8007f8c <SHCI_C2_ExtpaConfig>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8008e50:	4b14      	ldr	r3, [pc, #80]	@ (8008ea4 <APP_BLE_Init+0xe8>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	4914      	ldr	r1, [pc, #80]	@ (8008ea8 <APP_BLE_Init+0xec>)
 8008e56:	2000      	movs	r0, #0
 8008e58:	f7f8 f928 	bl	80010ac <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8008e5c:	4b13      	ldr	r3, [pc, #76]	@ (8008eac <APP_BLE_Init+0xf0>)
 8008e5e:	2200      	movs	r2, #0
 8008e60:	4913      	ldr	r1, [pc, #76]	@ (8008eb0 <APP_BLE_Init+0xf4>)
 8008e62:	2000      	movs	r0, #0
 8008e64:	f7f8 f922 	bl	80010ac <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008e68:	4b0b      	ldr	r3, [pc, #44]	@ (8008e98 <APP_BLE_Init+0xdc>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8008e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8008e98 <APP_BLE_Init+0xdc>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8008e74:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb4 <APP_BLE_Init+0xf8>)
 8008e76:	2280      	movs	r2, #128	@ 0x80
 8008e78:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb8 <APP_BLE_Init+0xfc>)
 8008e7c:	22a0      	movs	r2, #160	@ 0xa0
 8008e7e:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8008e80:	2001      	movs	r0, #1
 8008e82:	f000 f9bb 	bl	80091fc <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008e86:	bf00      	nop
}
 8008e88:	3740      	adds	r7, #64	@ 0x40
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	0800a02c 	.word	0x0800a02c
 8008e94:	080081a9 	.word	0x080081a9
 8008e98:	200003a0 	.word	0x200003a0
 8008e9c:	08009345 	.word	0x08009345
 8008ea0:	48000400 	.word	0x48000400
 8008ea4:	08009379 	.word	0x08009379
 8008ea8:	20000421 	.word	0x20000421
 8008eac:	08009389 	.word	0x08009389
 8008eb0:	20000422 	.word	0x20000422
 8008eb4:	20000424 	.word	0x20000424
 8008eb8:	20000426 	.word	0x20000426

08008ebc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b08a      	sub	sp, #40	@ 0x28
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8008ec4:	2392      	movs	r3, #146	@ 0x92
 8008ec6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8008ed0:	6a3b      	ldr	r3, [r7, #32]
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2bff      	cmp	r3, #255	@ 0xff
 8008ed6:	d076      	beq.n	8008fc6 <SVCCTL_App_Notification+0x10a>
 8008ed8:	2bff      	cmp	r3, #255	@ 0xff
 8008eda:	f300 809b 	bgt.w	8009014 <SVCCTL_App_Notification+0x158>
 8008ede:	2b05      	cmp	r3, #5
 8008ee0:	d002      	beq.n	8008ee8 <SVCCTL_App_Notification+0x2c>
 8008ee2:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ee4:	d020      	beq.n	8008f28 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8008ee6:	e095      	b.n	8009014 <SVCCTL_App_Notification+0x158>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	3302      	adds	r3, #2
 8008eec:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008ef4:	b29a      	uxth	r2, r3
 8008ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008ef8:	8adb      	ldrh	r3, [r3, #22]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d106      	bne.n	8008f0c <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8008efe:	4b49      	ldr	r3, [pc, #292]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008f04:	4b47      	ldr	r3, [pc, #284]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008f0c:	2001      	movs	r0, #1
 8008f0e:	f000 f975 	bl	80091fc <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8008f12:	4b45      	ldr	r3, [pc, #276]	@ (8009028 <SVCCTL_App_Notification+0x16c>)
 8008f14:	2201      	movs	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008f18:	4b42      	ldr	r3, [pc, #264]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008f1a:	8ada      	ldrh	r2, [r3, #22]
 8008f1c:	4b42      	ldr	r3, [pc, #264]	@ (8009028 <SVCCTL_App_Notification+0x16c>)
 8008f1e:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 8008f20:	4841      	ldr	r0, [pc, #260]	@ (8009028 <SVCCTL_App_Notification+0x16c>)
 8008f22:	f000 fab1 	bl	8009488 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008f26:	e078      	b.n	800901a <SVCCTL_App_Notification+0x15e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	3302      	adds	r3, #2
 8008f2c:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	2b0c      	cmp	r3, #12
 8008f34:	d005      	beq.n	8008f42 <SVCCTL_App_Notification+0x86>
 8008f36:	2b0c      	cmp	r3, #12
 8008f38:	dc41      	bgt.n	8008fbe <SVCCTL_App_Notification+0x102>
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d017      	beq.n	8008f6e <SVCCTL_App_Notification+0xb2>
 8008f3e:	2b03      	cmp	r3, #3
          break;
 8008f40:	e03d      	b.n	8008fbe <SVCCTL_App_Notification+0x102>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	3301      	adds	r3, #1
 8008f46:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8008f48:	4b36      	ldr	r3, [pc, #216]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008f4a:	8adb      	ldrh	r3, [r3, #22]
 8008f4c:	f107 020a 	add.w	r2, r7, #10
 8008f50:	f107 010b 	add.w	r1, r7, #11
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7fe fcad 	bl	80078b4 <hci_le_read_phy>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8008f60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d12c      	bne.n	8008fc2 <SVCCTL_App_Notification+0x106>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8008f68:	7afb      	ldrb	r3, [r7, #11]
 8008f6a:	2b02      	cmp	r3, #2
          break;
 8008f6c:	e029      	b.n	8008fc2 <SVCCTL_App_Notification+0x106>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	3301      	adds	r3, #1
 8008f72:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008f74:	4b2b      	ldr	r3, [pc, #172]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008f76:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7f8 f910 	bl	80011a0 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8008f80:	4b28      	ldr	r3, [pc, #160]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008f82:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008f86:	2b04      	cmp	r3, #4
 8008f88:	d104      	bne.n	8008f94 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008f8a:	4b26      	ldr	r3, [pc, #152]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008f8c:	2206      	movs	r2, #6
 8008f8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8008f92:	e003      	b.n	8008f9c <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008f94:	4b23      	ldr	r3, [pc, #140]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008f96:	2205      	movs	r2, #5
 8008f98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008fa2:	b29a      	uxth	r2, r3
 8008fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008fa6:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8008fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8009028 <SVCCTL_App_Notification+0x16c>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008fae:	4b1d      	ldr	r3, [pc, #116]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008fb0:	8ada      	ldrh	r2, [r3, #22]
 8008fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8009028 <SVCCTL_App_Notification+0x16c>)
 8008fb4:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8008fb6:	481c      	ldr	r0, [pc, #112]	@ (8009028 <SVCCTL_App_Notification+0x16c>)
 8008fb8:	f000 fa66 	bl	8009488 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8008fbc:	e002      	b.n	8008fc4 <SVCCTL_App_Notification+0x108>
          break;
 8008fbe:	bf00      	nop
 8008fc0:	e02b      	b.n	800901a <SVCCTL_App_Notification+0x15e>
          break;
 8008fc2:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8008fc4:	e029      	b.n	800901a <SVCCTL_App_Notification+0x15e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8008fc6:	6a3b      	ldr	r3, [r7, #32]
 8008fc8:	3302      	adds	r3, #2
 8008fca:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d010      	beq.n	8008ffc <SVCCTL_App_Notification+0x140>
 8008fda:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	dc1a      	bgt.n	8009018 <SVCCTL_App_Notification+0x15c>
 8008fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fe6:	d00f      	beq.n	8009008 <SVCCTL_App_Notification+0x14c>
 8008fe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008fec:	dc14      	bgt.n	8009018 <SVCCTL_App_Notification+0x15c>
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d00c      	beq.n	800900c <SVCCTL_App_Notification+0x150>
 8008ff2:	f240 4207 	movw	r2, #1031	@ 0x407
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00a      	beq.n	8009010 <SVCCTL_App_Notification+0x154>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008ffa:	e00d      	b.n	8009018 <SVCCTL_App_Notification+0x15c>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8008ffc:	4b09      	ldr	r3, [pc, #36]	@ (8009024 <SVCCTL_App_Notification+0x168>)
 8008ffe:	8adb      	ldrh	r3, [r3, #22]
 8009000:	4618      	mov	r0, r3
 8009002:	f7fe fa9e 	bl	8007542 <aci_gatt_confirm_indication>
        break;
 8009006:	e004      	b.n	8009012 <SVCCTL_App_Notification+0x156>
          break;
 8009008:	bf00      	nop
 800900a:	e005      	b.n	8009018 <SVCCTL_App_Notification+0x15c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800900c:	bf00      	nop
 800900e:	e003      	b.n	8009018 <SVCCTL_App_Notification+0x15c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8009010:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009012:	e001      	b.n	8009018 <SVCCTL_App_Notification+0x15c>
      break;
 8009014:	bf00      	nop
 8009016:	e000      	b.n	800901a <SVCCTL_App_Notification+0x15e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8009018:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800901a:	2301      	movs	r3, #1
}
 800901c:	4618      	mov	r0, r3
 800901e:	3728      	adds	r7, #40	@ 0x28
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}
 8009024:	200003a0 	.word	0x200003a0
 8009028:	20000428 	.word	0x20000428

0800902c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b082      	sub	sp, #8
 8009030:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8009032:	4b06      	ldr	r3, [pc, #24]	@ (800904c <Ble_Tl_Init+0x20>)
 8009034:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8009036:	4b06      	ldr	r3, [pc, #24]	@ (8009050 <Ble_Tl_Init+0x24>)
 8009038:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800903a:	463b      	mov	r3, r7
 800903c:	4619      	mov	r1, r3
 800903e:	4805      	ldr	r0, [pc, #20]	@ (8009054 <Ble_Tl_Init+0x28>)
 8009040:	f7ff f896 	bl	8008170 <hci_init>

  return;
 8009044:	bf00      	nop
}
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	200300d8 	.word	0x200300d8
 8009050:	08009413 	.word	0x08009413
 8009054:	080093db 	.word	0x080093db

08009058 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8009058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800905a:	b08d      	sub	sp, #52	@ 0x34
 800905c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800905e:	2300      	movs	r3, #0
 8009060:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009062:	2392      	movs	r3, #146	@ 0x92
 8009064:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8009066:	f7fe fc01 	bl	800786c <hci_reset>
 800906a:	4603      	mov	r3, r0
 800906c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800906e:	f000 f925 	bl	80092bc <BleGetBdAddress>
 8009072:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8009074:	693a      	ldr	r2, [r7, #16]
 8009076:	2106      	movs	r1, #6
 8009078:	2000      	movs	r0, #0
 800907a:	f7fe fab7 	bl	80075ec <aci_hal_write_config_data>
 800907e:	4603      	mov	r3, r0
 8009080:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	3305      	adds	r3, #5
 8009086:	781a      	ldrb	r2, [r3, #0]
 8009088:	4b56      	ldr	r3, [pc, #344]	@ (80091e4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800908a:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	3304      	adds	r3, #4
 8009090:	781a      	ldrb	r2, [r3, #0]
 8009092:	4b54      	ldr	r3, [pc, #336]	@ (80091e4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8009094:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	3303      	adds	r3, #3
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	4b51      	ldr	r3, [pc, #324]	@ (80091e4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800909e:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	3302      	adds	r3, #2
 80090a4:	781a      	ldrb	r2, [r3, #0]
 80090a6:	4b4f      	ldr	r3, [pc, #316]	@ (80091e4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80090a8:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	3301      	adds	r3, #1
 80090ae:	781a      	ldrb	r2, [r3, #0]
 80090b0:	4b4c      	ldr	r3, [pc, #304]	@ (80091e4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80090b2:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	4b4a      	ldr	r3, [pc, #296]	@ (80091e4 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80090ba:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80090bc:	4a4a      	ldr	r2, [pc, #296]	@ (80091e8 <Ble_Hci_Gap_Gatt_Init+0x190>)
 80090be:	2110      	movs	r1, #16
 80090c0:	2018      	movs	r0, #24
 80090c2:	f7fe fa93 	bl	80075ec <aci_hal_write_config_data>
 80090c6:	4603      	mov	r3, r0
 80090c8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80090ca:	4a48      	ldr	r2, [pc, #288]	@ (80091ec <Ble_Hci_Gap_Gatt_Init+0x194>)
 80090cc:	2110      	movs	r1, #16
 80090ce:	2008      	movs	r0, #8
 80090d0:	f7fe fa8c 	bl	80075ec <aci_hal_write_config_data>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80090d8:	211d      	movs	r1, #29
 80090da:	2001      	movs	r0, #1
 80090dc:	f7fe fb0b 	bl	80076f6 <aci_hal_set_tx_power_level>
 80090e0:	4603      	mov	r3, r0
 80090e2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80090e4:	f7fd ff81 	bl	8006fea <aci_gatt_init>
 80090e8:	4603      	mov	r3, r0
 80090ea:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80090ec:	2300      	movs	r3, #0
 80090ee:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	f043 0301 	orr.w	r3, r3, #1
 80090f6:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80090f8:	7bfb      	ldrb	r3, [r7, #15]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d01f      	beq.n	800913e <Ble_Hci_Gap_Gatt_Init+0xe6>
  {
    const char *name = "P2PSRV1";
 80090fe:	4b3c      	ldr	r3, [pc, #240]	@ (80091f0 <Ble_Hci_Gap_Gatt_Init+0x198>)
 8009100:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8009102:	1dba      	adds	r2, r7, #6
 8009104:	7bf8      	ldrb	r0, [r7, #15]
 8009106:	1cbb      	adds	r3, r7, #2
 8009108:	9301      	str	r3, [sp, #4]
 800910a:	1d3b      	adds	r3, r7, #4
 800910c:	9300      	str	r3, [sp, #0]
 800910e:	4613      	mov	r3, r2
 8009110:	2207      	movs	r2, #7
 8009112:	2100      	movs	r1, #0
 8009114:	f7fd fe26 	bl	8006d64 <aci_gap_init>
 8009118:	4603      	mov	r3, r0
 800911a:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800911c:	88fc      	ldrh	r4, [r7, #6]
 800911e:	88bd      	ldrh	r5, [r7, #4]
 8009120:	68b8      	ldr	r0, [r7, #8]
 8009122:	f7f7 f82b 	bl	800017c <strlen>
 8009126:	4603      	mov	r3, r0
 8009128:	b2da      	uxtb	r2, r3
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	9300      	str	r3, [sp, #0]
 800912e:	4613      	mov	r3, r2
 8009130:	2200      	movs	r2, #0
 8009132:	4629      	mov	r1, r5
 8009134:	4620      	mov	r0, r4
 8009136:	f7fe f95b 	bl	80073f0 <aci_gatt_update_char_value>
 800913a:	4603      	mov	r3, r0
 800913c:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800913e:	88f8      	ldrh	r0, [r7, #6]
 8009140:	8879      	ldrh	r1, [r7, #2]
 8009142:	463b      	mov	r3, r7
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	2302      	movs	r3, #2
 8009148:	2200      	movs	r2, #0
 800914a:	f7fe f951 	bl	80073f0 <aci_gatt_update_char_value>
 800914e:	4603      	mov	r3, r0
 8009150:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_1M,RX_1M);
 8009152:	2201      	movs	r2, #1
 8009154:	2101      	movs	r1, #1
 8009156:	2000      	movs	r0, #0
 8009158:	f7fe fc2a 	bl	80079b0 <hci_le_set_default_phy>
 800915c:	4603      	mov	r3, r0
 800915e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8009160:	4b24      	ldr	r3, [pc, #144]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8009162:	2201      	movs	r2, #1
 8009164:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8009166:	4b23      	ldr	r3, [pc, #140]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8009168:	781b      	ldrb	r3, [r3, #0]
 800916a:	4618      	mov	r0, r3
 800916c:	f7fd fce2 	bl	8006b34 <aci_gap_set_io_capability>
 8009170:	4603      	mov	r3, r0
 8009172:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8009174:	4b1f      	ldr	r3, [pc, #124]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8009176:	2201      	movs	r2, #1
 8009178:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800917a:	4b1e      	ldr	r3, [pc, #120]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800917c:	2208      	movs	r2, #8
 800917e:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8009180:	4b1c      	ldr	r3, [pc, #112]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8009182:	2210      	movs	r2, #16
 8009184:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8009186:	4b1b      	ldr	r3, [pc, #108]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8009188:	2200      	movs	r2, #0
 800918a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800918c:	4b19      	ldr	r3, [pc, #100]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800918e:	4a1a      	ldr	r2, [pc, #104]	@ (80091f8 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8009190:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8009192:	4b18      	ldr	r3, [pc, #96]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8009194:	2201      	movs	r2, #1
 8009196:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8009198:	4b16      	ldr	r3, [pc, #88]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800919a:	789c      	ldrb	r4, [r3, #2]
 800919c:	4b15      	ldr	r3, [pc, #84]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800919e:	785d      	ldrb	r5, [r3, #1]
 80091a0:	4b14      	ldr	r3, [pc, #80]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80091a2:	791b      	ldrb	r3, [r3, #4]
 80091a4:	4a13      	ldr	r2, [pc, #76]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80091a6:	7952      	ldrb	r2, [r2, #5]
 80091a8:	4912      	ldr	r1, [pc, #72]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80091aa:	78c9      	ldrb	r1, [r1, #3]
 80091ac:	4811      	ldr	r0, [pc, #68]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80091ae:	6880      	ldr	r0, [r0, #8]
 80091b0:	2600      	movs	r6, #0
 80091b2:	9604      	str	r6, [sp, #16]
 80091b4:	9003      	str	r0, [sp, #12]
 80091b6:	9102      	str	r1, [sp, #8]
 80091b8:	9201      	str	r2, [sp, #4]
 80091ba:	9300      	str	r3, [sp, #0]
 80091bc:	2300      	movs	r3, #0
 80091be:	2201      	movs	r2, #1
 80091c0:	4629      	mov	r1, r5
 80091c2:	4620      	mov	r0, r4
 80091c4:	f7fd fd0a 	bl	8006bdc <aci_gap_set_authentication_requirement>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80091cc:	4b09      	ldr	r3, [pc, #36]	@ (80091f4 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80091ce:	789b      	ldrb	r3, [r3, #2]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d003      	beq.n	80091dc <Ble_Hci_Gap_Gatt_Init+0x184>
  {
    ret = aci_gap_configure_whitelist();
 80091d4:	f7fd fee5 	bl	8006fa2 <aci_gap_configure_filter_accept_list>
 80091d8:	4603      	mov	r3, r0
 80091da:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80091dc:	bf00      	nop
 80091de:	371c      	adds	r7, #28
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e4:	20000034 	.word	0x20000034
 80091e8:	0800a240 	.word	0x0800a240
 80091ec:	0800a250 	.word	0x0800a250
 80091f0:	0800a068 	.word	0x0800a068
 80091f4:	200003a0 	.word	0x200003a0
 80091f8:	0001b207 	.word	0x0001b207

080091fc <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b08c      	sub	sp, #48	@ 0x30
 8009200:	af08      	add	r7, sp, #32
 8009202:	4603      	mov	r3, r0
 8009204:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009206:	2392      	movs	r3, #146	@ 0x92
 8009208:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d106      	bne.n	800921e <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8009210:	4b24      	ldr	r3, [pc, #144]	@ (80092a4 <Adv_Request+0xa8>)
 8009212:	881b      	ldrh	r3, [r3, #0]
 8009214:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8009216:	4b24      	ldr	r3, [pc, #144]	@ (80092a8 <Adv_Request+0xac>)
 8009218:	881b      	ldrh	r3, [r3, #0]
 800921a:	81bb      	strh	r3, [r7, #12]
 800921c:	e005      	b.n	800922a <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800921e:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8009222:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8009224:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8009228:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800922a:	4b20      	ldr	r3, [pc, #128]	@ (80092ac <Adv_Request+0xb0>)
 800922c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009230:	4618      	mov	r0, r3
 8009232:	f7f7 ffb5 	bl	80011a0 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8009236:	79fb      	ldrb	r3, [r7, #7]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d10d      	bne.n	8009258 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 800923c:	4b1b      	ldr	r3, [pc, #108]	@ (80092ac <Adv_Request+0xb0>)
 800923e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009242:	2b01      	cmp	r3, #1
 8009244:	d004      	beq.n	8009250 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8009246:	4b19      	ldr	r3, [pc, #100]	@ (80092ac <Adv_Request+0xb0>)
 8009248:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800924c:	2b02      	cmp	r3, #2
 800924e:	d103      	bne.n	8009258 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8009250:	f7fd fb52 	bl	80068f8 <aci_gap_set_non_discoverable>
 8009254:	4603      	mov	r3, r0
 8009256:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8009258:	4a14      	ldr	r2, [pc, #80]	@ (80092ac <Adv_Request+0xb0>)
 800925a:	79fb      	ldrb	r3, [r7, #7]
 800925c:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8009260:	4b12      	ldr	r3, [pc, #72]	@ (80092ac <Adv_Request+0xb0>)
 8009262:	7e1b      	ldrb	r3, [r3, #24]
 8009264:	89ba      	ldrh	r2, [r7, #12]
 8009266:	89f9      	ldrh	r1, [r7, #14]
 8009268:	2000      	movs	r0, #0
 800926a:	9006      	str	r0, [sp, #24]
 800926c:	2000      	movs	r0, #0
 800926e:	9005      	str	r0, [sp, #20]
 8009270:	480f      	ldr	r0, [pc, #60]	@ (80092b0 <Adv_Request+0xb4>)
 8009272:	9004      	str	r0, [sp, #16]
 8009274:	9303      	str	r3, [sp, #12]
 8009276:	4b0f      	ldr	r3, [pc, #60]	@ (80092b4 <Adv_Request+0xb8>)
 8009278:	9302      	str	r3, [sp, #8]
 800927a:	2308      	movs	r3, #8
 800927c:	9301      	str	r3, [sp, #4]
 800927e:	2300      	movs	r3, #0
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	2300      	movs	r3, #0
 8009284:	2000      	movs	r0, #0
 8009286:	f7fd fb5b 	bl	8006940 <aci_gap_set_discoverable>
 800928a:	4603      	mov	r3, r0
 800928c:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 800928e:	490a      	ldr	r1, [pc, #40]	@ (80092b8 <Adv_Request+0xbc>)
 8009290:	200e      	movs	r0, #14
 8009292:	f7fd fe14 	bl	8006ebe <aci_gap_update_adv_data>
 8009296:	4603      	mov	r3, r0
 8009298:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 800929a:	bf00      	nop
}
 800929c:	3710      	adds	r7, #16
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	20000424 	.word	0x20000424
 80092a8:	20000426 	.word	0x20000426
 80092ac:	200003a0 	.word	0x200003a0
 80092b0:	200003b9 	.word	0x200003b9
 80092b4:	0800a260 	.word	0x0800a260
 80092b8:	20000034 	.word	0x20000034

080092bc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80092c2:	f7ff fd57 	bl	8008d74 <LL_FLASH_GetUDN>
 80092c6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ce:	d023      	beq.n	8009318 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80092d0:	f7ff fd68 	bl	8008da4 <LL_FLASH_GetSTCompanyID>
 80092d4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80092d6:	f7ff fd59 	bl	8008d8c <LL_FLASH_GetDeviceID>
 80092da:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	b2da      	uxtb	r2, r3
 80092e0:	4b16      	ldr	r3, [pc, #88]	@ (800933c <BleGetBdAddress+0x80>)
 80092e2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	0a1b      	lsrs	r3, r3, #8
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	4b14      	ldr	r3, [pc, #80]	@ (800933c <BleGetBdAddress+0x80>)
 80092ec:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	4b12      	ldr	r3, [pc, #72]	@ (800933c <BleGetBdAddress+0x80>)
 80092f4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	4b10      	ldr	r3, [pc, #64]	@ (800933c <BleGetBdAddress+0x80>)
 80092fc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	0a1b      	lsrs	r3, r3, #8
 8009302:	b2da      	uxtb	r2, r3
 8009304:	4b0d      	ldr	r3, [pc, #52]	@ (800933c <BleGetBdAddress+0x80>)
 8009306:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	0c1b      	lsrs	r3, r3, #16
 800930c:	b2da      	uxtb	r2, r3
 800930e:	4b0b      	ldr	r3, [pc, #44]	@ (800933c <BleGetBdAddress+0x80>)
 8009310:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8009312:	4b0a      	ldr	r3, [pc, #40]	@ (800933c <BleGetBdAddress+0x80>)
 8009314:	617b      	str	r3, [r7, #20]
 8009316:	e00b      	b.n	8009330 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8009318:	2000      	movs	r0, #0
 800931a:	f7ff fc45 	bl	8008ba8 <OTP_Read>
 800931e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d002      	beq.n	800932c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	e001      	b.n	8009330 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800932c:	4b04      	ldr	r3, [pc, #16]	@ (8009340 <BleGetBdAddress+0x84>)
 800932e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8009330:	697b      	ldr	r3, [r7, #20]
}
 8009332:	4618      	mov	r0, r3
 8009334:	3718      	adds	r7, #24
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	20000398 	.word	0x20000398
 8009340:	0800a238 	.word	0x0800a238

08009344 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800934a:	4b0a      	ldr	r3, [pc, #40]	@ (8009374 <Adv_Cancel+0x30>)
 800934c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009350:	2b05      	cmp	r3, #5
 8009352:	d00a      	beq.n	800936a <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8009354:	2392      	movs	r3, #146	@ 0x92
 8009356:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8009358:	f7fd face 	bl	80068f8 <aci_gap_set_non_discoverable>
 800935c:	4603      	mov	r3, r0
 800935e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8009360:	4b04      	ldr	r3, [pc, #16]	@ (8009374 <Adv_Cancel+0x30>)
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8009368:	bf00      	nop
 800936a:	bf00      	nop
}
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	200003a0 	.word	0x200003a0

08009378 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 800937c:	2100      	movs	r1, #0
 800937e:	2001      	movs	r0, #1
 8009380:	f000 fc86 	bl	8009c90 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 8009384:	bf00      	nop
}
 8009386:	bd80      	pop	{r7, pc}

08009388 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8009388:	b480      	push	{r7}
 800938a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 800938c:	bf00      	nop
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800939e:	2100      	movs	r1, #0
 80093a0:	2002      	movs	r0, #2
 80093a2:	f000 fc75 	bl	8009c90 <UTIL_SEQ_SetTask>

  return;
 80093a6:	bf00      	nop
}
 80093a8:	3708      	adds	r7, #8
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b082      	sub	sp, #8
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80093b6:	2001      	movs	r0, #1
 80093b8:	f000 fcd6 	bl	8009d68 <UTIL_SEQ_SetEvt>

  return;
 80093bc:	bf00      	nop
}
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80093cc:	2001      	movs	r0, #1
 80093ce:	f000 fceb 	bl	8009da8 <UTIL_SEQ_WaitEvt>

  return;
 80093d2:	bf00      	nop
}
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	3308      	adds	r3, #8
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7fe fd4b 	bl	8007e88 <SVCCTL_UserEvtRx>
 80093f2:	4603      	mov	r3, r0
 80093f4:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80093f6:	7afb      	ldrb	r3, [r7, #11]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8009402:	e003      	b.n	800940c <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	701a      	strb	r2, [r3, #0]
  return;
 800940a:	bf00      	nop
}
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	4603      	mov	r3, r0
 800941a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800941c:	79fb      	ldrb	r3, [r7, #7]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d002      	beq.n	8009428 <BLE_StatusNot+0x16>
 8009422:	2b01      	cmp	r3, #1
 8009424:	d006      	beq.n	8009434 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8009426:	e00b      	b.n	8009440 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009428:	2307      	movs	r3, #7
 800942a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800942c:	68f8      	ldr	r0, [r7, #12]
 800942e:	f000 fc5b 	bl	8009ce8 <UTIL_SEQ_PauseTask>
      break;
 8009432:	e005      	b.n	8009440 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8009434:	2307      	movs	r3, #7
 8009436:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fc75 	bl	8009d28 <UTIL_SEQ_ResumeTask>
      break;
 800943e:	bf00      	nop
  }

  return;
 8009440:	bf00      	nop
}
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b082      	sub	sp, #8
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b03      	cmp	r3, #3
 8009456:	d006      	beq.n	8009466 <P2PS_STM_App_Notification+0x1e>
 8009458:	2b03      	cmp	r3, #3
 800945a:	dc09      	bgt.n	8009470 <P2PS_STM_App_Notification+0x28>
 800945c:	2b00      	cmp	r3, #0
 800945e:	d009      	beq.n	8009474 <P2PS_STM_App_Notification+0x2c>
 8009460:	2b01      	cmp	r3, #1
 8009462:	d009      	beq.n	8009478 <P2PS_STM_App_Notification+0x30>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8009464:	e004      	b.n	8009470 <P2PS_STM_App_Notification+0x28>
    	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009466:	2110      	movs	r1, #16
 8009468:	4806      	ldr	r0, [pc, #24]	@ (8009484 <P2PS_STM_App_Notification+0x3c>)
 800946a:	f7fa f9d3 	bl	8003814 <HAL_GPIO_TogglePin>
      break;
 800946e:	e004      	b.n	800947a <P2PS_STM_App_Notification+0x32>
      break;
 8009470:	bf00      	nop
 8009472:	e002      	b.n	800947a <P2PS_STM_App_Notification+0x32>
      break;
 8009474:	bf00      	nop
 8009476:	e000      	b.n	800947a <P2PS_STM_App_Notification+0x32>
      break;
 8009478:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800947a:	bf00      	nop
}
 800947c:	3708      	adds	r7, #8
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	48000400 	.word	0x48000400

08009488 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b082      	sub	sp, #8
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <P2PS_APP_Notification+0x16>
 8009498:	2b01      	cmp	r3, #1
 800949a:	d006      	beq.n	80094aa <P2PS_APP_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800949c:	e00b      	b.n	80094b6 <P2PS_APP_Notification+0x2e>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 800949e:	2201      	movs	r2, #1
 80094a0:	2120      	movs	r1, #32
 80094a2:	4807      	ldr	r0, [pc, #28]	@ (80094c0 <P2PS_APP_Notification+0x38>)
 80094a4:	f7fa f99e 	bl	80037e4 <HAL_GPIO_WritePin>
    break;
 80094a8:	e005      	b.n	80094b6 <P2PS_APP_Notification+0x2e>
    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 80094aa:	2200      	movs	r2, #0
 80094ac:	2120      	movs	r1, #32
 80094ae:	4804      	ldr	r0, [pc, #16]	@ (80094c0 <P2PS_APP_Notification+0x38>)
 80094b0:	f7fa f998 	bl	80037e4 <HAL_GPIO_WritePin>
    break;
 80094b4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80094b6:	bf00      	nop
}
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	48000400 	.word	0x48000400

080094c4 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 80094c4:	b480      	push	{r7}
 80094c6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 80094c8:	bf00      	nop
}
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
	...

080094d4 <LL_PWR_EnableBootC2>:
{
 80094d4:	b480      	push	{r7}
 80094d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80094d8:	4b05      	ldr	r3, [pc, #20]	@ (80094f0 <LL_PWR_EnableBootC2+0x1c>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	4a04      	ldr	r2, [pc, #16]	@ (80094f0 <LL_PWR_EnableBootC2+0x1c>)
 80094de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094e2:	60d3      	str	r3, [r2, #12]
}
 80094e4:	bf00      	nop
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	58000400 	.word	0x58000400

080094f4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80094fc:	4b06      	ldr	r3, [pc, #24]	@ (8009518 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80094fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009502:	4905      	ldr	r1, [pc, #20]	@ (8009518 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4313      	orrs	r3, r2
 8009508:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800950c:	bf00      	nop
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr
 8009518:	58000800 	.word	0x58000800

0800951c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009524:	4b05      	ldr	r3, [pc, #20]	@ (800953c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009526:	6a1a      	ldr	r2, [r3, #32]
 8009528:	4904      	ldr	r1, [pc, #16]	@ (800953c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4313      	orrs	r3, r2
 800952e:	620b      	str	r3, [r1, #32]
}
 8009530:	bf00      	nop
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	58000800 	.word	0x58000800

08009540 <LL_AHB3_GRP1_EnableClock>:
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800954c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800954e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4313      	orrs	r3, r2
 8009556:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800955c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4013      	ands	r3, r2
 8009562:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009564:	68fb      	ldr	r3, [r7, #12]
}
 8009566:	bf00      	nop
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009572:	b480      	push	{r7}
 8009574:	b085      	sub	sp, #20
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800957a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800957e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009582:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	4313      	orrs	r3, r2
 800958a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800958e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009592:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4013      	ands	r3, r2
 800959a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800959c:	68fb      	ldr	r3, [r7, #12]
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b083      	sub	sp, #12
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	601a      	str	r2, [r3, #0]
}
 80095be:	bf00      	nop
 80095c0:	370c      	adds	r7, #12
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b083      	sub	sp, #12
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f043 0201 	orr.w	r2, r3, #1
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80095ea:	b480      	push	{r7}
 80095ec:	b083      	sub	sp, #12
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	041b      	lsls	r3, r3, #16
 80095fc:	43db      	mvns	r3, r3
 80095fe:	401a      	ands	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	605a      	str	r2, [r3, #4]
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	041b      	lsls	r3, r3, #16
 8009622:	431a      	orrs	r2, r3
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	605a      	str	r2, [r3, #4]
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009634:	b480      	push	{r7}
 8009636:	b083      	sub	sp, #12
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	43db      	mvns	r3, r3
 8009646:	401a      	ands	r2, r3
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	605a      	str	r2, [r3, #4]
}
 800964c:	bf00      	nop
 800964e:	370c      	adds	r7, #12
 8009650:	46bd      	mov	sp, r7
 8009652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009656:	4770      	bx	lr

08009658 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	609a      	str	r2, [r3, #8]
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	041a      	lsls	r2, r3, #16
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	609a      	str	r2, [r3, #8]
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
 800969a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	68da      	ldr	r2, [r3, #12]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	4013      	ands	r3, r2
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d101      	bne.n	80096ae <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	69da      	ldr	r2, [r3, #28]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	4013      	ands	r3, r2
 80096ce:	683a      	ldr	r2, [r7, #0]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d101      	bne.n	80096d8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80096d4:	2301      	movs	r3, #1
 80096d6:	e000      	b.n	80096da <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	370c      	adds	r7, #12
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
	...

080096e8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80096ec:	2102      	movs	r1, #2
 80096ee:	4818      	ldr	r0, [pc, #96]	@ (8009750 <HW_IPCC_Rx_Handler+0x68>)
 80096f0:	f7ff ffe4 	bl	80096bc <LL_C2_IPCC_IsActiveFlag_CHx>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d008      	beq.n	800970c <HW_IPCC_Rx_Handler+0x24>
 80096fa:	4b15      	ldr	r3, [pc, #84]	@ (8009750 <HW_IPCC_Rx_Handler+0x68>)
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f003 0302 	and.w	r3, r3, #2
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009706:	f000 f8d5 	bl	80098b4 <HW_IPCC_SYS_EvtHandler>
 800970a:	e01e      	b.n	800974a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800970c:	2101      	movs	r1, #1
 800970e:	4810      	ldr	r0, [pc, #64]	@ (8009750 <HW_IPCC_Rx_Handler+0x68>)
 8009710:	f7ff ffd4 	bl	80096bc <LL_C2_IPCC_IsActiveFlag_CHx>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d008      	beq.n	800972c <HW_IPCC_Rx_Handler+0x44>
 800971a:	4b0d      	ldr	r3, [pc, #52]	@ (8009750 <HW_IPCC_Rx_Handler+0x68>)
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	f003 0301 	and.w	r3, r3, #1
 8009722:	2b00      	cmp	r3, #0
 8009724:	d102      	bne.n	800972c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009726:	f000 f889 	bl	800983c <HW_IPCC_BLE_EvtHandler>
 800972a:	e00e      	b.n	800974a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800972c:	2108      	movs	r1, #8
 800972e:	4808      	ldr	r0, [pc, #32]	@ (8009750 <HW_IPCC_Rx_Handler+0x68>)
 8009730:	f7ff ffc4 	bl	80096bc <LL_C2_IPCC_IsActiveFlag_CHx>
 8009734:	4603      	mov	r3, r0
 8009736:	2b00      	cmp	r3, #0
 8009738:	d008      	beq.n	800974c <HW_IPCC_Rx_Handler+0x64>
 800973a:	4b05      	ldr	r3, [pc, #20]	@ (8009750 <HW_IPCC_Rx_Handler+0x68>)
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009746:	f000 f901 	bl	800994c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800974a:	bf00      	nop
 800974c:	bf00      	nop
}
 800974e:	bd80      	pop	{r7, pc}
 8009750:	58000c00 	.word	0x58000c00

08009754 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009754:	b580      	push	{r7, lr}
 8009756:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009758:	2102      	movs	r1, #2
 800975a:	4818      	ldr	r0, [pc, #96]	@ (80097bc <HW_IPCC_Tx_Handler+0x68>)
 800975c:	f7ff ff99 	bl	8009692 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d108      	bne.n	8009778 <HW_IPCC_Tx_Handler+0x24>
 8009766:	4b15      	ldr	r3, [pc, #84]	@ (80097bc <HW_IPCC_Tx_Handler+0x68>)
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800976e:	2b00      	cmp	r3, #0
 8009770:	d102      	bne.n	8009778 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8009772:	f000 f893 	bl	800989c <HW_IPCC_SYS_CmdEvtHandler>
 8009776:	e01e      	b.n	80097b6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009778:	2108      	movs	r1, #8
 800977a:	4810      	ldr	r0, [pc, #64]	@ (80097bc <HW_IPCC_Tx_Handler+0x68>)
 800977c:	f7ff ff89 	bl	8009692 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d108      	bne.n	8009798 <HW_IPCC_Tx_Handler+0x44>
 8009786:	4b0d      	ldr	r3, [pc, #52]	@ (80097bc <HW_IPCC_Tx_Handler+0x68>)
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d102      	bne.n	8009798 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009792:	f000 f8bd 	bl	8009910 <HW_IPCC_MM_FreeBufHandler>
 8009796:	e00e      	b.n	80097b6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009798:	2120      	movs	r1, #32
 800979a:	4808      	ldr	r0, [pc, #32]	@ (80097bc <HW_IPCC_Tx_Handler+0x68>)
 800979c:	f7ff ff79 	bl	8009692 <LL_C1_IPCC_IsActiveFlag_CHx>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d108      	bne.n	80097b8 <HW_IPCC_Tx_Handler+0x64>
 80097a6:	4b05      	ldr	r3, [pc, #20]	@ (80097bc <HW_IPCC_Tx_Handler+0x68>)
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d102      	bne.n	80097b8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80097b2:	f000 f84f 	bl	8009854 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80097b6:	bf00      	nop
 80097b8:	bf00      	nop
}
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	58000c00 	.word	0x58000c00

080097c0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80097c4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80097c8:	f7ff fed3 	bl	8009572 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80097cc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80097d0:	f7ff fea4 	bl	800951c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80097d4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80097d8:	f7ff fe8c 	bl	80094f4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80097dc:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80097de:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80097e0:	f7ff fe78 	bl	80094d4 <LL_PWR_EnableBootC2>

  return;
 80097e4:	bf00      	nop
}
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80097ec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80097f0:	f7ff fea6 	bl	8009540 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80097f4:	4806      	ldr	r0, [pc, #24]	@ (8009810 <HW_IPCC_Init+0x28>)
 80097f6:	f7ff fee8 	bl	80095ca <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80097fa:	4805      	ldr	r0, [pc, #20]	@ (8009810 <HW_IPCC_Init+0x28>)
 80097fc:	f7ff fed5 	bl	80095aa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009800:	202c      	movs	r0, #44	@ 0x2c
 8009802:	f7f9 fd6c 	bl	80032de <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009806:	202d      	movs	r0, #45	@ 0x2d
 8009808:	f7f9 fd69 	bl	80032de <HAL_NVIC_EnableIRQ>

  return;
 800980c:	bf00      	nop
}
 800980e:	bd80      	pop	{r7, pc}
 8009810:	58000c00 	.word	0x58000c00

08009814 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009818:	2101      	movs	r1, #1
 800981a:	4802      	ldr	r0, [pc, #8]	@ (8009824 <HW_IPCC_BLE_Init+0x10>)
 800981c:	f7ff ff0a 	bl	8009634 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009820:	bf00      	nop
}
 8009822:	bd80      	pop	{r7, pc}
 8009824:	58000c00 	.word	0x58000c00

08009828 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 800982c:	2101      	movs	r1, #1
 800982e:	4802      	ldr	r0, [pc, #8]	@ (8009838 <HW_IPCC_BLE_SendCmd+0x10>)
 8009830:	f7ff ff20 	bl	8009674 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009834:	bf00      	nop
}
 8009836:	bd80      	pop	{r7, pc}
 8009838:	58000c00 	.word	0x58000c00

0800983c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009840:	f7fe fffa 	bl	8008838 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009844:	2101      	movs	r1, #1
 8009846:	4802      	ldr	r0, [pc, #8]	@ (8009850 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009848:	f7ff ff06 	bl	8009658 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800984c:	bf00      	nop
}
 800984e:	bd80      	pop	{r7, pc}
 8009850:	58000c00 	.word	0x58000c00

08009854 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009858:	2120      	movs	r1, #32
 800985a:	4803      	ldr	r0, [pc, #12]	@ (8009868 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800985c:	f7ff fed8 	bl	8009610 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009860:	f7ff f81a 	bl	8008898 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009864:	bf00      	nop
}
 8009866:	bd80      	pop	{r7, pc}
 8009868:	58000c00 	.word	0x58000c00

0800986c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009870:	2102      	movs	r1, #2
 8009872:	4802      	ldr	r0, [pc, #8]	@ (800987c <HW_IPCC_SYS_Init+0x10>)
 8009874:	f7ff fede 	bl	8009634 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009878:	bf00      	nop
}
 800987a:	bd80      	pop	{r7, pc}
 800987c:	58000c00 	.word	0x58000c00

08009880 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009884:	2102      	movs	r1, #2
 8009886:	4804      	ldr	r0, [pc, #16]	@ (8009898 <HW_IPCC_SYS_SendCmd+0x18>)
 8009888:	f7ff fef4 	bl	8009674 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800988c:	2102      	movs	r1, #2
 800988e:	4802      	ldr	r0, [pc, #8]	@ (8009898 <HW_IPCC_SYS_SendCmd+0x18>)
 8009890:	f7ff feab 	bl	80095ea <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009894:	bf00      	nop
}
 8009896:	bd80      	pop	{r7, pc}
 8009898:	58000c00 	.word	0x58000c00

0800989c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800989c:	b580      	push	{r7, lr}
 800989e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80098a0:	2102      	movs	r1, #2
 80098a2:	4803      	ldr	r0, [pc, #12]	@ (80098b0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80098a4:	f7ff feb4 	bl	8009610 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80098a8:	f7ff f846 	bl	8008938 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80098ac:	bf00      	nop
}
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	58000c00 	.word	0x58000c00

080098b4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80098b8:	f7ff f854 	bl	8008964 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80098bc:	2102      	movs	r1, #2
 80098be:	4802      	ldr	r0, [pc, #8]	@ (80098c8 <HW_IPCC_SYS_EvtHandler+0x14>)
 80098c0:	f7ff feca 	bl	8009658 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80098c4:	bf00      	nop
}
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	58000c00 	.word	0x58000c00

080098cc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80098d4:	2108      	movs	r1, #8
 80098d6:	480c      	ldr	r0, [pc, #48]	@ (8009908 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80098d8:	f7ff fedb 	bl	8009692 <LL_C1_IPCC_IsActiveFlag_CHx>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80098e2:	4a0a      	ldr	r2, [pc, #40]	@ (800990c <HW_IPCC_MM_SendFreeBuf+0x40>)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098e8:	2108      	movs	r1, #8
 80098ea:	4807      	ldr	r0, [pc, #28]	@ (8009908 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80098ec:	f7ff fe7d 	bl	80095ea <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80098f0:	e006      	b.n	8009900 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80098f6:	2108      	movs	r1, #8
 80098f8:	4803      	ldr	r0, [pc, #12]	@ (8009908 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80098fa:	f7ff febb 	bl	8009674 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80098fe:	bf00      	nop
}
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	58000c00 	.word	0x58000c00
 800990c:	2000042c 	.word	0x2000042c

08009910 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009914:	2108      	movs	r1, #8
 8009916:	4806      	ldr	r0, [pc, #24]	@ (8009930 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009918:	f7ff fe7a 	bl	8009610 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800991c:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009922:	2108      	movs	r1, #8
 8009924:	4802      	ldr	r0, [pc, #8]	@ (8009930 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009926:	f7ff fea5 	bl	8009674 <LL_C1_IPCC_SetFlag_CHx>

  return;
 800992a:	bf00      	nop
}
 800992c:	bd80      	pop	{r7, pc}
 800992e:	bf00      	nop
 8009930:	58000c00 	.word	0x58000c00
 8009934:	2000042c 	.word	0x2000042c

08009938 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009938:	b580      	push	{r7, lr}
 800993a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800993c:	2108      	movs	r1, #8
 800993e:	4802      	ldr	r0, [pc, #8]	@ (8009948 <HW_IPCC_TRACES_Init+0x10>)
 8009940:	f7ff fe78 	bl	8009634 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009944:	bf00      	nop
}
 8009946:	bd80      	pop	{r7, pc}
 8009948:	58000c00 	.word	0x58000c00

0800994c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800994c:	b580      	push	{r7, lr}
 800994e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009950:	f7ff f8b0 	bl	8008ab4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009954:	2108      	movs	r1, #8
 8009956:	4802      	ldr	r0, [pc, #8]	@ (8009960 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009958:	f7ff fe7e 	bl	8009658 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800995c:	bf00      	nop
}
 800995e:	bd80      	pop	{r7, pc}
 8009960:	58000c00 	.word	0x58000c00

08009964 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009964:	b480      	push	{r7}
 8009966:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009968:	4b05      	ldr	r3, [pc, #20]	@ (8009980 <UTIL_LPM_Init+0x1c>)
 800996a:	2200      	movs	r2, #0
 800996c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800996e:	4b05      	ldr	r3, [pc, #20]	@ (8009984 <UTIL_LPM_Init+0x20>)
 8009970:	2200      	movs	r2, #0
 8009972:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009974:	bf00      	nop
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	20000430 	.word	0x20000430
 8009984:	20000434 	.word	0x20000434

08009988 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009994:	f3ef 8310 	mrs	r3, PRIMASK
 8009998:	613b      	str	r3, [r7, #16]
  return(result);
 800999a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800999c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800999e:	b672      	cpsid	i
}
 80099a0:	bf00      	nop
  
  switch(state)
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d008      	beq.n	80099ba <UTIL_LPM_SetOffMode+0x32>
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d10e      	bne.n	80099ca <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80099ac:	4b0d      	ldr	r3, [pc, #52]	@ (80099e4 <UTIL_LPM_SetOffMode+0x5c>)
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4313      	orrs	r3, r2
 80099b4:	4a0b      	ldr	r2, [pc, #44]	@ (80099e4 <UTIL_LPM_SetOffMode+0x5c>)
 80099b6:	6013      	str	r3, [r2, #0]
      break;
 80099b8:	e008      	b.n	80099cc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	43da      	mvns	r2, r3
 80099be:	4b09      	ldr	r3, [pc, #36]	@ (80099e4 <UTIL_LPM_SetOffMode+0x5c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4013      	ands	r3, r2
 80099c4:	4a07      	ldr	r2, [pc, #28]	@ (80099e4 <UTIL_LPM_SetOffMode+0x5c>)
 80099c6:	6013      	str	r3, [r2, #0]
      break;
 80099c8:	e000      	b.n	80099cc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80099ca:	bf00      	nop
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f383 8810 	msr	PRIMASK, r3
}
 80099d6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80099d8:	bf00      	nop
 80099da:	371c      	adds	r7, #28
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr
 80099e4:	20000434 	.word	0x20000434

080099e8 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099ee:	f3ef 8310 	mrs	r3, PRIMASK
 80099f2:	60bb      	str	r3, [r7, #8]
  return(result);
 80099f4:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 80099f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80099f8:	b672      	cpsid	i
}
 80099fa:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80099fc:	4b12      	ldr	r3, [pc, #72]	@ (8009a48 <UTIL_LPM_EnterLowPower+0x60>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d006      	beq.n	8009a12 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009a04:	4b11      	ldr	r3, [pc, #68]	@ (8009a4c <UTIL_LPM_EnterLowPower+0x64>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8009a0a:	4b10      	ldr	r3, [pc, #64]	@ (8009a4c <UTIL_LPM_EnterLowPower+0x64>)
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	4798      	blx	r3
 8009a10:	e010      	b.n	8009a34 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8009a12:	4b0f      	ldr	r3, [pc, #60]	@ (8009a50 <UTIL_LPM_EnterLowPower+0x68>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d006      	beq.n	8009a28 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8009a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a4c <UTIL_LPM_EnterLowPower+0x64>)
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8009a20:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <UTIL_LPM_EnterLowPower+0x64>)
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	4798      	blx	r3
 8009a26:	e005      	b.n	8009a34 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8009a28:	4b08      	ldr	r3, [pc, #32]	@ (8009a4c <UTIL_LPM_EnterLowPower+0x64>)
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8009a2e:	4b07      	ldr	r3, [pc, #28]	@ (8009a4c <UTIL_LPM_EnterLowPower+0x64>)
 8009a30:	695b      	ldr	r3, [r3, #20]
 8009a32:	4798      	blx	r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f383 8810 	msr	PRIMASK, r3
}
 8009a3e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8009a40:	bf00      	nop
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}
 8009a48:	20000430 	.word	0x20000430
 8009a4c:	0800a1a0 	.word	0x0800a1a0
 8009a50:	20000434 	.word	0x20000434

08009a54 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b090      	sub	sp, #64	@ 0x40
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009a5c:	4b73      	ldr	r3, [pc, #460]	@ (8009c2c <UTIL_SEQ_Run+0x1d8>)
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8009a62:	4b72      	ldr	r3, [pc, #456]	@ (8009c2c <UTIL_SEQ_Run+0x1d8>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4013      	ands	r3, r2
 8009a6a:	4a70      	ldr	r2, [pc, #448]	@ (8009c2c <UTIL_SEQ_Run+0x1d8>)
 8009a6c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8009a6e:	4b70      	ldr	r3, [pc, #448]	@ (8009c30 <UTIL_SEQ_Run+0x1dc>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009a74:	4b6f      	ldr	r3, [pc, #444]	@ (8009c34 <UTIL_SEQ_Run+0x1e0>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8009a7a:	4b6f      	ldr	r3, [pc, #444]	@ (8009c38 <UTIL_SEQ_Run+0x1e4>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8009a80:	4b6e      	ldr	r3, [pc, #440]	@ (8009c3c <UTIL_SEQ_Run+0x1e8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009a86:	e08d      	b.n	8009ba4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009a8c:	e002      	b.n	8009a94 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a90:	3301      	adds	r3, #1
 8009a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009a94:	4a6a      	ldr	r2, [pc, #424]	@ (8009c40 <UTIL_SEQ_Run+0x1ec>)
 8009a96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a98:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9e:	401a      	ands	r2, r3
 8009aa0:	4b62      	ldr	r3, [pc, #392]	@ (8009c2c <UTIL_SEQ_Run+0x1d8>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0f1      	beq.n	8009a8e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8009aaa:	4a65      	ldr	r2, [pc, #404]	@ (8009c40 <UTIL_SEQ_Run+0x1ec>)
 8009aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009aae:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab4:	401a      	ands	r2, r3
 8009ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8009c2c <UTIL_SEQ_Run+0x1d8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4013      	ands	r3, r2
 8009abc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8009abe:	4a60      	ldr	r2, [pc, #384]	@ (8009c40 <UTIL_SEQ_Run+0x1ec>)
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac2:	00db      	lsls	r3, r3, #3
 8009ac4:	4413      	add	r3, r2
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aca:	4013      	ands	r3, r2
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d106      	bne.n	8009ade <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8009ad0:	4a5b      	ldr	r2, [pc, #364]	@ (8009c40 <UTIL_SEQ_Run+0x1ec>)
 8009ad2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad4:	00db      	lsls	r3, r3, #3
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8009adc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8009ade:	4a58      	ldr	r2, [pc, #352]	@ (8009c40 <UTIL_SEQ_Run+0x1ec>)
 8009ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae2:	00db      	lsls	r3, r3, #3
 8009ae4:	4413      	add	r3, r2
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aea:	4013      	ands	r3, r2
 8009aec:	4618      	mov	r0, r3
 8009aee:	f000 f9a5 	bl	8009e3c <SEQ_BitPosition>
 8009af2:	4603      	mov	r3, r0
 8009af4:	461a      	mov	r2, r3
 8009af6:	4b53      	ldr	r3, [pc, #332]	@ (8009c44 <UTIL_SEQ_Run+0x1f0>)
 8009af8:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009afa:	4a51      	ldr	r2, [pc, #324]	@ (8009c40 <UTIL_SEQ_Run+0x1ec>)
 8009afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	4413      	add	r3, r2
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	4b4f      	ldr	r3, [pc, #316]	@ (8009c44 <UTIL_SEQ_Run+0x1f0>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2101      	movs	r1, #1
 8009b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b0e:	43db      	mvns	r3, r3
 8009b10:	401a      	ands	r2, r3
 8009b12:	494b      	ldr	r1, [pc, #300]	@ (8009c40 <UTIL_SEQ_Run+0x1ec>)
 8009b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b16:	00db      	lsls	r3, r3, #3
 8009b18:	440b      	add	r3, r1
 8009b1a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8009b20:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b22:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009b24:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b26:	b672      	cpsid	i
}
 8009b28:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009b2a:	4b46      	ldr	r3, [pc, #280]	@ (8009c44 <UTIL_SEQ_Run+0x1f0>)
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	fa02 f303 	lsl.w	r3, r2, r3
 8009b34:	43da      	mvns	r2, r3
 8009b36:	4b3e      	ldr	r3, [pc, #248]	@ (8009c30 <UTIL_SEQ_Run+0x1dc>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4013      	ands	r3, r2
 8009b3c:	4a3c      	ldr	r2, [pc, #240]	@ (8009c30 <UTIL_SEQ_Run+0x1dc>)
 8009b3e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009b40:	2302      	movs	r3, #2
 8009b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b44:	e013      	b.n	8009b6e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b48:	3b01      	subs	r3, #1
 8009b4a:	4a3d      	ldr	r2, [pc, #244]	@ (8009c40 <UTIL_SEQ_Run+0x1ec>)
 8009b4c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8009b50:	4b3c      	ldr	r3, [pc, #240]	@ (8009c44 <UTIL_SEQ_Run+0x1f0>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2201      	movs	r2, #1
 8009b56:	fa02 f303 	lsl.w	r3, r2, r3
 8009b5a:	43da      	mvns	r2, r3
 8009b5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	400a      	ands	r2, r1
 8009b62:	4937      	ldr	r1, [pc, #220]	@ (8009c40 <UTIL_SEQ_Run+0x1ec>)
 8009b64:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1e8      	bne.n	8009b46 <UTIL_SEQ_Run+0xf2>
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	f383 8810 	msr	PRIMASK, r3
}
 8009b7e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8009b80:	4b30      	ldr	r3, [pc, #192]	@ (8009c44 <UTIL_SEQ_Run+0x1f0>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a30      	ldr	r2, [pc, #192]	@ (8009c48 <UTIL_SEQ_Run+0x1f4>)
 8009b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b8a:	4798      	blx	r3

    local_taskset = TaskSet;
 8009b8c:	4b28      	ldr	r3, [pc, #160]	@ (8009c30 <UTIL_SEQ_Run+0x1dc>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8009b92:	4b28      	ldr	r3, [pc, #160]	@ (8009c34 <UTIL_SEQ_Run+0x1e0>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8009b98:	4b27      	ldr	r3, [pc, #156]	@ (8009c38 <UTIL_SEQ_Run+0x1e4>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8009b9e:	4b27      	ldr	r3, [pc, #156]	@ (8009c3c <UTIL_SEQ_Run+0x1e8>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009ba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba8:	401a      	ands	r2, r3
 8009baa:	4b20      	ldr	r3, [pc, #128]	@ (8009c2c <UTIL_SEQ_Run+0x1d8>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4013      	ands	r3, r2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d005      	beq.n	8009bc0 <UTIL_SEQ_Run+0x16c>
 8009bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb8:	4013      	ands	r3, r2
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f43f af64 	beq.w	8009a88 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8009bc0:	4b20      	ldr	r3, [pc, #128]	@ (8009c44 <UTIL_SEQ_Run+0x1f0>)
 8009bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8009bc8:	f7f6 fd6a 	bl	80006a0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8009bd0:	613b      	str	r3, [r7, #16]
  return(result);
 8009bd2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8009bd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009bd6:	b672      	cpsid	i
}
 8009bd8:	bf00      	nop
  local_taskset = TaskSet;
 8009bda:	4b15      	ldr	r3, [pc, #84]	@ (8009c30 <UTIL_SEQ_Run+0x1dc>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009be0:	4b14      	ldr	r3, [pc, #80]	@ (8009c34 <UTIL_SEQ_Run+0x1e0>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8009be6:	4b14      	ldr	r3, [pc, #80]	@ (8009c38 <UTIL_SEQ_Run+0x1e4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8009bec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bf0:	401a      	ands	r2, r3
 8009bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8009c2c <UTIL_SEQ_Run+0x1d8>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d107      	bne.n	8009c0c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8009c3c <UTIL_SEQ_Run+0x1e8>)
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c02:	4013      	ands	r3, r2
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d101      	bne.n	8009c0c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009c08:	f7f6 fd14 	bl	8000634 <UTIL_SEQ_Idle>
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f383 8810 	msr	PRIMASK, r3
}
 8009c16:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009c18:	f7f6 fd4e 	bl	80006b8 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009c1c:	4a03      	ldr	r2, [pc, #12]	@ (8009c2c <UTIL_SEQ_Run+0x1d8>)
 8009c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c20:	6013      	str	r3, [r2, #0]

  return;
 8009c22:	bf00      	nop
}
 8009c24:	3740      	adds	r7, #64	@ 0x40
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
 8009c2a:	bf00      	nop
 8009c2c:	20000048 	.word	0x20000048
 8009c30:	20000438 	.word	0x20000438
 8009c34:	2000043c 	.word	0x2000043c
 8009c38:	20000044 	.word	0x20000044
 8009c3c:	20000440 	.word	0x20000440
 8009c40:	200004c8 	.word	0x200004c8
 8009c44:	20000444 	.word	0x20000444
 8009c48:	20000448 	.word	0x20000448

08009c4c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c58:	f3ef 8310 	mrs	r3, PRIMASK
 8009c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8009c5e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009c60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009c62:	b672      	cpsid	i
}
 8009c64:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009c66:	68f8      	ldr	r0, [r7, #12]
 8009c68:	f000 f8e8 	bl	8009e3c <SEQ_BitPosition>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4a06      	ldr	r2, [pc, #24]	@ (8009c8c <UTIL_SEQ_RegTask+0x40>)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c7c:	69bb      	ldr	r3, [r7, #24]
 8009c7e:	f383 8810 	msr	PRIMASK, r3
}
 8009c82:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009c84:	bf00      	nop
}
 8009c86:	3720      	adds	r7, #32
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	20000448 	.word	0x20000448

08009c90 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8009c9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009ca2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ca4:	b672      	cpsid	i
}
 8009ca6:	bf00      	nop

  TaskSet |= TaskId_bm;
 8009ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce0 <UTIL_SEQ_SetTask+0x50>)
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8009ce0 <UTIL_SEQ_SetTask+0x50>)
 8009cb2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8009ce4 <UTIL_SEQ_SetTask+0x54>)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	431a      	orrs	r2, r3
 8009cc0:	4908      	ldr	r1, [pc, #32]	@ (8009ce4 <UTIL_SEQ_SetTask+0x54>)
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009cc8:	697b      	ldr	r3, [r7, #20]
 8009cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	f383 8810 	msr	PRIMASK, r3
}
 8009cd2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009cd4:	bf00      	nop
}
 8009cd6:	371c      	adds	r7, #28
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr
 8009ce0:	20000438 	.word	0x20000438
 8009ce4:	200004c8 	.word	0x200004c8

08009ce8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b087      	sub	sp, #28
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8009cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009cf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009cfa:	b672      	cpsid	i
}
 8009cfc:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	43da      	mvns	r2, r3
 8009d02:	4b08      	ldr	r3, [pc, #32]	@ (8009d24 <UTIL_SEQ_PauseTask+0x3c>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4013      	ands	r3, r2
 8009d08:	4a06      	ldr	r2, [pc, #24]	@ (8009d24 <UTIL_SEQ_PauseTask+0x3c>)
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	f383 8810 	msr	PRIMASK, r3
}
 8009d16:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009d18:	bf00      	nop
}
 8009d1a:	371c      	adds	r7, #28
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	20000044 	.word	0x20000044

08009d28 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d30:	f3ef 8310 	mrs	r3, PRIMASK
 8009d34:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d36:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009d38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d3a:	b672      	cpsid	i
}
 8009d3c:	bf00      	nop

  TaskMask |= TaskId_bm;
 8009d3e:	4b09      	ldr	r3, [pc, #36]	@ (8009d64 <UTIL_SEQ_ResumeTask+0x3c>)
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	4313      	orrs	r3, r2
 8009d46:	4a07      	ldr	r2, [pc, #28]	@ (8009d64 <UTIL_SEQ_ResumeTask+0x3c>)
 8009d48:	6013      	str	r3, [r2, #0]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	f383 8810 	msr	PRIMASK, r3
}
 8009d54:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009d56:	bf00      	nop
}
 8009d58:	371c      	adds	r7, #28
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	20000044 	.word	0x20000044

08009d68 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009d70:	f3ef 8310 	mrs	r3, PRIMASK
 8009d74:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d76:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009d78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009d7a:	b672      	cpsid	i
}
 8009d7c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8009d7e:	4b09      	ldr	r3, [pc, #36]	@ (8009da4 <UTIL_SEQ_SetEvt+0x3c>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	4a07      	ldr	r2, [pc, #28]	@ (8009da4 <UTIL_SEQ_SetEvt+0x3c>)
 8009d88:	6013      	str	r3, [r2, #0]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009d8e:	693b      	ldr	r3, [r7, #16]
 8009d90:	f383 8810 	msr	PRIMASK, r3
}
 8009d94:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009d96:	bf00      	nop
}
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	2000043c 	.word	0x2000043c

08009da8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b088      	sub	sp, #32
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8009db0:	4b1f      	ldr	r3, [pc, #124]	@ (8009e30 <UTIL_SEQ_WaitEvt+0x88>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8009db6:	4b1e      	ldr	r3, [pc, #120]	@ (8009e30 <UTIL_SEQ_WaitEvt+0x88>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dbe:	d102      	bne.n	8009dc6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	61fb      	str	r3, [r7, #28]
 8009dc4:	e005      	b.n	8009dd2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8009dc6:	4b1a      	ldr	r3, [pc, #104]	@ (8009e30 <UTIL_SEQ_WaitEvt+0x88>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8009dd2:	4b18      	ldr	r3, [pc, #96]	@ (8009e34 <UTIL_SEQ_WaitEvt+0x8c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8009dd8:	4a16      	ldr	r2, [pc, #88]	@ (8009e34 <UTIL_SEQ_WaitEvt+0x8c>)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8009dde:	e003      	b.n	8009de8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8009de0:	6879      	ldr	r1, [r7, #4]
 8009de2:	69f8      	ldr	r0, [r7, #28]
 8009de4:	f7f6 fc2c 	bl	8000640 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8009de8:	4b13      	ldr	r3, [pc, #76]	@ (8009e38 <UTIL_SEQ_WaitEvt+0x90>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4013      	ands	r3, r2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d0f5      	beq.n	8009de0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009df4:	4a0e      	ldr	r2, [pc, #56]	@ (8009e30 <UTIL_SEQ_WaitEvt+0x88>)
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8009dfe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009e00:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009e02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e04:	b672      	cpsid	i
}
 8009e06:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	43da      	mvns	r2, r3
 8009e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e38 <UTIL_SEQ_WaitEvt+0x90>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4013      	ands	r3, r2
 8009e12:	4a09      	ldr	r2, [pc, #36]	@ (8009e38 <UTIL_SEQ_WaitEvt+0x90>)
 8009e14:	6013      	str	r3, [r2, #0]
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f383 8810 	msr	PRIMASK, r3
}
 8009e20:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8009e22:	4a04      	ldr	r2, [pc, #16]	@ (8009e34 <UTIL_SEQ_WaitEvt+0x8c>)
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	6013      	str	r3, [r2, #0]
  return;
 8009e28:	bf00      	nop
}
 8009e2a:	3720      	adds	r7, #32
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}
 8009e30:	20000444 	.word	0x20000444
 8009e34:	20000440 	.word	0x20000440
 8009e38:	2000043c 	.word	0x2000043c

08009e3c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8009e44:	2300      	movs	r3, #0
 8009e46:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e52:	d204      	bcs.n	8009e5e <SEQ_BitPosition+0x22>
 8009e54:	2310      	movs	r3, #16
 8009e56:	73fb      	strb	r3, [r7, #15]
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	041b      	lsls	r3, r3, #16
 8009e5c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e64:	d205      	bcs.n	8009e72 <SEQ_BitPosition+0x36>
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
 8009e68:	3308      	adds	r3, #8
 8009e6a:	73fb      	strb	r3, [r7, #15]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e78:	d205      	bcs.n	8009e86 <SEQ_BitPosition+0x4a>
 8009e7a:	7bfb      	ldrb	r3, [r7, #15]
 8009e7c:	3304      	adds	r3, #4
 8009e7e:	73fb      	strb	r3, [r7, #15]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	011b      	lsls	r3, r3, #4
 8009e84:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	0f1b      	lsrs	r3, r3, #28
 8009e8a:	4a07      	ldr	r2, [pc, #28]	@ (8009ea8 <SEQ_BitPosition+0x6c>)
 8009e8c:	5cd2      	ldrb	r2, [r2, r3]
 8009e8e:	7bfb      	ldrb	r3, [r7, #15]
 8009e90:	4413      	add	r3, r2
 8009e92:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	f1c3 031f 	rsb	r3, r3, #31
 8009e9a:	b2db      	uxtb	r3, r3
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr
 8009ea8:	0800a268 	.word	0x0800a268

08009eac <memset>:
 8009eac:	4402      	add	r2, r0
 8009eae:	4603      	mov	r3, r0
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d100      	bne.n	8009eb6 <memset+0xa>
 8009eb4:	4770      	bx	lr
 8009eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eba:	e7f9      	b.n	8009eb0 <memset+0x4>

08009ebc <strlcpy>:
 8009ebc:	b510      	push	{r4, lr}
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	b962      	cbnz	r2, 8009edc <strlcpy+0x20>
 8009ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	d1fb      	bne.n	8009ec2 <strlcpy+0x6>
 8009eca:	e004      	b.n	8009ed6 <strlcpy+0x1a>
 8009ecc:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009ed0:	f800 4b01 	strb.w	r4, [r0], #1
 8009ed4:	b914      	cbnz	r4, 8009edc <strlcpy+0x20>
 8009ed6:	1a58      	subs	r0, r3, r1
 8009ed8:	3801      	subs	r0, #1
 8009eda:	bd10      	pop	{r4, pc}
 8009edc:	3a01      	subs	r2, #1
 8009ede:	d1f5      	bne.n	8009ecc <strlcpy+0x10>
 8009ee0:	7002      	strb	r2, [r0, #0]
 8009ee2:	e7ee      	b.n	8009ec2 <strlcpy+0x6>

08009ee4 <__libc_init_array>:
 8009ee4:	b570      	push	{r4, r5, r6, lr}
 8009ee6:	4d0d      	ldr	r5, [pc, #52]	@ (8009f1c <__libc_init_array+0x38>)
 8009ee8:	4c0d      	ldr	r4, [pc, #52]	@ (8009f20 <__libc_init_array+0x3c>)
 8009eea:	1b64      	subs	r4, r4, r5
 8009eec:	10a4      	asrs	r4, r4, #2
 8009eee:	2600      	movs	r6, #0
 8009ef0:	42a6      	cmp	r6, r4
 8009ef2:	d109      	bne.n	8009f08 <__libc_init_array+0x24>
 8009ef4:	4d0b      	ldr	r5, [pc, #44]	@ (8009f24 <__libc_init_array+0x40>)
 8009ef6:	4c0c      	ldr	r4, [pc, #48]	@ (8009f28 <__libc_init_array+0x44>)
 8009ef8:	f000 f868 	bl	8009fcc <_init>
 8009efc:	1b64      	subs	r4, r4, r5
 8009efe:	10a4      	asrs	r4, r4, #2
 8009f00:	2600      	movs	r6, #0
 8009f02:	42a6      	cmp	r6, r4
 8009f04:	d105      	bne.n	8009f12 <__libc_init_array+0x2e>
 8009f06:	bd70      	pop	{r4, r5, r6, pc}
 8009f08:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f0c:	4798      	blx	r3
 8009f0e:	3601      	adds	r6, #1
 8009f10:	e7ee      	b.n	8009ef0 <__libc_init_array+0xc>
 8009f12:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f16:	4798      	blx	r3
 8009f18:	3601      	adds	r6, #1
 8009f1a:	e7f2      	b.n	8009f02 <__libc_init_array+0x1e>
 8009f1c:	0800a280 	.word	0x0800a280
 8009f20:	0800a280 	.word	0x0800a280
 8009f24:	0800a280 	.word	0x0800a280
 8009f28:	0800a284 	.word	0x0800a284

08009f2c <memcpy>:
 8009f2c:	440a      	add	r2, r1
 8009f2e:	4291      	cmp	r1, r2
 8009f30:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f34:	d100      	bne.n	8009f38 <memcpy+0xc>
 8009f36:	4770      	bx	lr
 8009f38:	b510      	push	{r4, lr}
 8009f3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f42:	4291      	cmp	r1, r2
 8009f44:	d1f9      	bne.n	8009f3a <memcpy+0xe>
 8009f46:	bd10      	pop	{r4, pc}

08009f48 <ceilf>:
 8009f48:	ee10 3a10 	vmov	r3, s0
 8009f4c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009f50:	3a7f      	subs	r2, #127	@ 0x7f
 8009f52:	2a16      	cmp	r2, #22
 8009f54:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009f58:	dc2a      	bgt.n	8009fb0 <ceilf+0x68>
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	da11      	bge.n	8009f82 <ceilf+0x3a>
 8009f5e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009fc4 <ceilf+0x7c>
 8009f62:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009f66:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f6e:	dd05      	ble.n	8009f7c <ceilf+0x34>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	db23      	blt.n	8009fbc <ceilf+0x74>
 8009f74:	2900      	cmp	r1, #0
 8009f76:	bf18      	it	ne
 8009f78:	f04f 537e 	movne.w	r3, #1065353216	@ 0x3f800000
 8009f7c:	ee00 3a10 	vmov	s0, r3
 8009f80:	4770      	bx	lr
 8009f82:	4911      	ldr	r1, [pc, #68]	@ (8009fc8 <ceilf+0x80>)
 8009f84:	4111      	asrs	r1, r2
 8009f86:	420b      	tst	r3, r1
 8009f88:	d0fa      	beq.n	8009f80 <ceilf+0x38>
 8009f8a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009fc4 <ceilf+0x7c>
 8009f8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009f92:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9a:	ddef      	ble.n	8009f7c <ceilf+0x34>
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	bfc2      	ittt	gt
 8009fa0:	f44f 0000 	movgt.w	r0, #8388608	@ 0x800000
 8009fa4:	fa40 f202 	asrgt.w	r2, r0, r2
 8009fa8:	189b      	addgt	r3, r3, r2
 8009faa:	ea23 0301 	bic.w	r3, r3, r1
 8009fae:	e7e5      	b.n	8009f7c <ceilf+0x34>
 8009fb0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009fb4:	d3e4      	bcc.n	8009f80 <ceilf+0x38>
 8009fb6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009fba:	4770      	bx	lr
 8009fbc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009fc0:	e7dc      	b.n	8009f7c <ceilf+0x34>
 8009fc2:	bf00      	nop
 8009fc4:	7149f2ca 	.word	0x7149f2ca
 8009fc8:	007fffff 	.word	0x007fffff

08009fcc <_init>:
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fce:	bf00      	nop
 8009fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fd2:	bc08      	pop	{r3}
 8009fd4:	469e      	mov	lr, r3
 8009fd6:	4770      	bx	lr

08009fd8 <_fini>:
 8009fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fda:	bf00      	nop
 8009fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fde:	bc08      	pop	{r3}
 8009fe0:	469e      	mov	lr, r3
 8009fe2:	4770      	bx	lr
