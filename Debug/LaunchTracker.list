
LaunchTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009724  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08009860  08009860  0000a860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009ae8  08009ae8  0000aae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009af0  08009af0  0000aaf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009af4  08009af4  0000aaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000034  20000008  08009af8  0000b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  2000003c  08009b2c  0000b03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000007c  08009b69  0000b07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  20000090  08009b7a  0000b090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004a8  08009b7a  0000b4a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000ba67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000c000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08009b7a  0000b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002f81f  00000000  00000000  0000ba97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000674a  00000000  00000000  0003b2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002c00  00000000  00000000  00041a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000021dc  00000000  00000000  00044600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002855c  00000000  00000000  000467dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00032e40  00000000  00000000  0006ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000db08c  00000000  00000000  000a1b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0017cc04  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b858  00000000  00000000  0017cc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  001884a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000090 	.word	0x20000090
 8000158:	00000000 	.word	0x00000000
 800015c:	08009848 	.word	0x08009848

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000094 	.word	0x20000094
 8000178:	08009848 	.word	0x08009848

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000192:	4b15      	ldr	r3, [pc, #84]	@ (80001e8 <APPD_EnableCPU2+0x5c>)
 8000194:	881a      	ldrh	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <APPD_EnableCPU2+0x60>)
 8000198:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800019a:	4b15      	ldr	r3, [pc, #84]	@ (80001f0 <APPD_EnableCPU2+0x64>)
 800019c:	881a      	ldrh	r2, [r3, #0]
 800019e:	4b13      	ldr	r3, [pc, #76]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a0:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80001a2:	4b14      	ldr	r3, [pc, #80]	@ (80001f4 <APPD_EnableCPU2+0x68>)
 80001a4:	881a      	ldrh	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a8:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80001aa:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <APPD_EnableCPU2+0x6c>)
 80001ac:	881a      	ldrh	r2, [r3, #0]
 80001ae:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b0:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80001b2:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <APPD_EnableCPU2+0x70>)
 80001b4:	881a      	ldrh	r2, [r3, #0]
 80001b6:	4b0d      	ldr	r3, [pc, #52]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b8:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80001ba:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <APPD_EnableCPU2+0x74>)
 80001bc:	1d3c      	adds	r4, r7, #4
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	c403      	stmia	r4!, {r0, r1}
 80001ca:	8022      	strh	r2, [r4, #0]
 80001cc:	3402      	adds	r4, #2
 80001ce:	0c13      	lsrs	r3, r2, #16
 80001d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001d2:	f008 f8e3 	bl	800839c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f007 fb46 	bl	800786a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001de:	bf00      	nop
}
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000008 	.word	0x20000008
 80001ec:	200301e8 	.word	0x200301e8
 80001f0:	2000000a 	.word	0x2000000a
 80001f4:	2000000c 	.word	0x2000000c
 80001f8:	2000000e 	.word	0x2000000e
 80001fc:	20000010 	.word	0x20000010
 8000200:	08009860 	.word	0x08009860

08000204 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 800020e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000212:	f023 0207 	bic.w	r2, r3, #7
 8000216:	4905      	ldr	r1, [pc, #20]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4313      	orrs	r3, r2
 800021c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	58000400 	.word	0x58000400

08000230 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 800023a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800023e:	4905      	ldr	r1, [pc, #20]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4313      	orrs	r3, r2
 8000244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	58000800 	.word	0x58000800

08000258 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000266:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800026e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000272:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800027e:	4313      	orrs	r3, r2
 8000280:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	cafecafe 	.word	0xcafecafe

08000294 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800029c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80002a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	608b      	str	r3, [r1, #8]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <LL_DBGMCU_GetDeviceID+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e0042000 	.word	0xe0042000

080002d8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <LL_DBGMCU_GetRevisionID+0x18>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	b29b      	uxth	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e0042000 	.word	0xe0042000

080002f4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	22ff      	movs	r2, #255	@ 0xff
 8000300:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800030e:	b480      	push	{r7}
 8000310:	b083      	sub	sp, #12
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	22ca      	movs	r2, #202	@ 0xca
 800031a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2253      	movs	r2, #83	@ 0x53
 8000320:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f023 0207 	bic.w	r2, r3, #7
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	431a      	orrs	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	609a      	str	r2, [r3, #8]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <MX_APPE_Config+0x18>)
 800035a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800035e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000360:	f000 f81d 	bl	800039e <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000364:	f000 f822 	bl	80003ac <Config_HSE>

  return;
 8000368:	bf00      	nop
}
 800036a:	bd80      	pop	{r7, pc}
 800036c:	58004000 	.word	0x58004000

08000370 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000374:	f000 f82e 	bl	80003d4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000378:	f000 f844 	bl	8000404 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800037c:	4903      	ldr	r1, [pc, #12]	@ (800038c <MX_APPE_Init+0x1c>)
 800037e:	2000      	movs	r0, #0
 8000380:	f000 fd8c 	bl	8000e9c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000384:	f000 f84e 	bl	8000424 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000388:	bf00      	nop
}
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200001dc 	.word	0x200001dc

08000390 <Init_Exti>:

void Init_Exti(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000394:	2050      	movs	r0, #80	@ 0x50
 8000396:	f7ff ff4b 	bl	8000230 <LL_EXTI_EnableIT_32_63>

  return;
 800039a:	bf00      	nop
}
 800039c:	bd80      	pop	{r7, pc}

0800039e <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80003a2:	bf00      	nop
}
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f008 f87e 	bl	80084b4 <OTP_Read>
 80003b8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d005      	beq.n	80003cc <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	799b      	ldrb	r3, [r3, #6]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ff47 	bl	8000258 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
}
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <System_Init>:

static void System_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  Init_Exti();
 80003d8:	f7ff ffda 	bl	8000390 <Init_Exti>

  Init_Rtc();
 80003dc:	f000 f802 	bl	80003e4 <Init_Rtc>

  return;
 80003e0:	bf00      	nop
}
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80003e8:	4805      	ldr	r0, [pc, #20]	@ (8000400 <Init_Rtc+0x1c>)
 80003ea:	f7ff ff90 	bl	800030e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80003ee:	2100      	movs	r1, #0
 80003f0:	4803      	ldr	r0, [pc, #12]	@ (8000400 <Init_Rtc+0x1c>)
 80003f2:	f7ff ff9c 	bl	800032e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80003f6:	4802      	ldr	r0, [pc, #8]	@ (8000400 <Init_Rtc+0x1c>)
 80003f8:	f7ff ff7c 	bl	80002f4 <LL_RTC_EnableWriteProtection>

  return;
 80003fc:	bf00      	nop
}
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40002800 	.word	0x40002800

08000404 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000408:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800040c:	f7ff ff42 	bl	8000294 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000410:	f008 ff2e 	bl	8009270 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000414:	2004      	movs	r0, #4
 8000416:	f7ff fef5 	bl	8000204 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800041a:	f003 fddb 	bl	8003fd4 <HAL_PWREx_EnableSRAMRetention>

  return;
 800041e:	bf00      	nop
}
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800042a:	f007 fe01 	bl	8008030 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800042e:	4a11      	ldr	r2, [pc, #68]	@ (8000474 <appe_Tl_Init+0x50>)
 8000430:	2100      	movs	r1, #0
 8000432:	2008      	movs	r0, #8
 8000434:	f009 f890 	bl	8009558 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <appe_Tl_Init+0x54>)
 800043a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800043c:	4b0f      	ldr	r3, [pc, #60]	@ (800047c <appe_Tl_Init+0x58>)
 800043e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000440:	463b      	mov	r3, r7
 8000442:	4619      	mov	r1, r3
 8000444:	480e      	ldr	r0, [pc, #56]	@ (8000480 <appe_Tl_Init+0x5c>)
 8000446:	f007 fcb5 	bl	8007db4 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <appe_Tl_Init+0x60>)
 800044c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <appe_Tl_Init+0x64>)
 8000450:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <appe_Tl_Init+0x68>)
 8000454:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000456:	f240 533c 	movw	r3, #1340	@ 0x53c
 800045a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800045c:	f107 0308 	add.w	r3, r7, #8
 8000460:	4618      	mov	r0, r3
 8000462:	f007 ff27 	bl	80082b4 <TL_MM_Init>

  TL_Enable();
 8000466:	f007 fddd 	bl	8008024 <TL_Enable>

  return;
 800046a:	bf00      	nop
}
 800046c:	3720      	adds	r7, #32
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	08007ded 	.word	0x08007ded
 8000478:	20030734 	.word	0x20030734
 800047c:	08000491 	.word	0x08000491
 8000480:	080004a9 	.word	0x080004a9
 8000484:	2003094c 	.word	0x2003094c
 8000488:	20030840 	.word	0x20030840
 800048c:	200301f8 	.word	0x200301f8

08000490 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800049a:	bf00      	nop
}
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	330b      	adds	r3, #11
 80004b6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80004c2:	2b07      	cmp	r3, #7
 80004c4:	d81f      	bhi.n	8000506 <APPE_SysUserEvtRx+0x5e>
 80004c6:	a201      	add	r2, pc, #4	@ (adr r2, 80004cc <APPE_SysUserEvtRx+0x24>)
 80004c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004cc:	080004ed 	.word	0x080004ed
 80004d0:	080004ff 	.word	0x080004ff
 80004d4:	08000507 	.word	0x08000507
 80004d8:	08000507 	.word	0x08000507
 80004dc:	08000507 	.word	0x08000507
 80004e0:	08000507 	.word	0x08000507
 80004e4:	08000507 	.word	0x08000507
 80004e8:	08000507 	.word	0x08000507
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4618      	mov	r0, r3
 80004f2:	f007 fa15 	bl	8007920 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 f81b 	bl	8000532 <APPE_SysEvtReadyProcessing>
    break;
 80004fc:	e004      	b.n	8000508 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 f806 	bl	8000510 <APPE_SysEvtError>
    break;
 8000504:	e000      	b.n	8000508 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000506:	bf00      	nop
  }

  return;
 8000508:	bf00      	nop
}
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	330b      	adds	r3, #11
 800051e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	3302      	adds	r3, #2
 8000524:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000526:	bf00      	nop
}
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b08a      	sub	sp, #40	@ 0x28
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	330b      	adds	r3, #11
 8000556:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	3302      	adds	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d11d      	bne.n	80005a2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000566:	f7ff fe11 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800056a:	230f      	movs	r3, #15
 800056c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800056e:	237f      	movs	r3, #127	@ 0x7f
 8000570:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000572:	f7ff feb1 	bl	80002d8 <LL_DBGMCU_GetRevisionID>
 8000576:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057a:	b29b      	uxth	r3, r3
 800057c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800057e:	f7ff fe9d 	bl	80002bc <LL_DBGMCU_GetDeviceID>
 8000582:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	b29b      	uxth	r3, r3
 8000588:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4618      	mov	r0, r3
 8000590:	f007 f9b1 	bl	80078f6 <SHCI_C2_Config>

    APP_BLE_Init();
 8000594:	f008 f898 	bl	80086c8 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000598:	2100      	movs	r1, #0
 800059a:	2001      	movs	r0, #1
 800059c:	f008 fe7a 	bl	8009294 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80005a0:	e007      	b.n	80005b2 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d103      	bne.n	80005b2 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
  return;
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
}
 80005b4:	3728      	adds	r7, #40	@ 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
 80005c0:	4603      	mov	r3, r0
 80005c2:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005ca:	d00b      	beq.n	80005e4 <HAL_GPIO_EXTI_Callback+0x2a>
 80005cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80005d0:	dc0f      	bgt.n	80005f2 <HAL_GPIO_EXTI_Callback+0x38>
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	d00a      	beq.n	80005ec <HAL_GPIO_EXTI_Callback+0x32>
 80005d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80005da:	d10a      	bne.n	80005f2 <HAL_GPIO_EXTI_Callback+0x38>
	case ACC_IRQ1_Pin:
		kx134IRQHandler(KX134_IRQ_INT1);
 80005dc:	2000      	movs	r0, #0
 80005de:	f002 f885 	bl	80026ec <kx134IRQHandler>
		break;
 80005e2:	e006      	b.n	80005f2 <HAL_GPIO_EXTI_Callback+0x38>
	case ACC_IRQ2_Pin:
		kx134IRQHandler(KX134_IRQ_INT2);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f002 f881 	bl	80026ec <kx134IRQHandler>
		break;
 80005ea:	e002      	b.n	80005f2 <HAL_GPIO_EXTI_Callback+0x38>
	case PMIC_IRQ_Pin:
		adp5360IRQHandler();
 80005ec:	f001 ff2e 	bl	800244c <adp5360IRQHandler>
		break;
 80005f0:	bf00      	nop
	}
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}

080005fa <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80005fe:	f04f 30ff 	mov.w	r0, #4294967295
 8000602:	f008 fead 	bl	8009360 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}

0800060a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800060a:	b580      	push	{r7, lr}
 800060c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 800060e:	f008 fe71 	bl	80092f4 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8000612:	bf00      	nop
}
 8000614:	bd80      	pop	{r7, pc}

08000616 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000620:	f04f 30ff 	mov.w	r0, #4294967295
 8000624:	f008 fe9c 	bl	8009360 <UTIL_SEQ_Run>
  return;
 8000628:	bf00      	nop
}
 800062a:	3708      	adds	r7, #8
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000638:	2100      	movs	r1, #0
 800063a:	2008      	movs	r0, #8
 800063c:	f008 ffae 	bl	800959c <UTIL_SEQ_SetTask>
  return;
 8000640:	bf00      	nop
}
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000650:	2002      	movs	r0, #2
 8000652:	f009 f80f 	bl	8009674 <UTIL_SEQ_SetEvt>
  return;
 8000656:	bf00      	nop
}
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
 8000664:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000666:	2002      	movs	r0, #2
 8000668:	f009 f824 	bl	80096b4 <UTIL_SEQ_WaitEvt>
  return;
 800066c:	bf00      	nop
}
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <LL_EXTI_EnableIT_0_31>:
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <LL_EXTI_EnableIT_0_31+0x24>)
 800067e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000682:	4905      	ldr	r1, [pc, #20]	@ (8000698 <LL_EXTI_EnableIT_0_31+0x24>)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4313      	orrs	r3, r2
 8000688:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	58000800 	.word	0x58000800

0800069c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80006a4:	4b05      	ldr	r3, [pc, #20]	@ (80006bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	4904      	ldr	r1, [pc, #16]	@ (80006bc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	600b      	str	r3, [r1, #0]

}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	58000800 	.word	0x58000800

080006c0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006c6:	4b0d      	ldr	r3, [pc, #52]	@ (80006fc <ReadRtcSsrValue+0x3c>)
 80006c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <ReadRtcSsrValue+0x3c>)
 80006d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80006d6:	e005      	b.n	80006e4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <ReadRtcSsrValue+0x3c>)
 80006de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d1f5      	bne.n	80006d8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80006ec:	683b      	ldr	r3, [r7, #0]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40002800 	.word	0x40002800

08000700 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000700:	b480      	push	{r7}
 8000702:	b085      	sub	sp, #20
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	460a      	mov	r2, r1
 800070a:	71fb      	strb	r3, [r7, #7]
 800070c:	4613      	mov	r3, r2
 800070e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000710:	79ba      	ldrb	r2, [r7, #6]
 8000712:	491d      	ldr	r1, [pc, #116]	@ (8000788 <LinkTimerAfter+0x88>)
 8000714:	4613      	mov	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4413      	add	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	440b      	add	r3, r1
 800071e:	3315      	adds	r3, #21
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000724:	7bfb      	ldrb	r3, [r7, #15]
 8000726:	2b06      	cmp	r3, #6
 8000728:	d009      	beq.n	800073e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800072a:	7bfa      	ldrb	r2, [r7, #15]
 800072c:	4916      	ldr	r1, [pc, #88]	@ (8000788 <LinkTimerAfter+0x88>)
 800072e:	4613      	mov	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4413      	add	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	440b      	add	r3, r1
 8000738:	3314      	adds	r3, #20
 800073a:	79fa      	ldrb	r2, [r7, #7]
 800073c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800073e:	79fa      	ldrb	r2, [r7, #7]
 8000740:	4911      	ldr	r1, [pc, #68]	@ (8000788 <LinkTimerAfter+0x88>)
 8000742:	4613      	mov	r3, r2
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	4413      	add	r3, r2
 8000748:	00db      	lsls	r3, r3, #3
 800074a:	440b      	add	r3, r1
 800074c:	3315      	adds	r3, #21
 800074e:	7bfa      	ldrb	r2, [r7, #15]
 8000750:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000752:	79fa      	ldrb	r2, [r7, #7]
 8000754:	490c      	ldr	r1, [pc, #48]	@ (8000788 <LinkTimerAfter+0x88>)
 8000756:	4613      	mov	r3, r2
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	4413      	add	r3, r2
 800075c:	00db      	lsls	r3, r3, #3
 800075e:	440b      	add	r3, r1
 8000760:	3314      	adds	r3, #20
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000766:	79ba      	ldrb	r2, [r7, #6]
 8000768:	4907      	ldr	r1, [pc, #28]	@ (8000788 <LinkTimerAfter+0x88>)
 800076a:	4613      	mov	r3, r2
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	4413      	add	r3, r2
 8000770:	00db      	lsls	r3, r3, #3
 8000772:	440b      	add	r3, r1
 8000774:	3315      	adds	r3, #21
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	701a      	strb	r2, [r3, #0]

  return;
 800077a:	bf00      	nop
}
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	200000ac 	.word	0x200000ac

0800078c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <LinkTimerBefore+0xb8>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	429a      	cmp	r2, r3
 80007a6:	d032      	beq.n	800080e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 80007a8:	79ba      	ldrb	r2, [r7, #6]
 80007aa:	4927      	ldr	r1, [pc, #156]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007ac:	4613      	mov	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	4413      	add	r3, r2
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	440b      	add	r3, r1
 80007b6:	3314      	adds	r3, #20
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	4922      	ldr	r1, [pc, #136]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	440b      	add	r3, r1
 80007ca:	3315      	adds	r3, #21
 80007cc:	79fa      	ldrb	r2, [r7, #7]
 80007ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80007d0:	79fa      	ldrb	r2, [r7, #7]
 80007d2:	491d      	ldr	r1, [pc, #116]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007d4:	4613      	mov	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	4413      	add	r3, r2
 80007da:	00db      	lsls	r3, r3, #3
 80007dc:	440b      	add	r3, r1
 80007de:	3315      	adds	r3, #21
 80007e0:	79ba      	ldrb	r2, [r7, #6]
 80007e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80007e4:	79fa      	ldrb	r2, [r7, #7]
 80007e6:	4918      	ldr	r1, [pc, #96]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007e8:	4613      	mov	r3, r2
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	4413      	add	r3, r2
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	440b      	add	r3, r1
 80007f2:	3314      	adds	r3, #20
 80007f4:	7bfa      	ldrb	r2, [r7, #15]
 80007f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007f8:	79ba      	ldrb	r2, [r7, #6]
 80007fa:	4913      	ldr	r1, [pc, #76]	@ (8000848 <LinkTimerBefore+0xbc>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	4413      	add	r3, r2
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	440b      	add	r3, r1
 8000806:	3314      	adds	r3, #20
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 800080c:	e014      	b.n	8000838 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	490d      	ldr	r1, [pc, #52]	@ (8000848 <LinkTimerBefore+0xbc>)
 8000812:	4613      	mov	r3, r2
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	4413      	add	r3, r2
 8000818:	00db      	lsls	r3, r3, #3
 800081a:	440b      	add	r3, r1
 800081c:	3315      	adds	r3, #21
 800081e:	79ba      	ldrb	r2, [r7, #6]
 8000820:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000822:	79ba      	ldrb	r2, [r7, #6]
 8000824:	4908      	ldr	r1, [pc, #32]	@ (8000848 <LinkTimerBefore+0xbc>)
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	3314      	adds	r3, #20
 8000832:	79fa      	ldrb	r2, [r7, #7]
 8000834:	701a      	strb	r2, [r3, #0]
  return;
 8000836:	bf00      	nop
}
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2000013c 	.word	0x2000013c
 8000848:	200000ac 	.word	0x200000ac

0800084c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b084      	sub	sp, #16
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000856:	4b4e      	ldr	r3, [pc, #312]	@ (8000990 <linkTimer+0x144>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b06      	cmp	r3, #6
 800085e:	d118      	bne.n	8000892 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000860:	4b4b      	ldr	r3, [pc, #300]	@ (8000990 <linkTimer+0x144>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4b4b      	ldr	r3, [pc, #300]	@ (8000994 <linkTimer+0x148>)
 8000868:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800086a:	4a49      	ldr	r2, [pc, #292]	@ (8000990 <linkTimer+0x144>)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000870:	79fa      	ldrb	r2, [r7, #7]
 8000872:	4949      	ldr	r1, [pc, #292]	@ (8000998 <linkTimer+0x14c>)
 8000874:	4613      	mov	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4413      	add	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	440b      	add	r3, r1
 800087e:	3315      	adds	r3, #21
 8000880:	2206      	movs	r2, #6
 8000882:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000884:	4b45      	ldr	r3, [pc, #276]	@ (800099c <linkTimer+0x150>)
 8000886:	f04f 32ff 	mov.w	r2, #4294967295
 800088a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	81fb      	strh	r3, [r7, #14]
 8000890:	e078      	b.n	8000984 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000892:	f000 f909 	bl	8000aa8 <ReturnTimeElapsed>
 8000896:	4603      	mov	r3, r0
 8000898:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	493e      	ldr	r1, [pc, #248]	@ (8000998 <linkTimer+0x14c>)
 800089e:	4613      	mov	r3, r2
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	4413      	add	r3, r2
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	440b      	add	r3, r1
 80008a8:	3308      	adds	r3, #8
 80008aa:	6819      	ldr	r1, [r3, #0]
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	79fa      	ldrb	r2, [r7, #7]
 80008b0:	4419      	add	r1, r3
 80008b2:	4839      	ldr	r0, [pc, #228]	@ (8000998 <linkTimer+0x14c>)
 80008b4:	4613      	mov	r3, r2
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	4413      	add	r3, r2
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	4403      	add	r3, r0
 80008be:	3308      	adds	r3, #8
 80008c0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80008c2:	79fa      	ldrb	r2, [r7, #7]
 80008c4:	4934      	ldr	r1, [pc, #208]	@ (8000998 <linkTimer+0x14c>)
 80008c6:	4613      	mov	r3, r2
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	4413      	add	r3, r2
 80008cc:	00db      	lsls	r3, r3, #3
 80008ce:	440b      	add	r3, r1
 80008d0:	3308      	adds	r3, #8
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80008d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000990 <linkTimer+0x144>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	4619      	mov	r1, r3
 80008de:	4a2e      	ldr	r2, [pc, #184]	@ (8000998 <linkTimer+0x14c>)
 80008e0:	460b      	mov	r3, r1
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	440b      	add	r3, r1
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	4413      	add	r3, r2
 80008ea:	3308      	adds	r3, #8
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	68ba      	ldr	r2, [r7, #8]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d337      	bcc.n	8000964 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80008f4:	4b26      	ldr	r3, [pc, #152]	@ (8000990 <linkTimer+0x144>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80008fa:	7b7a      	ldrb	r2, [r7, #13]
 80008fc:	4926      	ldr	r1, [pc, #152]	@ (8000998 <linkTimer+0x14c>)
 80008fe:	4613      	mov	r3, r2
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	4413      	add	r3, r2
 8000904:	00db      	lsls	r3, r3, #3
 8000906:	440b      	add	r3, r1
 8000908:	3315      	adds	r3, #21
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800090e:	e013      	b.n	8000938 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000910:	7b7a      	ldrb	r2, [r7, #13]
 8000912:	4921      	ldr	r1, [pc, #132]	@ (8000998 <linkTimer+0x14c>)
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	440b      	add	r3, r1
 800091e:	3315      	adds	r3, #21
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000924:	7b7a      	ldrb	r2, [r7, #13]
 8000926:	491c      	ldr	r1, [pc, #112]	@ (8000998 <linkTimer+0x14c>)
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	440b      	add	r3, r1
 8000932:	3315      	adds	r3, #21
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000938:	7b3b      	ldrb	r3, [r7, #12]
 800093a:	2b06      	cmp	r3, #6
 800093c:	d00b      	beq.n	8000956 <linkTimer+0x10a>
 800093e:	7b3a      	ldrb	r2, [r7, #12]
 8000940:	4915      	ldr	r1, [pc, #84]	@ (8000998 <linkTimer+0x14c>)
 8000942:	4613      	mov	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	4413      	add	r3, r2
 8000948:	00db      	lsls	r3, r3, #3
 800094a:	440b      	add	r3, r1
 800094c:	3308      	adds	r3, #8
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	429a      	cmp	r2, r3
 8000954:	d2dc      	bcs.n	8000910 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000956:	7b7a      	ldrb	r2, [r7, #13]
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4611      	mov	r1, r2
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fecf 	bl	8000700 <LinkTimerAfter>
 8000962:	e00f      	b.n	8000984 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000964:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <linkTimer+0x144>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2da      	uxtb	r2, r3
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff0c 	bl	800078c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000974:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <linkTimer+0x144>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <linkTimer+0x148>)
 800097c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800097e:	4a04      	ldr	r2, [pc, #16]	@ (8000990 <linkTimer+0x144>)
 8000980:	79fb      	ldrb	r3, [r7, #7]
 8000982:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000984:	89fb      	ldrh	r3, [r7, #14]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000013c 	.word	0x2000013c
 8000994:	2000013d 	.word	0x2000013d
 8000998:	200000ac 	.word	0x200000ac
 800099c:	20000140 	.word	0x20000140

080009a0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	460a      	mov	r2, r1
 80009aa:	71fb      	strb	r3, [r7, #7]
 80009ac:	4613      	mov	r3, r2
 80009ae:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80009b0:	4b39      	ldr	r3, [pc, #228]	@ (8000a98 <UnlinkTimer+0xf8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	79fa      	ldrb	r2, [r7, #7]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d111      	bne.n	80009e0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80009bc:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <UnlinkTimer+0xf8>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b36      	ldr	r3, [pc, #216]	@ (8000a9c <UnlinkTimer+0xfc>)
 80009c4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	4935      	ldr	r1, [pc, #212]	@ (8000aa0 <UnlinkTimer+0x100>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	440b      	add	r3, r1
 80009d4:	3315      	adds	r3, #21
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4b2f      	ldr	r3, [pc, #188]	@ (8000a98 <UnlinkTimer+0xf8>)
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	e03e      	b.n	8000a5e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80009e0:	79fa      	ldrb	r2, [r7, #7]
 80009e2:	492f      	ldr	r1, [pc, #188]	@ (8000aa0 <UnlinkTimer+0x100>)
 80009e4:	4613      	mov	r3, r2
 80009e6:	005b      	lsls	r3, r3, #1
 80009e8:	4413      	add	r3, r2
 80009ea:	00db      	lsls	r3, r3, #3
 80009ec:	440b      	add	r3, r1
 80009ee:	3314      	adds	r3, #20
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80009f4:	79fa      	ldrb	r2, [r7, #7]
 80009f6:	492a      	ldr	r1, [pc, #168]	@ (8000aa0 <UnlinkTimer+0x100>)
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	440b      	add	r3, r1
 8000a02:	3315      	adds	r3, #21
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000a08:	79f9      	ldrb	r1, [r7, #7]
 8000a0a:	7bfa      	ldrb	r2, [r7, #15]
 8000a0c:	4824      	ldr	r0, [pc, #144]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a0e:	460b      	mov	r3, r1
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	440b      	add	r3, r1
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	4403      	add	r3, r0
 8000a18:	3315      	adds	r3, #21
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	b2d8      	uxtb	r0, r3
 8000a1e:	4920      	ldr	r1, [pc, #128]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	440b      	add	r3, r1
 8000a2a:	3315      	adds	r3, #21
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a30:	7bbb      	ldrb	r3, [r7, #14]
 8000a32:	2b06      	cmp	r3, #6
 8000a34:	d013      	beq.n	8000a5e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000a36:	79f9      	ldrb	r1, [r7, #7]
 8000a38:	7bba      	ldrb	r2, [r7, #14]
 8000a3a:	4819      	ldr	r0, [pc, #100]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	440b      	add	r3, r1
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	4403      	add	r3, r0
 8000a46:	3314      	adds	r3, #20
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	b2d8      	uxtb	r0, r3
 8000a4c:	4914      	ldr	r1, [pc, #80]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	00db      	lsls	r3, r3, #3
 8000a56:	440b      	add	r3, r1
 8000a58:	3314      	adds	r3, #20
 8000a5a:	4602      	mov	r2, r0
 8000a5c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	490f      	ldr	r1, [pc, #60]	@ (8000aa0 <UnlinkTimer+0x100>)
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	440b      	add	r3, r1
 8000a6c:	330c      	adds	r3, #12
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a72:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <UnlinkTimer+0xf8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b06      	cmp	r3, #6
 8000a7a:	d107      	bne.n	8000a8c <UnlinkTimer+0xec>
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d104      	bne.n	8000a8c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <UnlinkTimer+0x104>)
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
}
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	2000013c 	.word	0x2000013c
 8000a9c:	2000013d 	.word	0x2000013d
 8000aa0:	200000ac 	.word	0x200000ac
 8000aa4:	20000140 	.word	0x20000140

08000aa8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <ReturnTimeElapsed+0x70>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ab6:	d026      	beq.n	8000b06 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000ab8:	f7ff fe02 	bl	80006c0 <ReadRtcSsrValue>
 8000abc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000abe:	4b16      	ldr	r3, [pc, #88]	@ (8000b18 <ReturnTimeElapsed+0x70>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d805      	bhi.n	8000ad4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000ac8:	4b13      	ldr	r3, [pc, #76]	@ (8000b18 <ReturnTimeElapsed+0x70>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	e00a      	b.n	8000aea <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <ReturnTimeElapsed+0x74>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b18 <ReturnTimeElapsed+0x70>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <ReturnTimeElapsed+0x78>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	fb02 f303 	mul.w	r3, r2, r3
 8000af6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <ReturnTimeElapsed+0x7c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	40d3      	lsrs	r3, r2
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	e001      	b.n	8000b0a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	b29b      	uxth	r3, r3
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000140 	.word	0x20000140
 8000b1c:	20000148 	.word	0x20000148
 8000b20:	20000146 	.word	0x20000146
 8000b24:	20000145 	.word	0x20000145

08000b28 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000b32:	88fb      	ldrh	r3, [r7, #6]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d108      	bne.n	8000b4a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b38:	f7ff fdc2 	bl	80006c0 <ReadRtcSsrValue>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	4a21      	ldr	r2, [pc, #132]	@ (8000bc4 <RestartWakeupCounter+0x9c>)
 8000b40:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b42:	2003      	movs	r0, #3
 8000b44:	f002 f885 	bl	8002c52 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b48:	e039      	b.n	8000bbe <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d803      	bhi.n	8000b58 <RestartWakeupCounter+0x30>
 8000b50:	4b1d      	ldr	r3, [pc, #116]	@ (8000bc8 <RestartWakeupCounter+0xa0>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d002      	beq.n	8000b5e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	3b01      	subs	r3, #1
 8000b5c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000b5e:	bf00      	nop
 8000b60:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68db      	ldr	r3, [r3, #12]
 8000b66:	f003 0304 	and.w	r3, r3, #4
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f8      	beq.n	8000b60 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b6e:	4b17      	ldr	r3, [pc, #92]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	b2da      	uxtb	r2, r3
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000b7e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <RestartWakeupCounter+0xa8>)
 8000b82:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b86:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f002 f870 	bl	8002c6e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <RestartWakeupCounter+0xac>)
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	0c1b      	lsrs	r3, r3, #16
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	88fa      	ldrh	r2, [r7, #6]
 8000b98:	490e      	ldr	r1, [pc, #56]	@ (8000bd4 <RestartWakeupCounter+0xac>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b9e:	f7ff fd8f 	bl	80006c0 <ReadRtcSsrValue>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	4a07      	ldr	r2, [pc, #28]	@ (8000bc4 <RestartWakeupCounter+0x9c>)
 8000ba6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <RestartWakeupCounter+0xa4>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000bb6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000bb8:	f3af 8000 	nop.w
  return ;
 8000bbc:	bf00      	nop
}
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000140 	.word	0x20000140
 8000bc8:	20000145 	.word	0x20000145
 8000bcc:	200001dc 	.word	0x200001dc
 8000bd0:	58000800 	.word	0x58000800
 8000bd4:	40002800 	.word	0x40002800

08000bd8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000bde:	4b45      	ldr	r3, [pc, #276]	@ (8000cf4 <RescheduleTimerList+0x11c>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bea:	d107      	bne.n	8000bfc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000bec:	bf00      	nop
 8000bee:	4b42      	ldr	r3, [pc, #264]	@ (8000cf8 <RescheduleTimerList+0x120>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d1f8      	bne.n	8000bee <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf8 <RescheduleTimerList+0x120>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <RescheduleTimerList+0x120>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c0a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	@ (8000cfc <RescheduleTimerList+0x124>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000c12:	7bfa      	ldrb	r2, [r7, #15]
 8000c14:	493a      	ldr	r1, [pc, #232]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000c26:	f7ff ff3f 	bl	8000aa8 <ReturnTimeElapsed>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	68ba      	ldr	r2, [r7, #8]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d205      	bcs.n	8000c42 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c3a:	4b32      	ldr	r3, [pc, #200]	@ (8000d04 <RescheduleTimerList+0x12c>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e04d      	b.n	8000cde <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	4a30      	ldr	r2, [pc, #192]	@ (8000d08 <RescheduleTimerList+0x130>)
 8000c46:	8812      	ldrh	r2, [r2, #0]
 8000c48:	b292      	uxth	r2, r2
 8000c4a:	4413      	add	r3, r2
 8000c4c:	461a      	mov	r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d906      	bls.n	8000c62 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c54:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <RescheduleTimerList+0x130>)
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d04 <RescheduleTimerList+0x12c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e03d      	b.n	8000cde <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c6c:	4b25      	ldr	r3, [pc, #148]	@ (8000d04 <RescheduleTimerList+0x12c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c72:	e034      	b.n	8000cde <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	4922      	ldr	r1, [pc, #136]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000c78:	4613      	mov	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	440b      	add	r3, r1
 8000c82:	3308      	adds	r3, #8
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d20a      	bcs.n	8000ca2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c8c:	7bfa      	ldrb	r2, [r7, #15]
 8000c8e:	491c      	ldr	r1, [pc, #112]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	440b      	add	r3, r1
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	e013      	b.n	8000cca <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ca2:	7bfa      	ldrb	r2, [r7, #15]
 8000ca4:	4916      	ldr	r1, [pc, #88]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000ca6:	4613      	mov	r3, r2
 8000ca8:	005b      	lsls	r3, r3, #1
 8000caa:	4413      	add	r3, r2
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	440b      	add	r3, r1
 8000cb0:	3308      	adds	r3, #8
 8000cb2:	6819      	ldr	r1, [r3, #0]
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	7bfa      	ldrb	r2, [r7, #15]
 8000cb8:	1ac9      	subs	r1, r1, r3
 8000cba:	4811      	ldr	r0, [pc, #68]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4413      	add	r3, r2
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	4403      	add	r3, r0
 8000cc6:	3308      	adds	r3, #8
 8000cc8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000cca:	7bfa      	ldrb	r2, [r7, #15]
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <RescheduleTimerList+0x128>)
 8000cce:	4613      	mov	r3, r2
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4413      	add	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	440b      	add	r3, r1
 8000cd8:	3315      	adds	r3, #21
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	d1c7      	bne.n	8000c74 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000ce4:	89bb      	ldrh	r3, [r7, #12]
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff1e 	bl	8000b28 <RestartWakeupCounter>

  return ;
 8000cec:	bf00      	nop
}
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40002800 	.word	0x40002800
 8000cf8:	200001dc 	.word	0x200001dc
 8000cfc:	2000013c 	.word	0x2000013c
 8000d00:	200000ac 	.word	0x200000ac
 8000d04:	20000144 	.word	0x20000144
 8000d08:	2000014a 	.word	0x2000014a

08000d0c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08a      	sub	sp, #40	@ 0x28
 8000d10:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000d12:	f3ef 8310 	mrs	r3, PRIMASK
 8000d16:	617b      	str	r3, [r7, #20]
  return(result);
 8000d18:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000d20:	4b59      	ldr	r3, [pc, #356]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	22ca      	movs	r2, #202	@ 0xca
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24
 8000d28:	4b57      	ldr	r3, [pc, #348]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2253      	movs	r2, #83	@ 0x53
 8000d2e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000d30:	4b55      	ldr	r3, [pc, #340]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	4b54      	ldr	r3, [pc, #336]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000d3e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d40:	4b52      	ldr	r3, [pc, #328]	@ (8000e8c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d48:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d4c:	4950      	ldr	r1, [pc, #320]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d4e:	4613      	mov	r3, r2
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4413      	add	r3, r2
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	440b      	add	r3, r1
 8000d58:	330c      	adds	r3, #12
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d16e      	bne.n	8000e40 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d62:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d66:	494a      	ldr	r1, [pc, #296]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d68:	4613      	mov	r3, r2
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	4413      	add	r3, r2
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	440b      	add	r3, r1
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d76:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d7a:	4945      	ldr	r1, [pc, #276]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	00db      	lsls	r3, r3, #3
 8000d84:	440b      	add	r3, r1
 8000d86:	3310      	adds	r3, #16
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d8c:	4b41      	ldr	r3, [pc, #260]	@ (8000e94 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d04c      	beq.n	8000e30 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d96:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d9a:	493d      	ldr	r1, [pc, #244]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	00db      	lsls	r3, r3, #3
 8000da4:	440b      	add	r3, r1
 8000da6:	330d      	adds	r3, #13
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d124      	bne.n	8000dfa <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000db0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000db4:	2101      	movs	r1, #1
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fdf2 	bl	80009a0 <UnlinkTimer>
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	f383 8810 	msr	PRIMASK, r3
}
 8000dc6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000dc8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000dcc:	4930      	ldr	r1, [pc, #192]	@ (8000e90 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000dce:	4613      	mov	r3, r2
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	440b      	add	r3, r1
 8000dd8:	3304      	adds	r3, #4
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000de0:	4611      	mov	r1, r2
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fa32 	bl	800124c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	22ca      	movs	r2, #202	@ 0xca
 8000dee:	625a      	str	r2, [r3, #36]	@ 0x24
 8000df0:	4b25      	ldr	r3, [pc, #148]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2253      	movs	r2, #83	@ 0x53
 8000df6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000df8:	e012      	b.n	8000e20 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f383 8810 	msr	PRIMASK, r3
}
 8000e04:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000e06:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f99a 	bl	8001144 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e10:	4b1d      	ldr	r3, [pc, #116]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	22ca      	movs	r2, #202	@ 0xca
 8000e16:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e18:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2253      	movs	r2, #83	@ 0x53
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000e20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	4619      	mov	r1, r3
 8000e28:	69b8      	ldr	r0, [r7, #24]
 8000e2a:	f000 fa95 	bl	8001358 <HW_TS_RTC_Int_AppNot>
 8000e2e:	e022      	b.n	8000e76 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000e30:	f7ff fed2 	bl	8000bd8 <RescheduleTimerList>
 8000e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e36:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	f383 8810 	msr	PRIMASK, r3
}
 8000e3e:	e01a      	b.n	8000e76 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e40:	bf00      	nop
 8000e42:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f8      	beq.n	8000e42 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e50:	4b0d      	ldr	r3, [pc, #52]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e60:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	f383 8810 	msr	PRIMASK, r3
}
 8000e74:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000e76:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	22ff      	movs	r2, #255	@ 0xff
 8000e7c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8000e7e:	bf00      	nop
}
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001dc 	.word	0x200001dc
 8000e8c:	2000013c 	.word	0x2000013c
 8000e90:	200000ac 	.word	0x200000ac
 8000e94:	20000144 	.word	0x20000144
 8000e98:	58000800 	.word	0x58000800

08000e9c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	6039      	str	r1, [r7, #0]
 8000ea6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000ea8:	4b5e      	ldr	r3, [pc, #376]	@ (8001024 <HW_TS_Init+0x188>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	22ca      	movs	r2, #202	@ 0xca
 8000eae:	625a      	str	r2, [r3, #36]	@ 0x24
 8000eb0:	4b5c      	ldr	r3, [pc, #368]	@ (8001024 <HW_TS_Init+0x188>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	2253      	movs	r2, #83	@ 0x53
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000eb8:	4b5b      	ldr	r3, [pc, #364]	@ (8001028 <HW_TS_Init+0x18c>)
 8000eba:	689b      	ldr	r3, [r3, #8]
 8000ebc:	4a5a      	ldr	r2, [pc, #360]	@ (8001028 <HW_TS_Init+0x18c>)
 8000ebe:	f043 0320 	orr.w	r3, r3, #32
 8000ec2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000ec4:	4b58      	ldr	r3, [pc, #352]	@ (8001028 <HW_TS_Init+0x18c>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	f1c3 0304 	rsb	r3, r3, #4
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b55      	ldr	r3, [pc, #340]	@ (800102c <HW_TS_Init+0x190>)
 8000ed8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000eda:	4b53      	ldr	r3, [pc, #332]	@ (8001028 <HW_TS_Init+0x18c>)
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000ee2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000ee6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	fa92 f2a2 	rbit	r2, r2
 8000eee:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000ef0:	68fa      	ldr	r2, [r7, #12]
 8000ef2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	2a00      	cmp	r2, #0
 8000ef8:	d101      	bne.n	8000efe <HW_TS_Init+0x62>
  {
    return 32U;
 8000efa:	2220      	movs	r2, #32
 8000efc:	e003      	b.n	8000f06 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000efe:	697a      	ldr	r2, [r7, #20]
 8000f00:	fab2 f282 	clz	r2, r2
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	40d3      	lsrs	r3, r2
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4b48      	ldr	r3, [pc, #288]	@ (8001030 <HW_TS_Init+0x194>)
 8000f10:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000f12:	4b45      	ldr	r3, [pc, #276]	@ (8001028 <HW_TS_Init+0x18c>)
 8000f14:	691b      	ldr	r3, [r3, #16]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	3301      	adds	r3, #1
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b44      	ldr	r3, [pc, #272]	@ (8001034 <HW_TS_Init+0x198>)
 8000f24:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000f26:	4b43      	ldr	r3, [pc, #268]	@ (8001034 <HW_TS_Init+0x198>)
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4a40      	ldr	r2, [pc, #256]	@ (8001030 <HW_TS_Init+0x194>)
 8000f2e:	7812      	ldrb	r2, [r2, #0]
 8000f30:	fb02 f303 	mul.w	r3, r2, r3
 8000f34:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000f38:	4a3c      	ldr	r2, [pc, #240]	@ (800102c <HW_TS_Init+0x190>)
 8000f3a:	7812      	ldrb	r2, [r2, #0]
 8000f3c:	40d3      	lsrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d904      	bls.n	8000f54 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001038 <HW_TS_Init+0x19c>)
 8000f4c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f50:	801a      	strh	r2, [r3, #0]
 8000f52:	e003      	b.n	8000f5c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b37      	ldr	r3, [pc, #220]	@ (8001038 <HW_TS_Init+0x19c>)
 8000f5a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f5c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f60:	f7ff fb9c 	bl	800069c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f64:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f68:	f7ff fb84 	bl	8000674 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d13d      	bne.n	8000fee <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f72:	4b32      	ldr	r3, [pc, #200]	@ (800103c <HW_TS_Init+0x1a0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f78:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <HW_TS_Init+0x1a4>)
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	77fb      	strb	r3, [r7, #31]
 8000f84:	e00c      	b.n	8000fa0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f86:	7ffa      	ldrb	r2, [r7, #31]
 8000f88:	492e      	ldr	r1, [pc, #184]	@ (8001044 <HW_TS_Init+0x1a8>)
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	440b      	add	r3, r1
 8000f94:	330c      	adds	r3, #12
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f9a:	7ffb      	ldrb	r3, [r7, #31]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	77fb      	strb	r3, [r7, #31]
 8000fa0:	7ffb      	ldrb	r3, [r7, #31]
 8000fa2:	2b05      	cmp	r3, #5
 8000fa4:	d9ef      	bls.n	8000f86 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000fa6:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <HW_TS_Init+0x1ac>)
 8000fa8:	2206      	movs	r2, #6
 8000faa:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000fac:	4b1d      	ldr	r3, [pc, #116]	@ (8001024 <HW_TS_Init+0x188>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <HW_TS_Init+0x188>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fba:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000fbc:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <HW_TS_Init+0x188>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	4b17      	ldr	r3, [pc, #92]	@ (8001024 <HW_TS_Init+0x188>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000fcc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <HW_TS_Init+0x1b0>)
 8000fd0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000fd4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	f001 fe49 	bl	8002c6e <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <HW_TS_Init+0x188>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <HW_TS_Init+0x188>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	e009      	b.n	8001002 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <HW_TS_Init+0x188>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f001 fe28 	bl	8002c52 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <HW_TS_Init+0x188>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	22ff      	movs	r2, #255	@ 0xff
 8001008:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800100a:	2200      	movs	r2, #0
 800100c:	2103      	movs	r1, #3
 800100e:	2003      	movs	r0, #3
 8001010:	f001 fddd 	bl	8002bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001014:	2003      	movs	r0, #3
 8001016:	f001 fdf4 	bl	8002c02 <HAL_NVIC_EnableIRQ>

  return;
 800101a:	bf00      	nop
}
 800101c:	3720      	adds	r7, #32
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200001dc 	.word	0x200001dc
 8001028:	40002800 	.word	0x40002800
 800102c:	20000145 	.word	0x20000145
 8001030:	20000146 	.word	0x20000146
 8001034:	20000148 	.word	0x20000148
 8001038:	2000014a 	.word	0x2000014a
 800103c:	20000144 	.word	0x20000144
 8001040:	20000140 	.word	0x20000140
 8001044:	200000ac 	.word	0x200000ac
 8001048:	2000013c 	.word	0x2000013c
 800104c:	58000800 	.word	0x58000800

08001050 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001050:	b480      	push	{r7}
 8001052:	b08b      	sub	sp, #44	@ 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	4613      	mov	r3, r2
 800105e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001066:	f3ef 8310 	mrs	r3, PRIMASK
 800106a:	61fb      	str	r3, [r7, #28]
  return(result);
 800106c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800106e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001074:	e004      	b.n	8001080 <HW_TS_Create+0x30>
  {
    loop++;
 8001076:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800107a:	3301      	adds	r3, #1
 800107c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001080:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001084:	2b05      	cmp	r3, #5
 8001086:	d80c      	bhi.n	80010a2 <HW_TS_Create+0x52>
 8001088:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800108c:	492c      	ldr	r1, [pc, #176]	@ (8001140 <HW_TS_Create+0xf0>)
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	440b      	add	r3, r1
 8001098:	330c      	adds	r3, #12
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1e9      	bne.n	8001076 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80010a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d038      	beq.n	800111c <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80010aa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010ae:	4924      	ldr	r1, [pc, #144]	@ (8001140 <HW_TS_Create+0xf0>)
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	330c      	adds	r3, #12
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	f383 8810 	msr	PRIMASK, r3
}
 80010ca:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80010cc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010d0:	491b      	ldr	r1, [pc, #108]	@ (8001140 <HW_TS_Create+0xf0>)
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	440b      	add	r3, r1
 80010dc:	3310      	adds	r3, #16
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80010e2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010e6:	4916      	ldr	r1, [pc, #88]	@ (8001140 <HW_TS_Create+0xf0>)
 80010e8:	4613      	mov	r3, r2
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	4413      	add	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	440b      	add	r3, r1
 80010f2:	330d      	adds	r3, #13
 80010f4:	79fa      	ldrb	r2, [r7, #7]
 80010f6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010fc:	4910      	ldr	r1, [pc, #64]	@ (8001140 <HW_TS_Create+0xf0>)
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	440b      	add	r3, r1
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001112:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800111a:	e008      	b.n	800112e <HW_TS_Create+0xde>
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f383 8810 	msr	PRIMASK, r3
}
 8001126:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8001128:	2301      	movs	r3, #1
 800112a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 800112e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001132:	4618      	mov	r0, r3
 8001134:	372c      	adds	r7, #44	@ 0x2c
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200000ac 	.word	0x200000ac

08001144 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800114e:	f3ef 8310 	mrs	r3, PRIMASK
 8001152:	60fb      	str	r3, [r7, #12]
  return(result);
 8001154:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800115c:	2003      	movs	r0, #3
 800115e:	f001 fd5e 	bl	8002c1e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001162:	4b34      	ldr	r3, [pc, #208]	@ (8001234 <HW_TS_Stop+0xf0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	22ca      	movs	r2, #202	@ 0xca
 8001168:	625a      	str	r2, [r3, #36]	@ 0x24
 800116a:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <HW_TS_Stop+0xf0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2253      	movs	r2, #83	@ 0x53
 8001170:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	4930      	ldr	r1, [pc, #192]	@ (8001238 <HW_TS_Stop+0xf4>)
 8001176:	4613      	mov	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	4413      	add	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	440b      	add	r3, r1
 8001180:	330c      	adds	r3, #12
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d142      	bne.n	8001210 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fc06 	bl	80009a0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <HW_TS_Stop+0xf8>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800119a:	7cfb      	ldrb	r3, [r7, #19]
 800119c:	2b06      	cmp	r3, #6
 800119e:	d12f      	bne.n	8001200 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80011a0:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <HW_TS_Stop+0xfc>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011ac:	d107      	bne.n	80011be <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80011ae:	bf00      	nop
 80011b0:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f8      	bne.n	80011b0 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80011cc:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80011ce:	bf00      	nop
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d0f8      	beq.n	80011d0 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <HW_TS_Stop+0xf0>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80011ee:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HW_TS_Stop+0x100>)
 80011f2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011f6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011f8:	2003      	movs	r0, #3
 80011fa:	f001 fd38 	bl	8002c6e <HAL_NVIC_ClearPendingIRQ>
 80011fe:	e007      	b.n	8001210 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001200:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <HW_TS_Stop+0x104>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	7cfa      	ldrb	r2, [r7, #19]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800120c:	f7ff fce4 	bl	8000bd8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <HW_TS_Stop+0xf0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	22ff      	movs	r2, #255	@ 0xff
 8001216:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001218:	2003      	movs	r0, #3
 800121a:	f001 fcf2 	bl	8002c02 <HAL_NVIC_EnableIRQ>
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	f383 8810 	msr	PRIMASK, r3
}
 8001228:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800122a:	bf00      	nop
}
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	200001dc 	.word	0x200001dc
 8001238:	200000ac 	.word	0x200000ac
 800123c:	2000013c 	.word	0x2000013c
 8001240:	40002800 	.word	0x40002800
 8001244:	58000800 	.word	0x58000800
 8001248:	2000013d 	.word	0x2000013d

0800124c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001258:	79fa      	ldrb	r2, [r7, #7]
 800125a:	493b      	ldr	r1, [pc, #236]	@ (8001348 <HW_TS_Start+0xfc>)
 800125c:	4613      	mov	r3, r2
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	4413      	add	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	440b      	add	r3, r1
 8001266:	330c      	adds	r3, #12
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d103      	bne.n	8001278 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff66 	bl	8001144 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001278:	f3ef 8310 	mrs	r3, PRIMASK
 800127c:	60fb      	str	r3, [r7, #12]
  return(result);
 800127e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001280:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001282:	b672      	cpsid	i
}
 8001284:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001286:	2003      	movs	r0, #3
 8001288:	f001 fcc9 	bl	8002c1e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800128c:	4b2f      	ldr	r3, [pc, #188]	@ (800134c <HW_TS_Start+0x100>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	22ca      	movs	r2, #202	@ 0xca
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24
 8001294:	4b2d      	ldr	r3, [pc, #180]	@ (800134c <HW_TS_Start+0x100>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2253      	movs	r2, #83	@ 0x53
 800129a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	492a      	ldr	r1, [pc, #168]	@ (8001348 <HW_TS_Start+0xfc>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	440b      	add	r3, r1
 80012aa:	330c      	adds	r3, #12
 80012ac:	2202      	movs	r2, #2
 80012ae:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	4925      	ldr	r1, [pc, #148]	@ (8001348 <HW_TS_Start+0xfc>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	440b      	add	r3, r1
 80012be:	3308      	adds	r3, #8
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80012c4:	79fa      	ldrb	r2, [r7, #7]
 80012c6:	4920      	ldr	r1, [pc, #128]	@ (8001348 <HW_TS_Start+0xfc>)
 80012c8:	4613      	mov	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	4413      	add	r3, r2
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	440b      	add	r3, r1
 80012d2:	3304      	adds	r3, #4
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fab6 	bl	800084c <linkTimer>
 80012e0:	4603      	mov	r3, r0
 80012e2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HW_TS_Start+0x104>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HW_TS_Start+0x108>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	7c7a      	ldrb	r2, [r7, #17]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d002      	beq.n	80012fc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80012f6:	f7ff fc6f 	bl	8000bd8 <RescheduleTimerList>
 80012fa:	e013      	b.n	8001324 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012fc:	79fa      	ldrb	r2, [r7, #7]
 80012fe:	4912      	ldr	r1, [pc, #72]	@ (8001348 <HW_TS_Start+0xfc>)
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	00db      	lsls	r3, r3, #3
 8001308:	440b      	add	r3, r1
 800130a:	3308      	adds	r3, #8
 800130c:	6819      	ldr	r1, [r3, #0]
 800130e:	8a7b      	ldrh	r3, [r7, #18]
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	1ac9      	subs	r1, r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <HW_TS_Start+0xfc>)
 8001316:	4613      	mov	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	4413      	add	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	4403      	add	r3, r0
 8001320:	3308      	adds	r3, #8
 8001322:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001324:	4b09      	ldr	r3, [pc, #36]	@ (800134c <HW_TS_Start+0x100>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	22ff      	movs	r2, #255	@ 0xff
 800132a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800132c:	2003      	movs	r0, #3
 800132e:	f001 fc68 	bl	8002c02 <HAL_NVIC_EnableIRQ>
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f383 8810 	msr	PRIMASK, r3
}
 800133c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800133e:	bf00      	nop
}
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200000ac 	.word	0x200000ac
 800134c:	200001dc 	.word	0x200001dc
 8001350:	2000013c 	.word	0x2000013c
 8001354:	2000013d 	.word	0x2000013d

08001358 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	460b      	mov	r3, r1
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4798      	blx	r3

  return;
 800136a:	bf00      	nop
}
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <LL_RCC_LSE_SetDriveCapability>:
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001382:	f023 0218 	bic.w	r2, r3, #24
 8001386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4313      	orrs	r3, r2
 800138e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800139e:	b480      	push	{r7}
 80013a0:	b085      	sub	sp, #20
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80013a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80013b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4013      	ands	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d4:	f001 fa1a 	bl	800280c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80013d8:	f7fe ffbc 	bl	8000354 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013dc:	f000 f815 	bl	800140a <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013e0:	f000 f86e 	bl	80014c0 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80013e4:	f000 f8c8 	bl	8001578 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e8:	f000 f9da 	bl	80017a0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013ec:	f000 f884 	bl	80014f8 <MX_I2C1_Init>
  MX_RTC_Init();
 80013f0:	f000 f8de 	bl	80015b0 <MX_RTC_Init>
  MX_SPI1_Init();
 80013f4:	f000 f902 	bl	80015fc <MX_SPI1_Init>
  MX_TIM1_Init();
 80013f8:	f000 f93e 	bl	8001678 <MX_TIM1_Init>
  MX_RF_Init();
 80013fc:	f000 f8d0 	bl	80015a0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
//  ltHWInit();
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001400:	f7fe ffb6 	bl	8000370 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001404:	f7ff f8f9 	bl	80005fa <MX_APPE_Process>
 8001408:	e7fc      	b.n	8001404 <main+0x34>

0800140a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b098      	sub	sp, #96	@ 0x60
 800140e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2244      	movs	r2, #68	@ 0x44
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f008 f9db 	bl	80097d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
 800142c:	615a      	str	r2, [r3, #20]
 800142e:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001430:	f002 fdb0 	bl	8003f94 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 8001434:	2010      	movs	r0, #16
 8001436:	f7ff ff9c 	bl	8001372 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800143a:	2307      	movs	r3, #7
 800143c:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001442:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001444:	2301      	movs	r3, #1
 8001446:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144e:	2340      	movs	r3, #64	@ 0x40
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001452:	2302      	movs	r3, #2
 8001454:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001456:	2303      	movs	r3, #3
 8001458:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800145a:	2310      	movs	r3, #16
 800145c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800145e:	2308      	movs	r3, #8
 8001460:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001462:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001466:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001468:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800146c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800146e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001472:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4618      	mov	r0, r3
 800147a:	f003 f8db 	bl	8004634 <HAL_RCC_OscConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001484:	f000 f9fe 	bl	8001884 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001488:	236f      	movs	r3, #111	@ 0x6f
 800148a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148c:	2303      	movs	r3, #3
 800148e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800149c:	2380      	movs	r3, #128	@ 0x80
 800149e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014a4:	463b      	mov	r3, r7
 80014a6:	2103      	movs	r1, #3
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fbf9 	bl	8004ca0 <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014b4:	f000 f9e6 	bl	8001884 <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3760      	adds	r7, #96	@ 0x60
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2224      	movs	r2, #36	@ 0x24
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f008 f981 	bl	80097d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 80014d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80014d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 ff35 	bl	8005350 <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 80014ec:	f000 f9ca 	bl	8001884 <Error_Handler>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3728      	adds	r7, #40	@ 0x28
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <MX_I2C1_Init+0x74>)
 80014fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001570 <MX_I2C1_Init+0x78>)
 8001500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001502:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_I2C1_Init+0x74>)
 8001504:	4a1b      	ldr	r2, [pc, #108]	@ (8001574 <MX_I2C1_Init+0x7c>)
 8001506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_I2C1_Init+0x74>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800150e:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_I2C1_Init+0x74>)
 8001510:	2201      	movs	r2, #1
 8001512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_I2C1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_I2C1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_I2C1_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_I2C1_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_I2C1_Init+0x74>)
 800152e:	2200      	movs	r2, #0
 8001530:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001532:	480e      	ldr	r0, [pc, #56]	@ (800156c <MX_I2C1_Init+0x74>)
 8001534:	f001 fe56 	bl	80031e4 <HAL_I2C_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800153e:	f000 f9a1 	bl	8001884 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4809      	ldr	r0, [pc, #36]	@ (800156c <MX_I2C1_Init+0x74>)
 8001546:	f002 fc07 	bl	8003d58 <HAL_I2CEx_ConfigAnalogFilter>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001550:	f000 f998 	bl	8001884 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001554:	2100      	movs	r1, #0
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_I2C1_Init+0x74>)
 8001558:	f002 fc49 	bl	8003dee <HAL_I2CEx_ConfigDigitalFilter>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001562:	f000 f98f 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2000014c 	.word	0x2000014c
 8001570:	40005400 	.word	0x40005400
 8001574:	10707dbc 	.word	0x10707dbc

08001578 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800157c:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <MX_IPCC_Init+0x20>)
 800157e:	4a07      	ldr	r2, [pc, #28]	@ (800159c <MX_IPCC_Init+0x24>)
 8001580:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	@ (8001598 <MX_IPCC_Init+0x20>)
 8001584:	f002 fc80 	bl	8003e88 <HAL_IPCC_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800158e:	f000 f979 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001a0 	.word	0x200001a0
 800159c:	58000c00 	.word	0x58000c00

080015a0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015b6:	4a10      	ldr	r2, [pc, #64]	@ (80015f8 <MX_RTC_Init+0x48>)
 80015b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015bc:	2200      	movs	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015c2:	220f      	movs	r2, #15
 80015c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015c8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80015cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015d4:	4b07      	ldr	r3, [pc, #28]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015dc:	2200      	movs	r2, #0
 80015de:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015e0:	4804      	ldr	r0, [pc, #16]	@ (80015f4 <MX_RTC_Init+0x44>)
 80015e2:	f003 ff91 	bl	8005508 <HAL_RTC_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80015ec:	f000 f94a 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200001dc 	.word	0x200001dc
 80015f8:	40002800 	.word	0x40002800

080015fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001600:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001602:	4a1c      	ldr	r2, [pc, #112]	@ (8001674 <MX_SPI1_Init+0x78>)
 8001604:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001608:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800160c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001616:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800161a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_SPI1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_SPI1_Init+0x74>)
 800162a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800162e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_SPI1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_SPI1_Init+0x74>)
 800164a:	2207      	movs	r2, #7
 800164c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001650:	2200      	movs	r2, #0
 8001652:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_SPI1_Init+0x74>)
 8001656:	2208      	movs	r2, #8
 8001658:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_SPI1_Init+0x74>)
 800165c:	f004 f854 	bl	8005708 <HAL_SPI_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001666:	f000 f90d 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000200 	.word	0x20000200
 8001674:	40013000 	.word	0x40013000

08001678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b098      	sub	sp, #96	@ 0x60
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	2234      	movs	r2, #52	@ 0x34
 80016a2:	2100      	movs	r1, #0
 80016a4:	4618      	mov	r0, r3
 80016a6:	f008 f895 	bl	80097d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001798 <MX_TIM1_Init+0x120>)
 80016ac:	4a3b      	ldr	r2, [pc, #236]	@ (800179c <MX_TIM1_Init+0x124>)
 80016ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016b0:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <MX_TIM1_Init+0x120>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b6:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <MX_TIM1_Init+0x120>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016bc:	4b36      	ldr	r3, [pc, #216]	@ (8001798 <MX_TIM1_Init+0x120>)
 80016be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c4:	4b34      	ldr	r3, [pc, #208]	@ (8001798 <MX_TIM1_Init+0x120>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016ca:	4b33      	ldr	r3, [pc, #204]	@ (8001798 <MX_TIM1_Init+0x120>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d0:	4b31      	ldr	r3, [pc, #196]	@ (8001798 <MX_TIM1_Init+0x120>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016d6:	4830      	ldr	r0, [pc, #192]	@ (8001798 <MX_TIM1_Init+0x120>)
 80016d8:	f004 f8b9 	bl	800584e <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80016e2:	f000 f8cf 	bl	8001884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ee:	2300      	movs	r3, #0
 80016f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016f6:	4619      	mov	r1, r3
 80016f8:	4827      	ldr	r0, [pc, #156]	@ (8001798 <MX_TIM1_Init+0x120>)
 80016fa:	f004 fc9d 	bl	8006038 <HAL_TIMEx_MasterConfigSynchronization>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001704:	f000 f8be 	bl	8001884 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001708:	2360      	movs	r3, #96	@ 0x60
 800170a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001714:	2300      	movs	r3, #0
 8001716:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001724:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001728:	2200      	movs	r2, #0
 800172a:	4619      	mov	r1, r3
 800172c:	481a      	ldr	r0, [pc, #104]	@ (8001798 <MX_TIM1_Init+0x120>)
 800172e:	f004 f8e5 	bl	80058fc <HAL_TIM_PWM_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001738:	f000 f8a4 	bl	8001884 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001754:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800175a:	2300      	movs	r3, #0
 800175c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001762:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001766:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800176c:	2300      	movs	r3, #0
 800176e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001774:	1d3b      	adds	r3, r7, #4
 8001776:	4619      	mov	r1, r3
 8001778:	4807      	ldr	r0, [pc, #28]	@ (8001798 <MX_TIM1_Init+0x120>)
 800177a:	f004 fcbd 	bl	80060f8 <HAL_TIMEx_ConfigBreakDeadTime>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001784:	f000 f87e 	bl	8001884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <MX_TIM1_Init+0x120>)
 800178a:	f000 fc09 	bl	8001fa0 <HAL_TIM_MspPostInit>

}
 800178e:	bf00      	nop
 8001790:	3760      	adds	r7, #96	@ 0x60
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000264 	.word	0x20000264
 800179c:	40012c00 	.word	0x40012c00

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b4:	2004      	movs	r0, #4
 80017b6:	f7ff fdf2 	bl	800139e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2002      	movs	r0, #2
 80017bc:	f7ff fdef 	bl	800139e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c0:	2001      	movs	r0, #1
 80017c2:	f7ff fdec 	bl	800139e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_SPI_CS_GPIO_Port, FLASH_SPI_CS_Pin, GPIO_PIN_SET);
 80017c6:	2201      	movs	r2, #1
 80017c8:	2110      	movs	r1, #16
 80017ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017ce:	f001 fc9b 	bl	8003108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFPA_CSD_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80017d2:	2200      	movs	r2, #0
 80017d4:	21f2      	movs	r1, #242	@ 0xf2
 80017d6:	482a      	ldr	r0, [pc, #168]	@ (8001880 <MX_GPIO_Init+0xe0>)
 80017d8:	f001 fc96 	bl	8003108 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PMIC_IRQ_Pin ACC_IRQ1_Pin ACC_IRQ2_Pin */
  GPIO_InitStruct.Pin = PMIC_IRQ_Pin|ACC_IRQ1_Pin|ACC_IRQ2_Pin;
 80017dc:	f640 4304 	movw	r3, #3076	@ 0xc04
 80017e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	4619      	mov	r1, r3
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017f4:	f001 fa4a 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_SPI_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_SPI_CS_Pin;
 80017f8:	2310      	movs	r3, #16
 80017fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017fc:	2311      	movs	r3, #17
 80017fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001800:	2301      	movs	r3, #1
 8001802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FLASH_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001810:	f001 fa3c 	bl	8002c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RFPA_CSD_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = RFPA_CSD_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001814:	23f2      	movs	r3, #242	@ 0xf2
 8001816:	607b      	str	r3, [r7, #4]
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	4619      	mov	r1, r3
 8001828:	4815      	ldr	r0, [pc, #84]	@ (8001880 <MX_GPIO_Init+0xe0>)
 800182a:	f001 fa2f 	bl	8002c8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	2028      	movs	r0, #40	@ 0x28
 8001834:	f001 f9cb 	bl	8002bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001838:	2028      	movs	r0, #40	@ 0x28
 800183a:	f001 f9e2 	bl	8002c02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // Initialize PB0 as RF Power Amplifier CTX
  GPIO_InitStruct.Pin = RFPA_CTX_Pin;
 800183e:	2301      	movs	r3, #1
 8001840:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001846:	2302      	movs	r3, #2
 8001848:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184a:	2302      	movs	r3, #2
 800184c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_DTB0;
 800184e:	2306      	movs	r3, #6
 8001850:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RFPA_CTX_GPIO_Port, &GPIO_InitStruct);
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	4619      	mov	r1, r3
 8001856:	480a      	ldr	r0, [pc, #40]	@ (8001880 <MX_GPIO_Init+0xe0>)
 8001858:	f001 fa18 	bl	8002c8c <HAL_GPIO_Init>

  // Initialize PB1 as RF Power Amplifier CSD
  GPIO_InitStruct.Pin = RFPA_CSD_Pin;
 800185c:	2302      	movs	r3, #2
 800185e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001868:	2302      	movs	r3, #2
 800186a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RFPA_CSD_GPIO_Port, &GPIO_InitStruct);
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	4619      	mov	r1, r3
 8001870:	4803      	ldr	r0, [pc, #12]	@ (8001880 <MX_GPIO_Init+0xe0>)
 8001872:	f001 fa0b 	bl	8002c8c <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001876:	bf00      	nop
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	48000400 	.word	0x48000400

08001884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001888:	b672      	cpsid	i
}
 800188a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  HAL_GPIO_WritePin(GPIOB, LED4_Pin, 1);
 800188c:	2201      	movs	r2, #1
 800188e:	2180      	movs	r1, #128	@ 0x80
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <Error_Handler+0x18>)
 8001892:	f001 fc39 	bl	8003108 <HAL_GPIO_WritePin>

  while (1)
 8001896:	bf00      	nop
 8001898:	e7fd      	b.n	8001896 <Error_Handler+0x12>
 800189a:	bf00      	nop
 800189c:	48000400 	.word	0x48000400

080018a0 <STBY_BootManager>:

  return;
}

uint32_t STBY_BootManager(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
    STBY_BootStatus = 0;
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_C2SB);
    LL_HSEM_ReleaseLock( HSEM, CFG_HW_PWR_STANDBY_SEMID, 0 );
  }
#else
  STBY_BootStatus = 0;
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <STBY_BootManager+0x18>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
#endif

  return STBY_BootStatus;
 80018aa:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <STBY_BootManager+0x18>)
 80018ac:	681b      	ldr	r3, [r3, #0]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	200002b4 	.word	0x200002b4

080018bc <LL_PWR_SetPowerMode>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80018c4:	4b06      	ldr	r3, [pc, #24]	@ (80018e0 <LL_PWR_SetPowerMode+0x24>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 0207 	bic.w	r2, r3, #7
 80018cc:	4904      	ldr	r1, [pc, #16]	@ (80018e0 <LL_PWR_SetPowerMode+0x24>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	600b      	str	r3, [r1, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	58000400 	.word	0x58000400

080018e4 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <LL_PWR_ClearFlag_WU+0x14>)
 80018ea:	2209      	movs	r2, #9
 80018ec:	619a      	str	r2, [r3, #24]
}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	58000400 	.word	0x58000400

080018fc <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 8001900:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 8001902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800190a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800190e:	d101      	bne.n	8001914 <LL_PWR_IsActiveFlag_C2SB+0x18>
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	58000400 	.word	0x58000400

08001924 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 8001928:	4b07      	ldr	r3, [pc, #28]	@ (8001948 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 800192a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001932:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001936:	d101      	bne.n	800193c <LL_PWR_IsActiveFlag_C2DS+0x18>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <LL_PWR_IsActiveFlag_C2DS+0x1a>
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	58000400 	.word	0x58000400

0800194c <LL_RCC_HSE_Enable>:
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800195a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_RCC_HSE_IsReady>:
{
 800196a:	b480      	push	{r7}
 800196c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800197c:	d101      	bne.n	8001982 <LL_RCC_HSE_IsReady+0x18>
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <LL_RCC_HSE_IsReady+0x1a>
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_RCC_HSI_Enable>:
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001992:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800199c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a0:	6013      	str	r3, [r2, #0]
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_RCC_HSI_IsReady>:
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019be:	d101      	bne.n	80019c4 <LL_RCC_HSI_IsReady+0x18>
 80019c0:	2301      	movs	r3, #1
 80019c2:	e000      	b.n	80019c6 <LL_RCC_HSI_IsReady+0x1a>
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_SetSysClkSource>:
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f023 0203 	bic.w	r2, r3, #3
 80019e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_GetSysClkSource>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8001a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a24:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a38:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <LL_LPM_EnableSleep+0x1c>)
 8001a3a:	691b      	ldr	r3, [r3, #16]
 8001a3c:	4a04      	ldr	r2, [pc, #16]	@ (8001a50 <LL_LPM_EnableSleep+0x1c>)
 8001a3e:	f023 0304 	bic.w	r3, r3, #4
 8001a42:	6113      	str	r3, [r2, #16]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <LL_LPM_EnableDeepSleep+0x1c>)
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <LL_LPM_EnableDeepSleep+0x1c>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	6113      	str	r3, [r2, #16]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	3220      	adds	r2, #32
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <LL_HSEM_1StepLock+0x2c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d001      	beq.n	8001a92 <LL_HSEM_1StepLock+0x1e>
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e000      	b.n	8001a94 <LL_HSEM_1StepLock+0x20>
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	80000400 	.word	0x80000400

08001aa4 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	68ba      	ldr	r2, [r7, #8]
 8001aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001abe:	bf00      	nop
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001ace:	f000 ff23 	bl	8002918 <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001ad2:	f7ff ff9d 	bl	8001a10 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8001ad6:	f000 f835 	bl	8001b44 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001ada:	f7ff ff03 	bl	80018e4 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001ade:	2003      	movs	r0, #3
 8001ae0:	f7ff feec 	bl	80018bc <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001ae4:	f7ff ffb6 	bl	8001a54 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001ae8:	bf00      	nop
}
 8001aea:	bd80      	pop	{r7, pc}

08001aec <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001af0:	bf00      	nop
}
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001afe:	f000 ff0b 	bl	8002918 <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001b02:	f000 f81f 	bl	8001b44 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff fed8 	bl	80018bc <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001b0c:	f7ff ffa2 	bl	8001a54 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001b10:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001b12:	bf00      	nop
}
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001b1a:	f000 f84f 	bl	8001bbc <ExitLowPower>

  HAL_ResumeTick();
 8001b1e:	f000 ff0b 	bl	8002938 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001b22:	bf00      	nop
}
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001b2a:	f000 fef5 	bl	8002918 <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001b2e:	f7ff ff81 	bl	8001a34 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001b32:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001b34:	bf00      	nop
}
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001b3c:	f000 fefc 	bl	8002938 <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001b40:	bf00      	nop
}
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001b48:	bf00      	nop
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	4819      	ldr	r0, [pc, #100]	@ (8001bb4 <EnterLowPower+0x70>)
 8001b4e:	f7ff ff91 	bl	8001a74 <LL_HSEM_1StepLock>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f8      	bne.n	8001b4a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4816      	ldr	r0, [pc, #88]	@ (8001bb4 <EnterLowPower+0x70>)
 8001b5c:	f7ff ff8a 	bl	8001a74 <LL_HSEM_1StepLock>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d117      	bne.n	8001b96 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001b66:	f7ff fedd 	bl	8001924 <LL_PWR_IsActiveFlag_C2DS>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <EnterLowPower+0x36>
 8001b70:	f7ff fec4 	bl	80018fc <LL_PWR_IsActiveFlag_C2SB>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d015      	beq.n	8001ba6 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <EnterLowPower+0x70>)
 8001b80:	f7ff ff90 	bl	8001aa4 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001b84:	f000 f852 	bl	8001c2c <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001b88:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb8 <EnterLowPower+0x74>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <EnterLowPower+0x74>)
 8001b8e:	f023 0307 	bic.w	r3, r3, #7
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e007      	b.n	8001ba6 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001b96:	f000 f849 	bl	8001c2c <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001b9a:	4b07      	ldr	r3, [pc, #28]	@ (8001bb8 <EnterLowPower+0x74>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a06      	ldr	r2, [pc, #24]	@ (8001bb8 <EnterLowPower+0x74>)
 8001ba0:	f023 0307 	bic.w	r3, r3, #7
 8001ba4:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2103      	movs	r1, #3
 8001baa:	4802      	ldr	r0, [pc, #8]	@ (8001bb4 <EnterLowPower+0x70>)
 8001bac:	f7ff ff7a 	bl	8001aa4 <LL_HSEM_ReleaseLock>

  return;
 8001bb0:	bf00      	nop
}
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	58001400 	.word	0x58001400
 8001bb8:	58004000 	.word	0x58004000

08001bbc <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	4817      	ldr	r0, [pc, #92]	@ (8001c24 <ExitLowPower+0x68>)
 8001bc6:	f7ff ff6d 	bl	8001aa4 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001bca:	bf00      	nop
 8001bcc:	2103      	movs	r1, #3
 8001bce:	4815      	ldr	r0, [pc, #84]	@ (8001c24 <ExitLowPower+0x68>)
 8001bd0:	f7ff ff50 	bl	8001a74 <LL_HSEM_1StepLock>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1f8      	bne.n	8001bcc <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001bda:	f7ff ff0d 	bl	80019f8 <LL_RCC_GetSysClkSource>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d118      	bne.n	8001c16 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
	  LL_RCC_HSE_Enable( );
 8001be4:	f7ff feb2 	bl	800194c <LL_RCC_HSE_Enable>
	  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <ExitLowPower+0x6c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f023 0307 	bic.w	r3, r3, #7
 8001bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001c28 <ExitLowPower+0x6c>)
 8001bf2:	f043 0301 	orr.w	r3, r3, #1
 8001bf6:	6013      	str	r3, [r2, #0]
	  while(!LL_RCC_HSE_IsReady( ));
 8001bf8:	bf00      	nop
 8001bfa:	f7ff feb6 	bl	800196a <LL_RCC_HSE_IsReady>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0fa      	beq.n	8001bfa <ExitLowPower+0x3e>
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001c04:	2002      	movs	r0, #2
 8001c06:	f7ff fee3 	bl	80019d0 <LL_RCC_SetSysClkSource>
	  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001c0a:	bf00      	nop
 8001c0c:	f7ff fef4 	bl	80019f8 <LL_RCC_GetSysClkSource>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b08      	cmp	r3, #8
 8001c14:	d1fa      	bne.n	8001c0c <ExitLowPower+0x50>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2103      	movs	r1, #3
 8001c1a:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <ExitLowPower+0x68>)
 8001c1c:	f7ff ff42 	bl	8001aa4 <LL_HSEM_ReleaseLock>

  return;
 8001c20:	bf00      	nop
}
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	58001400 	.word	0x58001400
 8001c28:	58004000 	.word	0x58004000

08001c2c <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001c30:	f7ff fead 	bl	800198e <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001c34:	bf00      	nop
 8001c36:	f7ff feb9 	bl	80019ac <LL_RCC_HSI_IsReady>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0fa      	beq.n	8001c36 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001c40:	2001      	movs	r0, #1
 8001c42:	f7ff fec5 	bl	80019d0 <LL_RCC_SetSysClkSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001c46:	bf00      	nop
 8001c48:	f7ff fed6 	bl	80019f8 <LL_RCC_GetSysClkSource>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	d1fa      	bne.n	8001c48 <Switch_On_HSI+0x1c>
  return;
 8001c52:	bf00      	nop
}
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <LL_RCC_EnableRTC>:
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_AHB2_GRP1_EnableClock>:
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c84:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b085      	sub	sp, #20
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cce:	68fb      	ldr	r3, [r7, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ce8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cf8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d00:	68fb      	ldr	r3, [r7, #12]
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d24:	4013      	ands	r3, r2
 8001d26:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001d3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d40:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001d4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4013      	ands	r3, r2
 8001d56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d58:	68fb      	ldr	r3, [r7, #12]
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001d6a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001d6e:	f7ff ff9c 	bl	8001caa <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	202e      	movs	r0, #46	@ 0x2e
 8001d78:	f000 ff29 	bl	8002bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001d7c:	202e      	movs	r0, #46	@ 0x2e
 8001d7e:	f000 ff40 	bl	8002c02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b090      	sub	sp, #64	@ 0x40
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001da0:	f107 0308 	add.w	r3, r7, #8
 8001da4:	2224      	movs	r2, #36	@ 0x24
 8001da6:	2100      	movs	r1, #0
 8001da8:	4618      	mov	r0, r3
 8001daa:	f007 fd13 	bl	80097d4 <memset>
  if(hi2c->Instance==I2C1)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_I2C_MspInit+0x88>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d126      	bne.n	8001e06 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001db8:	2304      	movs	r3, #4
 8001dba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001dbc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001dc0:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc2:	f107 0308 	add.w	r3, r7, #8
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 fac2 	bl	8005350 <HAL_RCCEx_PeriphCLKConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001dd2:	f7ff fd57 	bl	8001884 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dd6:	2002      	movs	r0, #2
 8001dd8:	f7ff ff4e 	bl	8001c78 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_I2C_SCL_Pin|SENSOR_I2C_SDA_Pin;
 8001ddc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de2:	2312      	movs	r3, #18
 8001de4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dee:	2304      	movs	r3, #4
 8001df0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001df6:	4619      	mov	r1, r3
 8001df8:	4806      	ldr	r0, [pc, #24]	@ (8001e14 <HAL_I2C_MspInit+0x8c>)
 8001dfa:	f000 ff47 	bl	8002c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dfe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001e02:	f7ff ff6b 	bl	8001cdc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e06:	bf00      	nop
 8001e08:	3740      	adds	r7, #64	@ 0x40
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40005400 	.word	0x40005400
 8001e14:	48000400 	.word	0x48000400

08001e18 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <HAL_I2C_MspDeInit+0x38>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d10d      	bne.n	8001e46 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e2a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001e2e:	f7ff ff6e 	bl	8001d0e <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(SENSOR_I2C_SCL_GPIO_Port, SENSOR_I2C_SCL_Pin);
 8001e32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e36:	4807      	ldr	r0, [pc, #28]	@ (8001e54 <HAL_I2C_MspDeInit+0x3c>)
 8001e38:	f001 f890 	bl	8002f5c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SENSOR_I2C_SDA_GPIO_Port, SENSOR_I2C_SDA_Pin);
 8001e3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e40:	4804      	ldr	r0, [pc, #16]	@ (8001e54 <HAL_I2C_MspDeInit+0x3c>)
 8001e42:	f001 f88b 	bl	8002f5c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40005400 	.word	0x40005400
 8001e54:	48000400 	.word	0x48000400

08001e58 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	@ (8001e9c <HAL_IPCC_MspInit+0x44>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d113      	bne.n	8001e92 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001e6a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001e6e:	f7ff ff1c 	bl	8001caa <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	202c      	movs	r0, #44	@ 0x2c
 8001e78:	f000 fea9 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001e7c:	202c      	movs	r0, #44	@ 0x2c
 8001e7e:	f000 fec0 	bl	8002c02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2100      	movs	r1, #0
 8001e86:	202d      	movs	r0, #45	@ 0x2d
 8001e88:	f000 fea1 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001e8c:	202d      	movs	r0, #45	@ 0x2d
 8001e8e:	f000 feb8 	bl	8002c02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	58000c00 	.word	0x58000c00

08001ea0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08c      	sub	sp, #48	@ 0x30
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea8:	f107 030c 	add.w	r3, r7, #12
 8001eac:	2224      	movs	r2, #36	@ 0x24
 8001eae:	2100      	movs	r1, #0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f007 fc8f 	bl	80097d4 <memset>
  if(hrtc->Instance==RTC)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef4 <HAL_RTC_MspInit+0x54>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d115      	bne.n	8001eec <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ec0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ec4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ecc:	f107 030c 	add.w	r3, r7, #12
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fa3d 	bl	8005350 <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001edc:	f7ff fcd2 	bl	8001884 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ee0:	f7ff feb9 	bl	8001c56 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ee4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001ee8:	f7ff fef8 	bl	8001cdc <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001eec:	bf00      	nop
 8001eee:	3730      	adds	r7, #48	@ 0x30
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40002800 	.word	0x40002800

08001ef8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_SPI_MspInit+0x7c>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d128      	bne.n	8001f6c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f1a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001f1e:	f7ff ff09 	bl	8001d34 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f22:	2001      	movs	r0, #1
 8001f24:	f7ff fea8 	bl	8001c78 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA5     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = FLASH_SPI_SCK_Pin|FLASH_SPI_MISO_Pin;
 8001f28:	2342      	movs	r3, #66	@ 0x42
 8001f2a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f38:	2305      	movs	r3, #5
 8001f3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 030c 	add.w	r3, r7, #12
 8001f40:	4619      	mov	r1, r3
 8001f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f46:	f000 fea1 	bl	8002c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_SPI_MOSI_Pin;
 8001f4a:	2320      	movs	r3, #32
 8001f4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FLASH_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4619      	mov	r1, r3
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f68:	f000 fe90 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001f6c:	bf00      	nop
 8001f6e:	3720      	adds	r7, #32
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40013000 	.word	0x40013000

08001f78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a05      	ldr	r2, [pc, #20]	@ (8001f9c <HAL_TIM_PWM_MspInit+0x24>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d103      	bne.n	8001f92 <HAL_TIM_PWM_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f8a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001f8e:	f7ff fed1 	bl	8001d34 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40012c00 	.word	0x40012c00

08001fa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b088      	sub	sp, #32
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff4 <HAL_TIM_MspPostInit+0x54>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d114      	bne.n	8001fec <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7ff fe58 	bl	8001c78 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SPKR_ALARM_Pin;
 8001fc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPKR_ALARM_GPIO_Port, &GPIO_InitStruct);
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fe8:	f000 fe50 	bl	8002c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40012c00 	.word	0x40012c00

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <NMI_Handler+0x4>

08002000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <MemManage_Handler+0x4>

08002010 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <UsageFault_Handler+0x4>

08002020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr

0800204a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800204e:	f000 fc37 	bl	80028c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}

08002056 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_IRQ1_Pin);
 800205a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800205e:	f001 f885 	bl	800316c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_IRQ2_Pin);
 8002062:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002066:	f001 f881 	bl	800316c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}

0800206e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002072:	f006 ffbf 	bl	8008ff4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}

0800207a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800207e:	f006 ffef 	bl	8009060 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}

08002086 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800208a:	f001 f887 	bl	800319c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}

08002092 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8002096:	f7fe fe39 	bl	8000d0c <HW_TS_RTC_Wakeup_Handler>
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80020a4:	4b22      	ldr	r3, [pc, #136]	@ (8002130 <SystemInit+0x90>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020aa:	4a21      	ldr	r2, [pc, #132]	@ (8002130 <SystemInit+0x90>)
 80020ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80020c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020c8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80020cc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80020ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80020d8:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <SystemInit+0x94>)
 80020da:	4013      	ands	r3, r2
 80020dc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80020de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020ea:	f023 0305 	bic.w	r3, r3, #5
 80020ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80020f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020fe:	f023 0301 	bic.w	r3, r3, #1
 8002102:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210a:	4a0b      	ldr	r2, [pc, #44]	@ (8002138 <SystemInit+0x98>)
 800210c:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800210e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800211c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002122:	2200      	movs	r2, #0
 8002124:	619a      	str	r2, [r3, #24]
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000ed00 	.word	0xe000ed00
 8002134:	faf6fefb 	.word	0xfaf6fefb
 8002138:	22041000 	.word	0x22041000

0800213c <CopyDataInit>:
 800213c:	58d4      	ldr	r4, [r2, r3]
 800213e:	50c4      	str	r4, [r0, r3]
 8002140:	3304      	adds	r3, #4

08002142 <LoopCopyDataInit>:
 8002142:	18c4      	adds	r4, r0, r3
 8002144:	428c      	cmp	r4, r1
 8002146:	d3f9      	bcc.n	800213c <CopyDataInit>
 8002148:	4770      	bx	lr

0800214a <FillZerobss>:
 800214a:	6003      	str	r3, [r0, #0]
 800214c:	3004      	adds	r0, #4

0800214e <LoopFillZerobss>:
 800214e:	4288      	cmp	r0, r1
 8002150:	d3fb      	bcc.n	800214a <FillZerobss>
 8002152:	4770      	bx	lr

08002154 <Reset_Handler>:
 8002154:	4815      	ldr	r0, [pc, #84]	@ (80021ac <CPUcontextRestore+0xa>)
 8002156:	4685      	mov	sp, r0
 8002158:	f7ff fba2 	bl	80018a0 <STBY_BootManager>
 800215c:	2801      	cmp	r0, #1
 800215e:	d020      	beq.n	80021a2 <CPUcontextRestore>
 8002160:	b08a      	sub	sp, #40	@ 0x28
 8002162:	f7ff ff9d 	bl	80020a0 <SystemInit>
 8002166:	4812      	ldr	r0, [pc, #72]	@ (80021b0 <CPUcontextRestore+0xe>)
 8002168:	4912      	ldr	r1, [pc, #72]	@ (80021b4 <CPUcontextRestore+0x12>)
 800216a:	4a13      	ldr	r2, [pc, #76]	@ (80021b8 <CPUcontextRestore+0x16>)
 800216c:	2300      	movs	r3, #0
 800216e:	f7ff ffe8 	bl	8002142 <LoopCopyDataInit>
 8002172:	4812      	ldr	r0, [pc, #72]	@ (80021bc <CPUcontextRestore+0x1a>)
 8002174:	4912      	ldr	r1, [pc, #72]	@ (80021c0 <CPUcontextRestore+0x1e>)
 8002176:	4a13      	ldr	r2, [pc, #76]	@ (80021c4 <CPUcontextRestore+0x22>)
 8002178:	2300      	movs	r3, #0
 800217a:	f7ff ffe2 	bl	8002142 <LoopCopyDataInit>
 800217e:	4812      	ldr	r0, [pc, #72]	@ (80021c8 <CPUcontextRestore+0x26>)
 8002180:	4912      	ldr	r1, [pc, #72]	@ (80021cc <CPUcontextRestore+0x2a>)
 8002182:	2300      	movs	r3, #0
 8002184:	f7ff ffe3 	bl	800214e <LoopFillZerobss>
 8002188:	f007 fb2c 	bl	80097e4 <__libc_init_array>
 800218c:	f7ff f920 	bl	80013d0 <main>

08002190 <LoopForever>:
 8002190:	e7fe      	b.n	8002190 <LoopForever>

08002192 <CPUcontextSave>:
 8002192:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8002196:	4c0e      	ldr	r4, [pc, #56]	@ (80021d0 <CPUcontextRestore+0x2e>)
 8002198:	466b      	mov	r3, sp
 800219a:	6023      	str	r3, [r4, #0]
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	bf30      	wfi

080021a2 <CPUcontextRestore>:
 80021a2:	4c0b      	ldr	r4, [pc, #44]	@ (80021d0 <CPUcontextRestore+0x2e>)
 80021a4:	6824      	ldr	r4, [r4, #0]
 80021a6:	46a5      	mov	sp, r4
 80021a8:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 80021ac:	20003000 	.word	0x20003000
 80021b0:	20000008 	.word	0x20000008
 80021b4:	2000003c 	.word	0x2000003c
 80021b8:	08009af8 	.word	0x08009af8
 80021bc:	200301e4 	.word	0x200301e4
 80021c0:	20030a67 	.word	0x20030a67
 80021c4:	08009b7a 	.word	0x08009b7a
 80021c8:	20000090 	.word	0x20000090
 80021cc:	200004a8 	.word	0x200004a8
 80021d0:	200002b0 	.word	0x200002b0

080021d4 <ADC1_IRQHandler>:
 80021d4:	e7fe      	b.n	80021d4 <ADC1_IRQHandler>
	...

080021d8 <adpReadStatus>:
/**
  * @brief  Reads the status registers and updates the main handle
  * @param  <adp5360> Pointer to the ADP5360 Handle
  * @retval <lt_err_t> Returns an error code
  */
lt_err_t adpReadStatus(void) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
	lt_err_t retVal = LT_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	71fb      	strb	r3, [r7, #7]
	uint8_t tmpData;

	// Read the Charger Status1 Register
	retVal = adp5360ReadBytes(CHG_STS1, &tmpData, 1);
 80021e2:	1dbb      	adds	r3, r7, #6
 80021e4:	2201      	movs	r2, #1
 80021e6:	4619      	mov	r1, r3
 80021e8:	2008      	movs	r0, #8
 80021ea:	f000 f8e9 	bl	80023c0 <adp5360ReadBytes>
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <adpReadStatus+0x24>
		return retVal;
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	e0db      	b.n	80023b4 <adpReadStatus+0x1dc>
	}

	adp5360.chargeStatus.chgStatus = (tmpData & ADP_CHG_STS1_CHARGER_STATUS) >> 0;
 80021fc:	79bb      	ldrb	r3, [r7, #6]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	b2da      	uxtb	r2, r3
 8002204:	4b6d      	ldr	r3, [pc, #436]	@ (80023bc <adpReadStatus+0x1e4>)
 8002206:	719a      	strb	r2, [r3, #6]
	adp5360.chargeStatus.vbus_ilim = (tmpData & ADP_CHG_STS1_VBUS_ILIM) >> 5;
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	115b      	asrs	r3, r3, #5
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b00      	cmp	r3, #0
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b68      	ldr	r3, [pc, #416]	@ (80023bc <adpReadStatus+0x1e4>)
 800221c:	715a      	strb	r2, [r3, #5]
	adp5360.chargeStatus.adpichg = (tmpData & ADP_CHG_STS1_ADPICHG) >> 6;
 800221e:	79bb      	ldrb	r3, [r7, #6]
 8002220:	119b      	asrs	r3, r3, #6
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	bf14      	ite	ne
 800222a:	2301      	movne	r3, #1
 800222c:	2300      	moveq	r3, #0
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b62      	ldr	r3, [pc, #392]	@ (80023bc <adpReadStatus+0x1e4>)
 8002232:	711a      	strb	r2, [r3, #4]
	adp5360.chargeStatus.vbus_ov = (tmpData & ADP_CHG_STS1_VBUS_OV) >> 7;
 8002234:	79bb      	ldrb	r3, [r7, #6]
 8002236:	09db      	lsrs	r3, r3, #7
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b5d      	ldr	r3, [pc, #372]	@ (80023bc <adpReadStatus+0x1e4>)
 8002246:	70da      	strb	r2, [r3, #3]

	// Read the Charger Status2 Register
	retVal = adp5360ReadBytes(CHG_STS2, &tmpData, 1);
 8002248:	1dbb      	adds	r3, r7, #6
 800224a:	2201      	movs	r2, #1
 800224c:	4619      	mov	r1, r3
 800224e:	2009      	movs	r0, #9
 8002250:	f000 f8b6 	bl	80023c0 <adp5360ReadBytes>
 8002254:	4603      	mov	r3, r0
 8002256:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 8002258:	79fb      	ldrb	r3, [r7, #7]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <adpReadStatus+0x8a>
		return retVal;
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	e0a8      	b.n	80023b4 <adpReadStatus+0x1dc>
	}

	adp5360.chargeStatus.batChgStatus = (tmpData & ADP_CHG_STS2_BAT_CHG_STATUS) >> 0;
 8002262:	79bb      	ldrb	r3, [r7, #6]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b54      	ldr	r3, [pc, #336]	@ (80023bc <adpReadStatus+0x1e4>)
 800226c:	729a      	strb	r2, [r3, #10]
	adp5360.chargeStatus.batUVStatus = (tmpData & ADP_CHG_STS2_BAT_UV_STATUS) >> 3;
 800226e:	79bb      	ldrb	r3, [r7, #6]
 8002270:	10db      	asrs	r3, r3, #3
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b4e      	ldr	r3, [pc, #312]	@ (80023bc <adpReadStatus+0x1e4>)
 8002282:	725a      	strb	r2, [r3, #9]
	adp5360.chargeStatus.batOVStatus = (tmpData & ADP_CHG_STS2_BAT_OV_STATUS) >> 4;
 8002284:	79bb      	ldrb	r3, [r7, #6]
 8002286:	111b      	asrs	r3, r3, #4
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf14      	ite	ne
 8002290:	2301      	movne	r3, #1
 8002292:	2300      	moveq	r3, #0
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4b49      	ldr	r3, [pc, #292]	@ (80023bc <adpReadStatus+0x1e4>)
 8002298:	721a      	strb	r2, [r3, #8]
	adp5360.chargeStatus.thrStatus = (tmpData & ADP_CHG_STS2_THR_STATUS) >> 5;
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	095b      	lsrs	r3, r3, #5
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b46      	ldr	r3, [pc, #280]	@ (80023bc <adpReadStatus+0x1e4>)
 80022a2:	71da      	strb	r2, [r3, #7]

	// Read the Power Status Register
	retVal = adp5360ReadBytes(PGOOD_STATUS, &tmpData, 1);
 80022a4:	1dbb      	adds	r3, r7, #6
 80022a6:	2201      	movs	r2, #1
 80022a8:	4619      	mov	r1, r3
 80022aa:	202f      	movs	r0, #47	@ 0x2f
 80022ac:	f000 f888 	bl	80023c0 <adp5360ReadBytes>
 80022b0:	4603      	mov	r3, r0
 80022b2:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <adpReadStatus+0xe6>
		return retVal;
 80022ba:	79fb      	ldrb	r3, [r7, #7]
 80022bc:	e07a      	b.n	80023b4 <adpReadStatus+0x1dc>
	}

	adp5360.powerStatus.vOut1OK = (tmpData & ADP_PGOOD_STATUS_VOUT1OK) >> 0;
 80022be:	79bb      	ldrb	r3, [r7, #6]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	bf14      	ite	ne
 80022c8:	2301      	movne	r3, #1
 80022ca:	2300      	moveq	r3, #0
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4b3b      	ldr	r3, [pc, #236]	@ (80023bc <adpReadStatus+0x1e4>)
 80022d0:	741a      	strb	r2, [r3, #16]
	adp5360.powerStatus.vOut2OK = (tmpData & ADP_PGOOD_STATUS_VOUT2OK) >> 1;
 80022d2:	79bb      	ldrb	r3, [r7, #6]
 80022d4:	105b      	asrs	r3, r3, #1
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b35      	ldr	r3, [pc, #212]	@ (80023bc <adpReadStatus+0x1e4>)
 80022e6:	73da      	strb	r2, [r3, #15]
	adp5360.powerStatus.batOK = (tmpData & ADP_PGOOD_STATUS_BATOK) >> 2;
 80022e8:	79bb      	ldrb	r3, [r7, #6]
 80022ea:	109b      	asrs	r3, r3, #2
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf14      	ite	ne
 80022f4:	2301      	movne	r3, #1
 80022f6:	2300      	moveq	r3, #0
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b30      	ldr	r3, [pc, #192]	@ (80023bc <adpReadStatus+0x1e4>)
 80022fc:	739a      	strb	r2, [r3, #14]
	adp5360.powerStatus.vBusOK = (tmpData & ADP_PGOOD_STATUS_VBUSOK) >> 3;
 80022fe:	79bb      	ldrb	r3, [r7, #6]
 8002300:	10db      	asrs	r3, r3, #3
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2da      	uxtb	r2, r3
 8002310:	4b2a      	ldr	r3, [pc, #168]	@ (80023bc <adpReadStatus+0x1e4>)
 8002312:	735a      	strb	r2, [r3, #13]
	adp5360.powerStatus.chgComplete = (tmpData & ADP_PGOOD_STATUS_CHG_CMPLT) >> 4;
 8002314:	79bb      	ldrb	r3, [r7, #6]
 8002316:	111b      	asrs	r3, r3, #4
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	bf14      	ite	ne
 8002320:	2301      	movne	r3, #1
 8002322:	2300      	moveq	r3, #0
 8002324:	b2da      	uxtb	r2, r3
 8002326:	4b25      	ldr	r3, [pc, #148]	@ (80023bc <adpReadStatus+0x1e4>)
 8002328:	731a      	strb	r2, [r3, #12]
	adp5360.powerStatus.mrPress = (tmpData & ADP_PGOOD_STATUS_MR_PRESS) >> 5;
 800232a:	79bb      	ldrb	r3, [r7, #6]
 800232c:	115b      	asrs	r3, r3, #5
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	bf14      	ite	ne
 8002336:	2301      	movne	r3, #1
 8002338:	2300      	moveq	r3, #0
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b1f      	ldr	r3, [pc, #124]	@ (80023bc <adpReadStatus+0x1e4>)
 800233e:	72da      	strb	r2, [r3, #11]

	// Read the Battery Voltage
	uint8_t vbathigh;
	uint8_t vbatlow;

	retVal = adp5360ReadBytes(VBAT_READ_H, &vbathigh, 1);
 8002340:	1d7b      	adds	r3, r7, #5
 8002342:	2201      	movs	r2, #1
 8002344:	4619      	mov	r1, r3
 8002346:	2025      	movs	r0, #37	@ 0x25
 8002348:	f000 f83a 	bl	80023c0 <adp5360ReadBytes>
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 8002350:	79fb      	ldrb	r3, [r7, #7]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <adpReadStatus+0x182>
		return retVal;
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	e02c      	b.n	80023b4 <adpReadStatus+0x1dc>
	}

	retVal = adp5360ReadBytes(VBAT_READ_L, &vbatlow, 1);
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2201      	movs	r2, #1
 800235e:	4619      	mov	r1, r3
 8002360:	2026      	movs	r0, #38	@ 0x26
 8002362:	f000 f82d 	bl	80023c0 <adp5360ReadBytes>
 8002366:	4603      	mov	r3, r0
 8002368:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <adpReadStatus+0x19c>
		return retVal;
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	e01f      	b.n	80023b4 <adpReadStatus+0x1dc>
	}

	adp5360.batteryVoltage = (uint16_t)((vbathigh << 8) | vbatlow) >> 3;
 8002374:	797b      	ldrb	r3, [r7, #5]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	b21a      	sxth	r2, r3
 800237a:	793b      	ldrb	r3, [r7, #4]
 800237c:	b21b      	sxth	r3, r3
 800237e:	4313      	orrs	r3, r2
 8002380:	b21b      	sxth	r3, r3
 8002382:	b29b      	uxth	r3, r3
 8002384:	08db      	lsrs	r3, r3, #3
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b0c      	ldr	r3, [pc, #48]	@ (80023bc <adpReadStatus+0x1e4>)
 800238a:	825a      	strh	r2, [r3, #18]

	// Read the State of Charge
#if OVERRIDE_FUEL
	adp5360.stateOfCharge = calculateSOC(adp5360.batteryVoltage);
#else
	retVal = adp5360ReadBytes(BAT_SOC, &tmpData, 1);
 800238c:	1dbb      	adds	r3, r7, #6
 800238e:	2201      	movs	r2, #1
 8002390:	4619      	mov	r1, r3
 8002392:	2021      	movs	r0, #33	@ 0x21
 8002394:	f000 f814 	bl	80023c0 <adp5360ReadBytes>
 8002398:	4603      	mov	r3, r0
 800239a:	71fb      	strb	r3, [r7, #7]
		if (retVal != LT_OK) {
 800239c:	79fb      	ldrb	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <adpReadStatus+0x1ce>
			return retVal;
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	e006      	b.n	80023b4 <adpReadStatus+0x1dc>
		}
	// Store the bytes
	adp5360.stateOfCharge = (tmpData & ADP_BAT_SOC) >> 0;
 80023a6:	79bb      	ldrb	r3, [r7, #6]
 80023a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <adpReadStatus+0x1e4>)
 80023b0:	745a      	strb	r2, [r3, #17]
#endif

	return retVal;
 80023b2:	79fb      	ldrb	r3, [r7, #7]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	200002b8 	.word	0x200002b8

080023c0 <adp5360ReadBytes>:
  * @param  <regAddr> Address of the target register
  * @param  <dest> Pointer to the storage location of the read data
  * @param  <size> Number of bytes to read
  * @retval <lt_err_t> Returns an error code
  */
lt_err_t adp5360ReadBytes(uint8_t regAddr, uint8_t *dest, uint8_t size) {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af04      	add	r7, sp, #16
 80023c6:	4603      	mov	r3, r0
 80023c8:	6039      	str	r1, [r7, #0]
 80023ca:	71fb      	strb	r3, [r7, #7]
 80023cc:	4613      	mov	r3, r2
 80023ce:	71bb      	strb	r3, [r7, #6]
	uint8_t retryCount;
	HAL_StatusTypeDef status;
	lt_err_t retVal = LT_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73bb      	strb	r3, [r7, #14]

	retryCount = 2;
 80023d4:	2302      	movs	r3, #2
 80023d6:	73fb      	strb	r3, [r7, #15]

	do {
		status = HAL_I2C_Mem_Read(adp5360i2c, ADP_I2C_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, dest, size, ADP_I2C_TIMEOUT);
 80023d8:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <adp5360ReadBytes+0x64>)
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	b29a      	uxth	r2, r3
 80023e0:	79bb      	ldrb	r3, [r7, #6]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023e8:	9102      	str	r1, [sp, #8]
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2301      	movs	r3, #1
 80023f2:	218c      	movs	r1, #140	@ 0x8c
 80023f4:	f001 f8d4 	bl	80035a0 <HAL_I2C_Mem_Read>
 80023f8:	4603      	mov	r3, r0
 80023fa:	737b      	strb	r3, [r7, #13]
		if (status != HAL_OK) {
 80023fc:	7b7b      	ldrb	r3, [r7, #13]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <adp5360ReadBytes+0x46>
			// Attempt to Recover
			recoverI2C();
 8002402:	f000 f811 	bl	8002428 <recoverI2C>
		}
		retryCount--;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
 8002408:	3b01      	subs	r3, #1
 800240a:	73fb      	strb	r3, [r7, #15]
	} while ((status != HAL_OK) && (retryCount > 0));
 800240c:	7b7b      	ldrb	r3, [r7, #13]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <adp5360ReadBytes+0x58>
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1df      	bne.n	80023d8 <adp5360ReadBytes+0x18>

	return retVal;
 8002418:	7bbb      	ldrb	r3, [r7, #14]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200002cc 	.word	0x200002cc

08002428 <recoverI2C>:
  * @brief  I2C Recovery routine.
  * @note	This attempts to recover from an I2C HAL Timeout error by resetting the I2C HW.
  * @param  <NONE>
  * @retval <lt_err_t> Returns an error code
  */
static lt_err_t recoverI2C(void) {
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	// The bus is tied up for some reason. Try to re-initialize.
	HAL_I2C_DeInit(adp5360i2c);
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <recoverI2C+0x20>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f000 ff72 	bl	800331a <HAL_I2C_DeInit>
	return HAL_I2C_Init(adp5360i2c);
 8002436:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <recoverI2C+0x20>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fed2 	bl	80031e4 <HAL_I2C_Init>
 8002440:	4603      	mov	r3, r0
}
 8002442:	4618      	mov	r0, r3
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	200002cc 	.word	0x200002cc

0800244c <adp5360IRQHandler>:
  * @brief  ADP5360 IRQ Handler
  * @note	This gets called from the sequencer after an IRQ is triggered
  * @param  <NONE>
  * @retval <NONE>
  */
void adp5360IRQHandler(void) {
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
	lt_err_t retVal = LT_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	71bb      	strb	r3, [r7, #6]

	uint8_t intFlag1, intFlag2;
	static adp_charger_status_t previousChargeState;

	// Read the FLAG1 interrupts
	retVal = adp5360ReadBytes(IRQ_FLAG1, &intFlag1, 1);
 8002456:	1d7b      	adds	r3, r7, #5
 8002458:	2201      	movs	r2, #1
 800245a:	4619      	mov	r1, r3
 800245c:	2034      	movs	r0, #52	@ 0x34
 800245e:	f7ff ffaf 	bl	80023c0 <adp5360ReadBytes>
 8002462:	4603      	mov	r3, r0
 8002464:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 8002466:	79bb      	ldrb	r3, [r7, #6]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d148      	bne.n	80024fe <adp5360IRQHandler+0xb2>
		return;
	}

	// Read the FLAG2 interrupts
	retVal = adp5360ReadBytes(IRQ_FLAG2, &intFlag2, 1);
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	2201      	movs	r2, #1
 8002470:	4619      	mov	r1, r3
 8002472:	2035      	movs	r0, #53	@ 0x35
 8002474:	f7ff ffa4 	bl	80023c0 <adp5360ReadBytes>
 8002478:	4603      	mov	r3, r0
 800247a:	71bb      	strb	r3, [r7, #6]
	if (retVal != LT_OK) {
 800247c:	79bb      	ldrb	r3, [r7, #6]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d13f      	bne.n	8002502 <adp5360IRQHandler+0xb6>
	// FLAG1 Interrupts
	if (intFlag1 & ADP_IRQ_FLAG1_VBUS_INT) {
		// Interrupt Due To VBUS Voltage Threshold
	}

	if ((intFlag1 & ADP_IRQ_FLAG1_CHG_INT) >> 1) {
 8002482:	797b      	ldrb	r3, [r7, #5]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d028      	beq.n	80024de <adp5360IRQHandler+0x92>
		// Interrupt Due To Charger Mode Change
		retVal = adpReadStatus();
 800248c:	f7ff fea4 	bl	80021d8 <adpReadStatus>
 8002490:	4603      	mov	r3, r0
 8002492:	71bb      	strb	r3, [r7, #6]
		if (retVal != LT_OK) {
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d135      	bne.n	8002506 <adp5360IRQHandler+0xba>
		}

		// We want to update the display only if the charger turns on or off.
		// There is a point where the charger will oscillate between constant voltage and constant current
		// We don't want to update the display during this period.
		bool updateOK = true;
 800249a:	2301      	movs	r3, #1
 800249c:	71fb      	strb	r3, [r7, #7]
		if ((previousChargeState == STS_CHG_FAST_CC) || (previousChargeState == STS_CHG_FAST_CV)) {
 800249e:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <adp5360IRQHandler+0xc8>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d003      	beq.n	80024ae <adp5360IRQHandler+0x62>
 80024a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <adp5360IRQHandler+0xc8>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d109      	bne.n	80024c2 <adp5360IRQHandler+0x76>
			if ((adp5360.chargeStatus.chgStatus == STS_CHG_FAST_CC) || (adp5360.chargeStatus.chgStatus == STS_CHG_FAST_CV)) {
 80024ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <adp5360IRQHandler+0xcc>)
 80024b0:	799b      	ldrb	r3, [r3, #6]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d003      	beq.n	80024be <adp5360IRQHandler+0x72>
 80024b6:	4b18      	ldr	r3, [pc, #96]	@ (8002518 <adp5360IRQHandler+0xcc>)
 80024b8:	799b      	ldrb	r3, [r3, #6]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d101      	bne.n	80024c2 <adp5360IRQHandler+0x76>
				updateOK = false;
 80024be:	2300      	movs	r3, #0
 80024c0:	71fb      	strb	r3, [r7, #7]
			}
		}

		if (updateOK) {
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <adp5360IRQHandler+0x8a>
			irqCheck = true;
 80024c8:	4b14      	ldr	r3, [pc, #80]	@ (800251c <adp5360IRQHandler+0xd0>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask(1<<LT_TASK_CHECK_BATTERY, CFG_SCH_PRIO_0);
 80024ce:	2100      	movs	r1, #0
 80024d0:	2080      	movs	r0, #128	@ 0x80
 80024d2:	f007 f863 	bl	800959c <UTIL_SEQ_SetTask>
		}

		previousChargeState = adp5360.chargeStatus.chgStatus;
 80024d6:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <adp5360IRQHandler+0xcc>)
 80024d8:	799a      	ldrb	r2, [r3, #6]
 80024da:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <adp5360IRQHandler+0xc8>)
 80024dc:	701a      	strb	r2, [r3, #0]
	if ((intFlag1 & ADP_IRQ_FLAG1_SOCACM_INT) >> 6) {
		// Interrupt Due To State of Charge Accumulation Overflow
		// NOTE - NOT ENABLED
	}

	if ((intFlag1 & ADP_IRQ_FLAG1_SOCLOW_INT) >> 7) {
 80024de:	797b      	ldrb	r3, [r7, #5]
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	da12      	bge.n	800250c <adp5360IRQHandler+0xc0>
		// Interrupt Due To Battery Low State of Charge
		// This will fire when the battery reaches 6% SOC
		retVal = adpReadStatus();
 80024e6:	f7ff fe77 	bl	80021d8 <adpReadStatus>
 80024ea:	4603      	mov	r3, r0
 80024ec:	71bb      	strb	r3, [r7, #6]
		if (retVal != LT_OK) {
 80024ee:	79bb      	ldrb	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10a      	bne.n	800250a <adp5360IRQHandler+0xbe>
			return;
		}

		UTIL_SEQ_SetTask(1<<LT_TASK_CHECK_BATTERY, CFG_SCH_PRIO_0);
 80024f4:	2100      	movs	r1, #0
 80024f6:	2080      	movs	r0, #128	@ 0x80
 80024f8:	f007 f850 	bl	800959c <UTIL_SEQ_SetTask>
 80024fc:	e006      	b.n	800250c <adp5360IRQHandler+0xc0>
		return;
 80024fe:	bf00      	nop
 8002500:	e004      	b.n	800250c <adp5360IRQHandler+0xc0>
		return;
 8002502:	bf00      	nop
 8002504:	e002      	b.n	800250c <adp5360IRQHandler+0xc0>
			return;
 8002506:	bf00      	nop
 8002508:	e000      	b.n	800250c <adp5360IRQHandler+0xc0>
			return;
 800250a:	bf00      	nop

	if ((intFlag2 & ADP_IRQ_FLAG2_MR_INT) >> 7) {
		// Interrupt Due To MR Pressed
		// NOTE - NOT ENABLED
	}
}
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200002d1 	.word	0x200002d1
 8002518:	200002b8 	.word	0x200002b8
 800251c:	200002d0 	.word	0x200002d0

08002520 <accelGetTriggeredIrq>:
}

/* IRQ Handle Functions ************************************************/

// Determines which event triggered an interrupt
static uint8_t accelGetTriggeredIrq(void) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
	uint8_t retVal = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	71fb      	strb	r3, [r7, #7]
	uint8_t irqMask;
	retVal = accelReadBytes(SFE_KX13X_INS2, &irqMask, 1);
 800252a:	1dbb      	adds	r3, r7, #6
 800252c:	2201      	movs	r2, #1
 800252e:	4619      	mov	r1, r3
 8002530:	2017      	movs	r0, #23
 8002532:	f000 f893 	bl	800265c <accelReadBytes>
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <accelGetTriggeredIrq+0x24>
		return retVal;
 8002540:	79fb      	ldrb	r3, [r7, #7]
 8002542:	e061      	b.n	8002608 <accelGetTriggeredIrq+0xe8>
	}

	sfe_kx13x_ins2_bitfield_t ins2;
	ins2.all = irqMask;
 8002544:	79bb      	ldrb	r3, [r7, #6]
 8002546:	713b      	strb	r3, [r7, #4]

	if (ins2.bits.tps) retVal |= KX134_IRQ_TILT;
 8002548:	793b      	ldrb	r3, [r7, #4]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d003      	beq.n	800255c <accelGetTriggeredIrq+0x3c>
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f043 0301 	orr.w	r3, r3, #1
 800255a:	71fb      	strb	r3, [r7, #7]
	if (ins2.bits.tdts > 0) retVal |= KX134_IRQ_TAP;
 800255c:	793b      	ldrb	r3, [r7, #4]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <accelGetTriggeredIrq+0x50>
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	71fb      	strb	r3, [r7, #7]
	if (ins2.bits.drdy) retVal |= KX134_IRQ_DATAREADY;
 8002570:	793b      	ldrb	r3, [r7, #4]
 8002572:	f003 0310 	and.w	r3, r3, #16
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <accelGetTriggeredIrq+0x64>
 800257c:	79fb      	ldrb	r3, [r7, #7]
 800257e:	f043 0310 	orr.w	r3, r3, #16
 8002582:	71fb      	strb	r3, [r7, #7]
	if (ins2.bits.wmi) retVal |= KX134_IRQ_WATERMARK;
 8002584:	793b      	ldrb	r3, [r7, #4]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d003      	beq.n	8002598 <accelGetTriggeredIrq+0x78>
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f043 0320 	orr.w	r3, r3, #32
 8002596:	71fb      	strb	r3, [r7, #7]
	if (ins2.bits.bfi) retVal |= KX134_IRQ_BUFFERFULL;
 8002598:	793b      	ldrb	r3, [r7, #4]
 800259a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <accelGetTriggeredIrq+0x8c>
 80025a4:	79fb      	ldrb	r3, [r7, #7]
 80025a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025aa:	71fb      	strb	r3, [r7, #7]
	if (ins2.bits.ffs) retVal |= KX134_IRQ_FREEFALL;
 80025ac:	793b      	ldrb	r3, [r7, #4]
 80025ae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <accelGetTriggeredIrq+0xa0>
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025be:	71fb      	strb	r3, [r7, #7]

	retVal = accelReadBytes(SFE_KX13X_INS3, &irqMask, 1);
 80025c0:	1dbb      	adds	r3, r7, #6
 80025c2:	2201      	movs	r2, #1
 80025c4:	4619      	mov	r1, r3
 80025c6:	2018      	movs	r0, #24
 80025c8:	f000 f848 	bl	800265c <accelReadBytes>
 80025cc:	4603      	mov	r3, r0
 80025ce:	71fb      	strb	r3, [r7, #7]
	if (retVal != LT_OK) {
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <accelGetTriggeredIrq+0xba>
		return retVal;
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	e016      	b.n	8002608 <accelGetTriggeredIrq+0xe8>
	}

	sfe_kx13x_ins3_bitfield_t ins3;
	ins3.all = irqMask;
 80025da:	79bb      	ldrb	r3, [r7, #6]
 80025dc:	703b      	strb	r3, [r7, #0]

	if (ins3.bits.wufs) retVal |= KX134_IRQ_WAKEUP;
 80025de:	783b      	ldrb	r3, [r7, #0]
 80025e0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <accelGetTriggeredIrq+0xd2>
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	71fb      	strb	r3, [r7, #7]
	if (ins3.bits.bts) retVal |= KX134_IRQ_BACKTOSLEEP;
 80025f2:	783b      	ldrb	r3, [r7, #0]
 80025f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <accelGetTriggeredIrq+0xe6>
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	f043 0308 	orr.w	r3, r3, #8
 8002604:	71fb      	strb	r3, [r7, #7]

	return retVal;
 8002606:	79fb      	ldrb	r3, [r7, #7]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3708      	adds	r7, #8
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <accelResetIrq>:

	return retVal;
}

// Resets an IRQ so another interrupt can be triggered
static void accelResetIrq(void) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
	uint8_t setting = 0x00;
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]
	accelWriteBytes(SFE_KX13X_INT_REL, &setting, 1);
 800261a:	1dfb      	adds	r3, r7, #7
 800261c:	2201      	movs	r2, #1
 800261e:	4619      	mov	r1, r3
 8002620:	201a      	movs	r0, #26
 8002622:	f000 f83f 	bl	80026a4 <accelWriteBytes>
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <accelHandleIrqTap>:

// Handles a received IRQ from a tap event
static void accelHandleIrqTap(kx134_irq_pins_t irqPin) {
 800262e:	b580      	push	{r7, lr}
 8002630:	b082      	sub	sp, #8
 8002632:	af00      	add	r7, sp, #0
 8002634:	4603      	mov	r3, r0
 8002636:	71fb      	strb	r3, [r7, #7]
	// TODO - Trigger a sequencer function that updates the LT application state machine
	// Reset the interrupt
	accelResetIrq();
 8002638:	f7ff ffea 	bl	8002610 <accelResetIrq>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <accelHandleIrqWakeup>:

// Handles a received IRQ from a wakeup event
static void accelHandleIrqWakeup(kx134_irq_pins_t irqPin) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	4603      	mov	r3, r0
 800264c:	71fb      	strb	r3, [r7, #7]
	// TODO - Trigger a sequencer function that updates the LT application state machine
	accelResetIrq();
 800264e:	f7ff ffdf 	bl	8002610 <accelResetIrq>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <accelReadBytes>:
  * @param  <regAddr> Address of the target register
  * @param  <dest> Pointer to the storage location of the read data
  * @param  <size> Number of bytes to read
  * @retval <lt_err_t> Returns an error code
  */
static lt_err_t accelReadBytes(uint8_t regAddr, uint8_t *dest, uint8_t size) {
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b087      	sub	sp, #28
 8002660:	af04      	add	r7, sp, #16
 8002662:	4603      	mov	r3, r0
 8002664:	6039      	str	r1, [r7, #0]
 8002666:	71fb      	strb	r3, [r7, #7]
 8002668:	4613      	mov	r3, r2
 800266a:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Read(kx134i2c, i2cAddr, regAddr, I2C_MEMADD_SIZE_8BIT, dest, size, ACCEL_I2C_TIMEOUT);
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <accelReadBytes+0x40>)
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	4b0b      	ldr	r3, [pc, #44]	@ (80026a0 <accelReadBytes+0x44>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	461c      	mov	r4, r3
 8002676:	79fb      	ldrb	r3, [r7, #7]
 8002678:	b29a      	uxth	r2, r3
 800267a:	79bb      	ldrb	r3, [r7, #6]
 800267c:	b29b      	uxth	r3, r3
 800267e:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8002682:	9102      	str	r1, [sp, #8]
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2301      	movs	r3, #1
 800268c:	4621      	mov	r1, r4
 800268e:	f000 ff87 	bl	80035a0 <HAL_I2C_Mem_Read>
 8002692:	4603      	mov	r3, r0
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bd90      	pop	{r4, r7, pc}
 800269c:	200002ec 	.word	0x200002ec
 80026a0:	20000018 	.word	0x20000018

080026a4 <accelWriteBytes>:
  * @param  <regAddr> Address of the target register
  * @param  <src> Pointer to the data to write
  * @param  <size> Number of bytes to write
  * @retval <lt_err_t> Returns an error code
  */
static lt_err_t accelWriteBytes(uint8_t regAddr, uint8_t *src, uint8_t size) {
 80026a4:	b590      	push	{r4, r7, lr}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af04      	add	r7, sp, #16
 80026aa:	4603      	mov	r3, r0
 80026ac:	6039      	str	r1, [r7, #0]
 80026ae:	71fb      	strb	r3, [r7, #7]
 80026b0:	4613      	mov	r3, r2
 80026b2:	71bb      	strb	r3, [r7, #6]
	return HAL_I2C_Mem_Write(kx134i2c, i2cAddr, regAddr, I2C_MEMADD_SIZE_8BIT, src, size, ACCEL_I2C_TIMEOUT);
 80026b4:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <accelWriteBytes+0x40>)
 80026b6:	6818      	ldr	r0, [r3, #0]
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <accelWriteBytes+0x44>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	461c      	mov	r4, r3
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	79bb      	ldrb	r3, [r7, #6]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80026ca:	9102      	str	r1, [sp, #8]
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2301      	movs	r3, #1
 80026d4:	4621      	mov	r1, r4
 80026d6:	f000 fe4f 	bl	8003378 <HAL_I2C_Mem_Write>
 80026da:	4603      	mov	r3, r0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd90      	pop	{r4, r7, pc}
 80026e4:	200002ec 	.word	0x200002ec
 80026e8:	20000018 	.word	0x20000018

080026ec <kx134IRQHandler>:
	accelConvertOutputData();

	return retVal;
}

void kx134IRQHandler(kx134_irq_pins_t irqPin) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
	// Determine what triggered the IRQ
	uint8_t irqMask = kx134Handle.settings.configuredIrqMask[irqPin];
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	4a43      	ldr	r2, [pc, #268]	@ (8002808 <kx134IRQHandler+0x11c>)
 80026fa:	4413      	add	r3, r2
 80026fc:	7cdb      	ldrb	r3, [r3, #19]
 80026fe:	73bb      	strb	r3, [r7, #14]
	uint8_t irqTrigger = accelGetTriggeredIrq();
 8002700:	f7ff ff0e 	bl	8002520 <accelGetTriggeredIrq>
 8002704:	4603      	mov	r3, r0
 8002706:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 8; i++) {
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e073      	b.n	80027f6 <kx134IRQHandler+0x10a>
		kx134_irq_type_t irqType = (0x01 << i);
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2201      	movs	r2, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	733b      	strb	r3, [r7, #12]
		if ((irqType & irqMask & irqTrigger) == 0) {
 8002718:	7b3a      	ldrb	r2, [r7, #12]
 800271a:	7bbb      	ldrb	r3, [r7, #14]
 800271c:	4013      	ands	r3, r2
 800271e:	b2da      	uxtb	r2, r3
 8002720:	7b7b      	ldrb	r3, [r7, #13]
 8002722:	4013      	ands	r3, r2
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d05b      	beq.n	80027e2 <kx134IRQHandler+0xf6>
			continue;
		}
		switch (irqType) {
 800272a:	7b3b      	ldrb	r3, [r7, #12]
 800272c:	2b80      	cmp	r3, #128	@ 0x80
 800272e:	d05a      	beq.n	80027e6 <kx134IRQHandler+0xfa>
 8002730:	2b80      	cmp	r3, #128	@ 0x80
 8002732:	dc5a      	bgt.n	80027ea <kx134IRQHandler+0xfe>
 8002734:	2b20      	cmp	r3, #32
 8002736:	dc47      	bgt.n	80027c8 <kx134IRQHandler+0xdc>
 8002738:	2b00      	cmp	r3, #0
 800273a:	dd56      	ble.n	80027ea <kx134IRQHandler+0xfe>
 800273c:	3b01      	subs	r3, #1
 800273e:	2b1f      	cmp	r3, #31
 8002740:	d853      	bhi.n	80027ea <kx134IRQHandler+0xfe>
 8002742:	a201      	add	r2, pc, #4	@ (adr r2, 8002748 <kx134IRQHandler+0x5c>)
 8002744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002748:	080027eb 	.word	0x080027eb
 800274c:	080027cf 	.word	0x080027cf
 8002750:	080027eb 	.word	0x080027eb
 8002754:	080027d9 	.word	0x080027d9
 8002758:	080027eb 	.word	0x080027eb
 800275c:	080027eb 	.word	0x080027eb
 8002760:	080027eb 	.word	0x080027eb
 8002764:	080027eb 	.word	0x080027eb
 8002768:	080027eb 	.word	0x080027eb
 800276c:	080027eb 	.word	0x080027eb
 8002770:	080027eb 	.word	0x080027eb
 8002774:	080027eb 	.word	0x080027eb
 8002778:	080027eb 	.word	0x080027eb
 800277c:	080027eb 	.word	0x080027eb
 8002780:	080027eb 	.word	0x080027eb
 8002784:	080027eb 	.word	0x080027eb
 8002788:	080027eb 	.word	0x080027eb
 800278c:	080027eb 	.word	0x080027eb
 8002790:	080027eb 	.word	0x080027eb
 8002794:	080027eb 	.word	0x080027eb
 8002798:	080027eb 	.word	0x080027eb
 800279c:	080027eb 	.word	0x080027eb
 80027a0:	080027eb 	.word	0x080027eb
 80027a4:	080027eb 	.word	0x080027eb
 80027a8:	080027eb 	.word	0x080027eb
 80027ac:	080027eb 	.word	0x080027eb
 80027b0:	080027eb 	.word	0x080027eb
 80027b4:	080027eb 	.word	0x080027eb
 80027b8:	080027eb 	.word	0x080027eb
 80027bc:	080027eb 	.word	0x080027eb
 80027c0:	080027eb 	.word	0x080027eb
 80027c4:	080027eb 	.word	0x080027eb
 80027c8:	2b40      	cmp	r3, #64	@ 0x40
 80027ca:	d010      	beq.n	80027ee <kx134IRQHandler+0x102>
			break;
		case KX134_IRQ_FREEFALL:
			// Not Supported Yet.
			break;
		default:
			break;
 80027cc:	e00d      	b.n	80027ea <kx134IRQHandler+0xfe>
			accelHandleIrqWakeup(irqPin);
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff ff37 	bl	8002644 <accelHandleIrqWakeup>
			break;
 80027d6:	e00b      	b.n	80027f0 <kx134IRQHandler+0x104>
			accelHandleIrqTap(irqPin);
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff ff27 	bl	800262e <accelHandleIrqTap>
			break;
 80027e0:	e006      	b.n	80027f0 <kx134IRQHandler+0x104>
			continue;
 80027e2:	bf00      	nop
 80027e4:	e004      	b.n	80027f0 <kx134IRQHandler+0x104>
			break;
 80027e6:	bf00      	nop
 80027e8:	e002      	b.n	80027f0 <kx134IRQHandler+0x104>
			break;
 80027ea:	bf00      	nop
 80027ec:	e000      	b.n	80027f0 <kx134IRQHandler+0x104>
			break;
 80027ee:	bf00      	nop
	for (uint8_t i = 0; i < 8; i++) {
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	3301      	adds	r3, #1
 80027f4:	73fb      	strb	r3, [r7, #15]
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
 80027f8:	2b07      	cmp	r3, #7
 80027fa:	d988      	bls.n	800270e <kx134IRQHandler+0x22>
		}

	}
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	200002d4 	.word	0x200002d4

0800280c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002812:	2300      	movs	r3, #0
 8002814:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002816:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <HAL_Init+0x3c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a0b      	ldr	r2, [pc, #44]	@ (8002848 <HAL_Init+0x3c>)
 800281c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002820:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002822:	2003      	movs	r0, #3
 8002824:	f000 f9c8 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002828:	200f      	movs	r0, #15
 800282a:	f000 f80f 	bl	800284c <HAL_InitTick>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	71fb      	strb	r3, [r7, #7]
 8002838:	e001      	b.n	800283e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800283a:	f7ff fa94 	bl	8001d66 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800283e:	79fb      	ldrb	r3, [r7, #7]
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	58004000 	.word	0x58004000

0800284c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002858:	4b17      	ldr	r3, [pc, #92]	@ (80028b8 <HAL_InitTick+0x6c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d024      	beq.n	80028aa <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002860:	f002 fbca 	bl	8004ff8 <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b14      	ldr	r3, [pc, #80]	@ (80028b8 <HAL_InitTick+0x6c>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	4619      	mov	r1, r3
 800286c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002870:	fbb3 f3f1 	udiv	r3, r3, r1
 8002874:	fbb2 f3f3 	udiv	r3, r2, r3
 8002878:	4618      	mov	r0, r3
 800287a:	f000 f9de 	bl	8002c3a <HAL_SYSTICK_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10f      	bne.n	80028a4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b0f      	cmp	r3, #15
 8002888:	d809      	bhi.n	800289e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800288a:	2200      	movs	r2, #0
 800288c:	6879      	ldr	r1, [r7, #4]
 800288e:	f04f 30ff 	mov.w	r0, #4294967295
 8002892:	f000 f99c 	bl	8002bce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002896:	4a09      	ldr	r2, [pc, #36]	@ (80028bc <HAL_InitTick+0x70>)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6013      	str	r3, [r2, #0]
 800289c:	e007      	b.n	80028ae <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e004      	b.n	80028ae <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000020 	.word	0x20000020
 80028bc:	2000001c 	.word	0x2000001c

080028c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028c4:	4b06      	ldr	r3, [pc, #24]	@ (80028e0 <HAL_IncTick+0x20>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b06      	ldr	r3, [pc, #24]	@ (80028e4 <HAL_IncTick+0x24>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	4a04      	ldr	r2, [pc, #16]	@ (80028e4 <HAL_IncTick+0x24>)
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000020 	.word	0x20000020
 80028e4:	200002f0 	.word	0x200002f0

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b03      	ldr	r3, [pc, #12]	@ (80028fc <HAL_GetTick+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	200002f0 	.word	0x200002f0

08002900 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002904:	4b03      	ldr	r3, [pc, #12]	@ (8002914 <HAL_GetTickPrio+0x14>)
 8002906:	681b      	ldr	r3, [r3, #0]
}
 8002908:	4618      	mov	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	2000001c 	.word	0x2000001c

08002918 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800291c:	4b05      	ldr	r3, [pc, #20]	@ (8002934 <HAL_SuspendTick+0x1c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a04      	ldr	r2, [pc, #16]	@ (8002934 <HAL_SuspendTick+0x1c>)
 8002922:	f023 0302 	bic.w	r3, r3, #2
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e010 	.word	0xe000e010

08002938 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800293c:	4b05      	ldr	r3, [pc, #20]	@ (8002954 <HAL_ResumeTick+0x1c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_ResumeTick+0x1c>)
 8002942:	f043 0302 	orr.w	r3, r3, #2
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000e010 	.word	0xe000e010

08002958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002968:	4b0c      	ldr	r3, [pc, #48]	@ (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002974:	4013      	ands	r3, r2
 8002976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002980:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298a:	4a04      	ldr	r2, [pc, #16]	@ (800299c <__NVIC_SetPriorityGrouping+0x44>)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	60d3      	str	r3, [r2, #12]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a4:	4b04      	ldr	r3, [pc, #16]	@ (80029b8 <__NVIC_GetPriorityGrouping+0x18>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	0a1b      	lsrs	r3, r3, #8
 80029aa:	f003 0307 	and.w	r3, r3, #7
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	db0b      	blt.n	80029e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	f003 021f 	and.w	r2, r3, #31
 80029d4:	4907      	ldr	r1, [pc, #28]	@ (80029f4 <__NVIC_EnableIRQ+0x38>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	2001      	movs	r0, #1
 80029de:	fa00 f202 	lsl.w	r2, r0, r2
 80029e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	e000e100 	.word	0xe000e100

080029f8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db12      	blt.n	8002a30 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	490a      	ldr	r1, [pc, #40]	@ (8002a3c <__NVIC_DisableIRQ+0x44>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2001      	movs	r0, #1
 8002a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1e:	3320      	adds	r3, #32
 8002a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a24:	f3bf 8f4f 	dsb	sy
}
 8002a28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a2a:	f3bf 8f6f 	isb	sy
}
 8002a2e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	db0c      	blt.n	8002a6c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	f003 021f 	and.w	r2, r3, #31
 8002a58:	4907      	ldr	r1, [pc, #28]	@ (8002a78 <__NVIC_SetPendingIRQ+0x38>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	2001      	movs	r0, #1
 8002a62:	fa00 f202 	lsl.w	r2, r0, r2
 8002a66:	3340      	adds	r3, #64	@ 0x40
 8002a68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000e100 	.word	0xe000e100

08002a7c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	db0c      	blt.n	8002aa8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	4907      	ldr	r1, [pc, #28]	@ (8002ab4 <__NVIC_ClearPendingIRQ+0x38>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa2:	3360      	adds	r3, #96	@ 0x60
 8002aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr
 8002ab4:	e000e100 	.word	0xe000e100

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	@ (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	@ (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	@ 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	@ 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00f      	b.n	8002baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <SysTick_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b92:	210f      	movs	r1, #15
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f7ff ff8e 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9c:	4b05      	ldr	r3, [pc, #20]	@ (8002bb4 <SysTick_Config+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba2:	4b04      	ldr	r3, [pc, #16]	@ (8002bb4 <SysTick_Config+0x40>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff fec9 	bl	8002958 <__NVIC_SetPriorityGrouping>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff fee0 	bl	80029a0 <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff90 	bl	8002b0c <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5f 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fed3 	bl	80029bc <__NVIC_EnableIRQ>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	4603      	mov	r3, r0
 8002c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fee3 	bl	80029f8 <__NVIC_DisableIRQ>
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f7ff ff96 	bl	8002b74 <SysTick_Config>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3708      	adds	r7, #8
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff feed 	bl	8002a40 <__NVIC_SetPendingIRQ>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	4603      	mov	r3, r0
 8002c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff fefd 	bl	8002a7c <__NVIC_ClearPendingIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
	...

08002c8c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9a:	e146      	b.n	8002f2a <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	4013      	ands	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8138 	beq.w	8002f24 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d005      	beq.n	8002ccc <HAL_GPIO_Init+0x40>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d130      	bne.n	8002d2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	693a      	ldr	r2, [r7, #16]
 8002cfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d02:	2201      	movs	r2, #1
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	f003 0201 	and.w	r2, r3, #1
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	4313      	orrs	r3, r2
 8002d26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d017      	beq.n	8002d6a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	2203      	movs	r2, #3
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d123      	bne.n	8002dbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	08da      	lsrs	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3208      	adds	r2, #8
 8002d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43db      	mvns	r3, r3
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4013      	ands	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	691a      	ldr	r2, [r3, #16]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	693a      	ldr	r2, [r7, #16]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	08da      	lsrs	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	3208      	adds	r2, #8
 8002db8:	6939      	ldr	r1, [r7, #16]
 8002dba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f003 0203 	and.w	r2, r3, #3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	693a      	ldr	r2, [r7, #16]
 8002df0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8092 	beq.w	8002f24 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002e00:	4a51      	ldr	r2, [pc, #324]	@ (8002f48 <HAL_GPIO_Init+0x2bc>)
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	3302      	adds	r3, #2
 8002e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e2a:	d013      	beq.n	8002e54 <HAL_GPIO_Init+0x1c8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a47      	ldr	r2, [pc, #284]	@ (8002f4c <HAL_GPIO_Init+0x2c0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00d      	beq.n	8002e50 <HAL_GPIO_Init+0x1c4>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a46      	ldr	r2, [pc, #280]	@ (8002f50 <HAL_GPIO_Init+0x2c4>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <HAL_GPIO_Init+0x1c0>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a45      	ldr	r2, [pc, #276]	@ (8002f54 <HAL_GPIO_Init+0x2c8>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_GPIO_Init+0x1bc>
 8002e44:	2304      	movs	r3, #4
 8002e46:	e006      	b.n	8002e56 <HAL_GPIO_Init+0x1ca>
 8002e48:	2307      	movs	r3, #7
 8002e4a:	e004      	b.n	8002e56 <HAL_GPIO_Init+0x1ca>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e002      	b.n	8002e56 <HAL_GPIO_Init+0x1ca>
 8002e50:	2301      	movs	r3, #1
 8002e52:	e000      	b.n	8002e56 <HAL_GPIO_Init+0x1ca>
 8002e54:	2300      	movs	r3, #0
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	f002 0203 	and.w	r2, r2, #3
 8002e5c:	0092      	lsls	r2, r2, #2
 8002e5e:	4093      	lsls	r3, r2
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e66:	4938      	ldr	r1, [pc, #224]	@ (8002f48 <HAL_GPIO_Init+0x2bc>)
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	089b      	lsrs	r3, r3, #2
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e74:	4b38      	ldr	r3, [pc, #224]	@ (8002f58 <HAL_GPIO_Init+0x2cc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4013      	ands	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 8002e90:	693a      	ldr	r2, [r7, #16]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e98:	4a2f      	ldr	r2, [pc, #188]	@ (8002f58 <HAL_GPIO_Init+0x2cc>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8002f58 <HAL_GPIO_Init+0x2cc>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ec2:	4a25      	ldr	r2, [pc, #148]	@ (8002f58 <HAL_GPIO_Init+0x2cc>)
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ec8:	4b23      	ldr	r3, [pc, #140]	@ (8002f58 <HAL_GPIO_Init+0x2cc>)
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002eee:	4a1a      	ldr	r2, [pc, #104]	@ (8002f58 <HAL_GPIO_Init+0x2cc>)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8002ef6:	4b18      	ldr	r3, [pc, #96]	@ (8002f58 <HAL_GPIO_Init+0x2cc>)
 8002ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002f58 <HAL_GPIO_Init+0x2cc>)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	3301      	adds	r3, #1
 8002f28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f47f aeb1 	bne.w	8002c9c <HAL_GPIO_Init+0x10>
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	bf00      	nop
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	48000400 	.word	0x48000400
 8002f50:	48000800 	.word	0x48000800
 8002f54:	48001000 	.word	0x48001000
 8002f58:	58000800 	.word	0x58000800

08002f5c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002f6a:	e0b5      	b.n	80030d8 <HAL_GPIO_DeInit+0x17c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80a8 	beq.w	80030d2 <HAL_GPIO_DeInit+0x176>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002f82:	4a5c      	ldr	r2, [pc, #368]	@ (80030f4 <HAL_GPIO_DeInit+0x198>)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	089b      	lsrs	r3, r3, #2
 8002f88:	3302      	adds	r3, #2
 8002f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	220f      	movs	r2, #15
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002faa:	d013      	beq.n	8002fd4 <HAL_GPIO_DeInit+0x78>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a52      	ldr	r2, [pc, #328]	@ (80030f8 <HAL_GPIO_DeInit+0x19c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00d      	beq.n	8002fd0 <HAL_GPIO_DeInit+0x74>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a51      	ldr	r2, [pc, #324]	@ (80030fc <HAL_GPIO_DeInit+0x1a0>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d007      	beq.n	8002fcc <HAL_GPIO_DeInit+0x70>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a50      	ldr	r2, [pc, #320]	@ (8003100 <HAL_GPIO_DeInit+0x1a4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d101      	bne.n	8002fc8 <HAL_GPIO_DeInit+0x6c>
 8002fc4:	2304      	movs	r3, #4
 8002fc6:	e006      	b.n	8002fd6 <HAL_GPIO_DeInit+0x7a>
 8002fc8:	2307      	movs	r3, #7
 8002fca:	e004      	b.n	8002fd6 <HAL_GPIO_DeInit+0x7a>
 8002fcc:	2302      	movs	r3, #2
 8002fce:	e002      	b.n	8002fd6 <HAL_GPIO_DeInit+0x7a>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e000      	b.n	8002fd6 <HAL_GPIO_DeInit+0x7a>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	f002 0203 	and.w	r2, r2, #3
 8002fdc:	0092      	lsls	r2, r2, #2
 8002fde:	4093      	lsls	r3, r2
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d136      	bne.n	8003054 <HAL_GPIO_DeInit+0xf8>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002fe6:	4b47      	ldr	r3, [pc, #284]	@ (8003104 <HAL_GPIO_DeInit+0x1a8>)
 8002fe8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	4944      	ldr	r1, [pc, #272]	@ (8003104 <HAL_GPIO_DeInit+0x1a8>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002ff8:	4b42      	ldr	r3, [pc, #264]	@ (8003104 <HAL_GPIO_DeInit+0x1a8>)
 8002ffa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	4940      	ldr	r1, [pc, #256]	@ (8003104 <HAL_GPIO_DeInit+0x1a8>)
 8003004:	4013      	ands	r3, r2
 8003006:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800300a:	4b3e      	ldr	r3, [pc, #248]	@ (8003104 <HAL_GPIO_DeInit+0x1a8>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	493c      	ldr	r1, [pc, #240]	@ (8003104 <HAL_GPIO_DeInit+0x1a8>)
 8003014:	4013      	ands	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003018:	4b3a      	ldr	r3, [pc, #232]	@ (8003104 <HAL_GPIO_DeInit+0x1a8>)
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	4938      	ldr	r1, [pc, #224]	@ (8003104 <HAL_GPIO_DeInit+0x1a8>)
 8003022:	4013      	ands	r3, r2
 8003024:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003036:	4a2f      	ldr	r2, [pc, #188]	@ (80030f4 <HAL_GPIO_DeInit+0x198>)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	43da      	mvns	r2, r3
 8003046:	482b      	ldr	r0, [pc, #172]	@ (80030f4 <HAL_GPIO_DeInit+0x198>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	400a      	ands	r2, r1
 800304e:	3302      	adds	r3, #2
 8003050:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2103      	movs	r1, #3
 800305e:	fa01 f303 	lsl.w	r3, r1, r3
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3208      	adds	r2, #8
 8003070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	220f      	movs	r2, #15
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	08d2      	lsrs	r2, r2, #3
 8003088:	4019      	ands	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2103      	movs	r1, #3
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	401a      	ands	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	2101      	movs	r1, #1
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	2103      	movs	r1, #3
 80030c6:	fa01 f303 	lsl.w	r3, r1, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	401a      	ands	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	3301      	adds	r3, #1
 80030d6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f af43 	bne.w	8002f6c <HAL_GPIO_DeInit+0x10>
  }
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40010000 	.word	0x40010000
 80030f8:	48000400 	.word	0x48000400
 80030fc:	48000800 	.word	0x48000800
 8003100:	48001000 	.word	0x48001000
 8003104:	58000800 	.word	0x58000800

08003108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	807b      	strh	r3, [r7, #2]
 8003114:	4613      	mov	r3, r2
 8003116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003118:	787b      	ldrb	r3, [r7, #1]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800311e:	887a      	ldrh	r2, [r7, #2]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003124:	e002      	b.n	800312c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	460b      	mov	r3, r1
 8003142:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800314a:	887a      	ldrh	r2, [r7, #2]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4013      	ands	r3, r2
 8003150:	041a      	lsls	r2, r3, #16
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	43d9      	mvns	r1, r3
 8003156:	887b      	ldrh	r3, [r7, #2]
 8003158:	400b      	ands	r3, r1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	619a      	str	r2, [r3, #24]
}
 8003160:	bf00      	nop
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003176:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003182:	4a05      	ldr	r2, [pc, #20]	@ (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fd fa15 	bl	80005ba <HAL_GPIO_EXTI_Callback>
  }
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	58000800 	.word	0x58000800

0800319c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80031a2:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <HAL_HSEM_IRQHandler+0x30>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80031a8:	4b08      	ldr	r3, [pc, #32]	@ (80031cc <HAL_HSEM_IRQHandler+0x30>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	4906      	ldr	r1, [pc, #24]	@ (80031cc <HAL_HSEM_IRQHandler+0x30>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80031b6:	4a05      	ldr	r2, [pc, #20]	@ (80031cc <HAL_HSEM_IRQHandler+0x30>)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 f807 	bl	80031d0 <HAL_HSEM_FreeCallback>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	58001500 	.word	0x58001500

080031d0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e08d      	b.n	8003312 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d106      	bne.n	8003210 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe fdbc 	bl	8001d88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	@ 0x24
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003234:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003244:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e006      	b.n	800326c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800326a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d108      	bne.n	8003286 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003282:	605a      	str	r2, [r3, #4]
 8003284:	e007      	b.n	8003296 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003294:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68da      	ldr	r2, [r3, #12]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691a      	ldr	r2, [r3, #16]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69d9      	ldr	r1, [r3, #28]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a1a      	ldr	r2, [r3, #32]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 0201 	orr.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e021      	b.n	8003370 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2224      	movs	r2, #36	@ 0x24
 8003330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f7fe fd67 	bl	8001e18 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af02      	add	r7, sp, #8
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	4608      	mov	r0, r1
 8003382:	4611      	mov	r1, r2
 8003384:	461a      	mov	r2, r3
 8003386:	4603      	mov	r3, r0
 8003388:	817b      	strh	r3, [r7, #10]
 800338a:	460b      	mov	r3, r1
 800338c:	813b      	strh	r3, [r7, #8]
 800338e:	4613      	mov	r3, r2
 8003390:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b20      	cmp	r3, #32
 800339c:	f040 80f9 	bne.w	8003592 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_I2C_Mem_Write+0x34>
 80033a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d105      	bne.n	80033b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0ed      	b.n	8003594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_Mem_Write+0x4e>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e0e6      	b.n	8003594 <HAL_I2C_Mem_Write+0x21c>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033ce:	f7ff fa8b 	bl	80028e8 <HAL_GetTick>
 80033d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	2319      	movs	r3, #25
 80033da:	2201      	movs	r2, #1
 80033dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033e0:	68f8      	ldr	r0, [r7, #12]
 80033e2:	f000 fac3 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0d1      	b.n	8003594 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2221      	movs	r2, #33	@ 0x21
 80033f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2240      	movs	r2, #64	@ 0x40
 80033fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a3a      	ldr	r2, [r7, #32]
 800340a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003410:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003418:	88f8      	ldrh	r0, [r7, #6]
 800341a:	893a      	ldrh	r2, [r7, #8]
 800341c:	8979      	ldrh	r1, [r7, #10]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	9301      	str	r3, [sp, #4]
 8003422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	4603      	mov	r3, r0
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f9d3 	bl	80037d4 <I2C_RequestMemoryWrite>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d005      	beq.n	8003440 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e0a9      	b.n	8003594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2bff      	cmp	r3, #255	@ 0xff
 8003448:	d90e      	bls.n	8003468 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	22ff      	movs	r2, #255	@ 0xff
 800344e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003454:	b2da      	uxtb	r2, r3
 8003456:	8979      	ldrh	r1, [r7, #10]
 8003458:	2300      	movs	r3, #0
 800345a:	9300      	str	r3, [sp, #0]
 800345c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 fc47 	bl	8003cf4 <I2C_TransferConfig>
 8003466:	e00f      	b.n	8003488 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003476:	b2da      	uxtb	r2, r3
 8003478:	8979      	ldrh	r1, [r7, #10]
 800347a:	2300      	movs	r3, #0
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f000 fc36 	bl	8003cf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fac6 	bl	8003a1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e07b      	b.n	8003594 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d034      	beq.n	8003540 <HAL_I2C_Mem_Write+0x1c8>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d130      	bne.n	8003540 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e4:	2200      	movs	r2, #0
 80034e6:	2180      	movs	r1, #128	@ 0x80
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 fa3f 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e04d      	b.n	8003594 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2bff      	cmp	r3, #255	@ 0xff
 8003500:	d90e      	bls.n	8003520 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	22ff      	movs	r2, #255	@ 0xff
 8003506:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350c:	b2da      	uxtb	r2, r3
 800350e:	8979      	ldrh	r1, [r7, #10]
 8003510:	2300      	movs	r3, #0
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fbeb 	bl	8003cf4 <I2C_TransferConfig>
 800351e:	e00f      	b.n	8003540 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352e:	b2da      	uxtb	r2, r3
 8003530:	8979      	ldrh	r1, [r7, #10]
 8003532:	2300      	movs	r3, #0
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f000 fbda 	bl	8003cf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d19e      	bne.n	8003488 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800354e:	68f8      	ldr	r0, [r7, #12]
 8003550:	f000 faac 	bl	8003aac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e01a      	b.n	8003594 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2220      	movs	r2, #32
 8003564:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6859      	ldr	r1, [r3, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <HAL_I2C_Mem_Write+0x224>)
 8003572:	400b      	ands	r3, r1
 8003574:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2220      	movs	r2, #32
 800357a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	fe00e800 	.word	0xfe00e800

080035a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b088      	sub	sp, #32
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	461a      	mov	r2, r3
 80035ae:	4603      	mov	r3, r0
 80035b0:	817b      	strh	r3, [r7, #10]
 80035b2:	460b      	mov	r3, r1
 80035b4:	813b      	strh	r3, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	f040 80fd 	bne.w	80037c2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_I2C_Mem_Read+0x34>
 80035ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d105      	bne.n	80035e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0f1      	b.n	80037c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Mem_Read+0x4e>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e0ea      	b.n	80037c4 <HAL_I2C_Mem_Read+0x224>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035f6:	f7ff f977 	bl	80028e8 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	2319      	movs	r3, #25
 8003602:	2201      	movs	r2, #1
 8003604:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f9af 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e0d5      	b.n	80037c4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2222      	movs	r2, #34	@ 0x22
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2240      	movs	r2, #64	@ 0x40
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a3a      	ldr	r2, [r7, #32]
 8003632:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003638:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003640:	88f8      	ldrh	r0, [r7, #6]
 8003642:	893a      	ldrh	r2, [r7, #8]
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	4603      	mov	r3, r0
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f913 	bl	800387c <I2C_RequestMemoryRead>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0ad      	b.n	80037c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366c:	b29b      	uxth	r3, r3
 800366e:	2bff      	cmp	r3, #255	@ 0xff
 8003670:	d90e      	bls.n	8003690 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	22ff      	movs	r2, #255	@ 0xff
 8003676:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	b2da      	uxtb	r2, r3
 800367e:	8979      	ldrh	r1, [r7, #10]
 8003680:	4b52      	ldr	r3, [pc, #328]	@ (80037cc <HAL_I2C_Mem_Read+0x22c>)
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 fb33 	bl	8003cf4 <I2C_TransferConfig>
 800368e:	e00f      	b.n	80036b0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	8979      	ldrh	r1, [r7, #10]
 80036a2:	4b4a      	ldr	r3, [pc, #296]	@ (80037cc <HAL_I2C_Mem_Read+0x22c>)
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fb22 	bl	8003cf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b6:	2200      	movs	r2, #0
 80036b8:	2104      	movs	r1, #4
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f956 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e07c      	b.n	80037c4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d4:	b2d2      	uxtb	r2, r2
 80036d6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	1c5a      	adds	r2, r3, #1
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e6:	3b01      	subs	r3, #1
 80036e8:	b29a      	uxth	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b29a      	uxth	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003700:	b29b      	uxth	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d034      	beq.n	8003770 <HAL_I2C_Mem_Read+0x1d0>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370a:	2b00      	cmp	r3, #0
 800370c:	d130      	bne.n	8003770 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003714:	2200      	movs	r2, #0
 8003716:	2180      	movs	r1, #128	@ 0x80
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f000 f927 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e04d      	b.n	80037c4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372c:	b29b      	uxth	r3, r3
 800372e:	2bff      	cmp	r3, #255	@ 0xff
 8003730:	d90e      	bls.n	8003750 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	22ff      	movs	r2, #255	@ 0xff
 8003736:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373c:	b2da      	uxtb	r2, r3
 800373e:	8979      	ldrh	r1, [r7, #10]
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fad3 	bl	8003cf4 <I2C_TransferConfig>
 800374e:	e00f      	b.n	8003770 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800375e:	b2da      	uxtb	r2, r3
 8003760:	8979      	ldrh	r1, [r7, #10]
 8003762:	2300      	movs	r3, #0
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 fac2 	bl	8003cf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003774:	b29b      	uxth	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d19a      	bne.n	80036b0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f994 	bl	8003aac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e01a      	b.n	80037c4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	2220      	movs	r2, #32
 8003794:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_I2C_Mem_Read+0x230>)
 80037a2:	400b      	ands	r3, r1
 80037a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	e000      	b.n	80037c4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037c2:	2302      	movs	r3, #2
  }
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3718      	adds	r7, #24
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	80002400 	.word	0x80002400
 80037d0:	fe00e800 	.word	0xfe00e800

080037d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b086      	sub	sp, #24
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	4608      	mov	r0, r1
 80037de:	4611      	mov	r1, r2
 80037e0:	461a      	mov	r2, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	817b      	strh	r3, [r7, #10]
 80037e6:	460b      	mov	r3, r1
 80037e8:	813b      	strh	r3, [r7, #8]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	8979      	ldrh	r1, [r7, #10]
 80037f4:	4b20      	ldr	r3, [pc, #128]	@ (8003878 <I2C_RequestMemoryWrite+0xa4>)
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fa79 	bl	8003cf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	69b9      	ldr	r1, [r7, #24]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f909 	bl	8003a1e <I2C_WaitOnTXISFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e02c      	b.n	8003870 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800381c:	893b      	ldrh	r3, [r7, #8]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	629a      	str	r2, [r3, #40]	@ 0x28
 8003826:	e015      	b.n	8003854 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003828:	893b      	ldrh	r3, [r7, #8]
 800382a:	0a1b      	lsrs	r3, r3, #8
 800382c:	b29b      	uxth	r3, r3
 800382e:	b2da      	uxtb	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003836:	69fa      	ldr	r2, [r7, #28]
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 f8ef 	bl	8003a1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e012      	b.n	8003870 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800384a:	893b      	ldrh	r3, [r7, #8]
 800384c:	b2da      	uxtb	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2200      	movs	r2, #0
 800385c:	2180      	movs	r1, #128	@ 0x80
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 f884 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}
 8003878:	80002000 	.word	0x80002000

0800387c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	4608      	mov	r0, r1
 8003886:	4611      	mov	r1, r2
 8003888:	461a      	mov	r2, r3
 800388a:	4603      	mov	r3, r0
 800388c:	817b      	strh	r3, [r7, #10]
 800388e:	460b      	mov	r3, r1
 8003890:	813b      	strh	r3, [r7, #8]
 8003892:	4613      	mov	r3, r2
 8003894:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	8979      	ldrh	r1, [r7, #10]
 800389c:	4b20      	ldr	r3, [pc, #128]	@ (8003920 <I2C_RequestMemoryRead+0xa4>)
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2300      	movs	r3, #0
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fa26 	bl	8003cf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	69b9      	ldr	r1, [r7, #24]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 f8b6 	bl	8003a1e <I2C_WaitOnTXISFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e02c      	b.n	8003916 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d105      	bne.n	80038ce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038c2:	893b      	ldrh	r3, [r7, #8]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80038cc:	e015      	b.n	80038fa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038ce:	893b      	ldrh	r3, [r7, #8]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	b2da      	uxtb	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038dc:	69fa      	ldr	r2, [r7, #28]
 80038de:	69b9      	ldr	r1, [r7, #24]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f89c 	bl	8003a1e <I2C_WaitOnTXISFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e012      	b.n	8003916 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2200      	movs	r2, #0
 8003902:	2140      	movs	r1, #64	@ 0x40
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f831 	bl	800396c <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	80002000 	.word	0x80002000

08003924 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d103      	bne.n	8003942 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d007      	beq.n	8003960 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699a      	ldr	r2, [r3, #24]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	619a      	str	r2, [r3, #24]
  }
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397c:	e03b      	b.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	6839      	ldr	r1, [r7, #0]
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f8d6 	bl	8003b34 <I2C_IsErrorOccurred>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e041      	b.n	8003a16 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d02d      	beq.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fe ffa5 	bl	80028e8 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d122      	bne.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	4013      	ands	r3, r2
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	429a      	cmp	r2, r3
 80039be:	bf0c      	ite	eq
 80039c0:	2301      	moveq	r3, #1
 80039c2:	2300      	movne	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d113      	bne.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_lt_err_tIMEOUT;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2220      	movs	r2, #32
 80039de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00f      	b.n	8003a16 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	699a      	ldr	r2, [r3, #24]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	4013      	ands	r3, r2
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	bf0c      	ite	eq
 8003a06:	2301      	moveq	r3, #1
 8003a08:	2300      	movne	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d0b4      	beq.n	800397e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a2a:	e033      	b.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f87f 	bl	8003b34 <I2C_IsErrorOccurred>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e031      	b.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a46:	d025      	beq.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a48:	f7fe ff4e 	bl	80028e8 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d302      	bcc.n	8003a5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d11a      	bne.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d013      	beq.n	8003a94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_lt_err_tIMEOUT;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a70:	f043 0220 	orr.w	r2, r3, #32
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e007      	b.n	8003aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d1c4      	bne.n	8003a2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ab8:	e02f      	b.n	8003b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	68b9      	ldr	r1, [r7, #8]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 f838 	bl	8003b34 <I2C_IsErrorOccurred>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e02d      	b.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fe ff0b 	bl	80028e8 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d11a      	bne.n	8003b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d013      	beq.n	8003b1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_lt_err_tIMEOUT;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e007      	b.n	8003b2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d1c8      	bne.n	8003aba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b08a      	sub	sp, #40	@ 0x28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d068      	beq.n	8003c32 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2210      	movs	r2, #16
 8003b66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003b68:	e049      	b.n	8003bfe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d045      	beq.n	8003bfe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b72:	f7fe feb9 	bl	80028e8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d302      	bcc.n	8003b88 <I2C_IsErrorOccurred+0x54>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d13a      	bne.n	8003bfe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003b9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003baa:	d121      	bne.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003bb2:	d01d      	beq.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	2b20      	cmp	r3, #32
 8003bb8:	d01a      	beq.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003bca:	f7fe fe8d 	bl	80028e8 <HAL_GetTick>
 8003bce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bd0:	e00e      	b.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003bd2:	f7fe fe89 	bl	80028e8 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b19      	cmp	r3, #25
 8003bde:	d907      	bls.n	8003bf0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_lt_err_tIMEOUT;
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	f043 0320 	orr.w	r3, r3, #32
 8003be6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003bee:	e006      	b.n	8003bfe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d1e9      	bne.n	8003bd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d003      	beq.n	8003c14 <I2C_IsErrorOccurred+0xe0>
 8003c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0aa      	beq.n	8003b6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003c14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d103      	bne.n	8003c24 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2220      	movs	r2, #32
 8003c22:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	f043 0304 	orr.w	r3, r3, #4
 8003c2a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00b      	beq.n	8003c5c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f043 0308 	orr.w	r3, r3, #8
 8003c6c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f043 0302 	orr.w	r3, r3, #2
 8003c8e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d01c      	beq.n	8003ce2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f7ff fe3b 	bl	8003924 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf0 <I2C_IsErrorOccurred+0x1bc>)
 8003cba:	400b      	ands	r3, r1
 8003cbc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3728      	adds	r7, #40	@ 0x28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	fe00e800 	.word	0xfe00e800

08003cf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b087      	sub	sp, #28
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	607b      	str	r3, [r7, #4]
 8003cfe:	460b      	mov	r3, r1
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	4613      	mov	r3, r2
 8003d04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d06:	897b      	ldrh	r3, [r7, #10]
 8003d08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d0c:	7a7b      	ldrb	r3, [r7, #9]
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003d1a:	6a3b      	ldr	r3, [r7, #32]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	0d5b      	lsrs	r3, r3, #21
 8003d2e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003d32:	4b08      	ldr	r3, [pc, #32]	@ (8003d54 <I2C_TransferConfig+0x60>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	43db      	mvns	r3, r3
 8003d38:	ea02 0103 	and.w	r1, r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	03ff63ff 	.word	0x03ff63ff

08003d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d138      	bne.n	8003de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e032      	b.n	8003de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	@ 0x24
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6819      	ldr	r1, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	430a      	orrs	r2, r1
 8003dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e000      	b.n	8003de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003de0:	2302      	movs	r3, #2
  }
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b085      	sub	sp, #20
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
 8003df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b20      	cmp	r3, #32
 8003e02:	d139      	bne.n	8003e78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e033      	b.n	8003e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2224      	movs	r2, #36	@ 0x24
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	021b      	lsls	r3, r3, #8
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3714      	adds	r7, #20
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d01e      	beq.n	8003ed8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ee8 <HAL_IPCC_Init+0x60>)
 8003e9c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d102      	bne.n	8003eb0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f7fd ffd4 	bl	8001e58 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003eb0:	68b8      	ldr	r0, [r7, #8]
 8003eb2:	f000 f85b 	bl	8003f6c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 f82c 	bl	8003f20 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003ed6:	e001      	b.n	8003edc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	58000c00 	.word	0x58000c00

08003eec <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	60f8      	str	r0, [r7, #12]
 8003f0e:	60b9      	str	r1, [r7, #8]
 8003f10:	4613      	mov	r3, r2
 8003f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	3714      	adds	r7, #20
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e00f      	b.n	8003f4e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	4a0b      	ldr	r2, [pc, #44]	@ (8003f64 <IPCC_SetDefaultCallbacks+0x44>)
 8003f38:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	3306      	adds	r3, #6
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	4a08      	ldr	r2, [pc, #32]	@ (8003f68 <IPCC_SetDefaultCallbacks+0x48>)
 8003f46:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2b05      	cmp	r3, #5
 8003f52:	d9ec      	bls.n	8003f2e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	08003eed 	.word	0x08003eed
 8003f68:	08003f07 	.word	0x08003f07

08003f6c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8003f80:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	223f      	movs	r2, #63	@ 0x3f
 8003f86:	609a      	str	r2, [r3, #8]
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f98:	4b05      	ldr	r3, [pc, #20]	@ (8003fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a04      	ldr	r2, [pc, #16]	@ (8003fb0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa2:	6013      	str	r3, [r2, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	58000400 	.word	0x58000400

08003fb4 <LL_PWR_EnableSRAM2Retention>:
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	4a04      	ldr	r2, [pc, #16]	@ (8003fd0 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8003fbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fc2:	6093      	str	r3, [r2, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	58000400 	.word	0x58000400

08003fd4 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8003fd8:	f7ff ffec 	bl	8003fb4 <LL_PWR_EnableSRAM2Retention>
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ff2:	d101      	bne.n	8003ff8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e000      	b.n	8003ffa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_RCC_HSE_Enable>:
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004016:	6013      	str	r3, [r2, #0]
}
 8004018:	bf00      	nop
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <LL_RCC_HSE_Disable>:
{
 8004022:	b480      	push	{r7}
 8004024:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004030:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004034:	6013      	str	r3, [r2, #0]
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <LL_RCC_HSE_IsReady>:
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800404e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004052:	d101      	bne.n	8004058 <LL_RCC_HSE_IsReady+0x18>
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <LL_RCC_HSE_IsReady+0x1a>
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr

08004064 <LL_RCC_HSI_Enable>:
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004068:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004072:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004076:	6013      	str	r3, [r2, #0]
}
 8004078:	bf00      	nop
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr

08004082 <LL_RCC_HSI_Disable>:
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004094:	6013      	str	r3, [r2, #0]
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_RCC_HSI_IsReady>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80040a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b2:	d101      	bne.n	80040b8 <LL_RCC_HSI_IsReady+0x18>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <LL_RCC_HSI_IsReady+0x1a>
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80040cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <LL_RCC_LSE_Enable>:
{
 80040ee:	b480      	push	{r7}
 80040f0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004106:	bf00      	nop
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <LL_RCC_LSE_Disable>:
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004128:	bf00      	nop
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr

08004132 <LL_RCC_LSE_EnableBypass>:
{
 8004132:	b480      	push	{r7}
 8004134:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004142:	f043 0304 	orr.w	r3, r3, #4
 8004146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800414a:	bf00      	nop
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_RCC_LSE_DisableBypass>:
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004160:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800416c:	bf00      	nop
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_RCC_LSE_IsReady>:
{
 8004176:	b480      	push	{r7}
 8004178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800417a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800417e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b02      	cmp	r3, #2
 8004188:	d101      	bne.n	800418e <LL_RCC_LSE_IsReady+0x18>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <LL_RCC_LSE_IsReady+0x1a>
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <LL_RCC_LSI1_Enable>:
{
 800419a:	b480      	push	{r7}
 800419c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800419e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041aa:	f043 0301 	orr.w	r3, r3, #1
 80041ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80041b2:	bf00      	nop
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <LL_RCC_LSI1_Disable>:
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80041c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <LL_RCC_LSI1_IsReady>:
{
 80041de:	b480      	push	{r7}
 80041e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d101      	bne.n	80041f6 <LL_RCC_LSI1_IsReady+0x18>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <LL_RCC_LSI1_IsReady+0x1a>
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <LL_RCC_LSI2_Enable>:
{
 8004202:	b480      	push	{r7}
 8004204:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004206:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800420a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800420e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800421a:	bf00      	nop
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_RCC_LSI2_Disable>:
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800422c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004230:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004234:	f023 0304 	bic.w	r3, r3, #4
 8004238:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <LL_RCC_LSI2_IsReady>:
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800424a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800424e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b08      	cmp	r3, #8
 8004258:	d101      	bne.n	800425e <LL_RCC_LSI2_IsReady+0x18>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <LL_RCC_LSI2_IsReady+0x1a>
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_RCC_LSI2_SetTrimming>:
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800427a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	021b      	lsls	r3, r3, #8
 8004282:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <LL_RCC_MSI_Enable>:
{
 8004298:	b480      	push	{r7}
 800429a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800429c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	6013      	str	r3, [r2, #0]
}
 80042ac:	bf00      	nop
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_RCC_MSI_Disable>:
{
 80042b6:	b480      	push	{r7}
 80042b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80042ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042c4:	f023 0301 	bic.w	r3, r3, #1
 80042c8:	6013      	str	r3, [r2, #0]
}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <LL_RCC_MSI_IsReady>:
{
 80042d4:	b480      	push	{r7}
 80042d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80042d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d101      	bne.n	80042ea <LL_RCC_MSI_IsReady+0x16>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <LL_RCC_MSI_IsReady+0x18>
 80042ea:	2300      	movs	r3, #0
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <LL_RCC_MSI_SetRange>:
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004308:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <LL_RCC_MSI_GetRange>:
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800432e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2bb0      	cmp	r3, #176	@ 0xb0
 8004334:	d901      	bls.n	800433a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004336:	23b0      	movs	r3, #176	@ 0xb0
 8004338:	607b      	str	r3, [r7, #4]
  return msiRange;
 800433a:	687b      	ldr	r3, [r7, #4]
}
 800433c:	4618      	mov	r0, r3
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004362:	4313      	orrs	r3, r2
 8004364:	604b      	str	r3, [r1, #4]
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_RCC_SetSysClkSource>:
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800437a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f023 0203 	bic.w	r2, r3, #3
 8004384:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <LL_RCC_GetSysClkSource>:
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800439e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <LL_RCC_SetAHBPrescaler>:
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80043ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <LL_C2_RCC_SetAHBPrescaler>:
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80043e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80043ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80043fa:	bf00      	nop
 80043fc:	370c      	adds	r7, #12
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_RCC_SetAHB4Prescaler>:
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800440e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004412:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8004416:	f023 020f 	bic.w	r2, r3, #15
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	091b      	lsrs	r3, r3, #4
 800441e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <LL_RCC_SetAPB1Prescaler>:
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800443c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004446:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4313      	orrs	r3, r2
 800444e:	608b      	str	r3, [r1, #8]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_RCC_SetAPB2Prescaler>:
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800446e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <LL_RCC_GetAHBPrescaler>:
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004492:	4618      	mov	r0, r3
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <LL_RCC_GetAHB4Prescaler>:
{
 800449c:	b480      	push	{r7}
 800449e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80044a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044a4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <LL_RCC_PLL_Enable>:
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80044bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044ca:	6013      	str	r3, [r2, #0]
}
 80044cc:	bf00      	nop
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_RCC_PLL_Disable>:
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80044da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044e8:	6013      	str	r3, [r2, #0]
}
 80044ea:	bf00      	nop
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <LL_RCC_PLL_IsReady>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80044f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004502:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004506:	d101      	bne.n	800450c <LL_RCC_PLL_IsReady+0x18>
 8004508:	2301      	movs	r3, #1
 800450a:	e000      	b.n	800450e <LL_RCC_PLL_IsReady+0x1a>
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <LL_RCC_PLL_GetN>:
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800451c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8004528:	4618      	mov	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <LL_RCC_PLL_GetR>:
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <LL_RCC_PLL_GetDivider>:
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800454e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8004558:	4618      	mov	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <LL_RCC_PLL_GetMainSource>:
{
 8004562:	b480      	push	{r7}
 8004564:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f003 0303 	and.w	r3, r3, #3
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <LL_RCC_IsActiveFlag_HPRE>:
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800457e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800458c:	d101      	bne.n	8004592 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800459e:	b480      	push	{r7}
 80045a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80045a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045b2:	d101      	bne.n	80045b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80045c4:	b480      	push	{r7}
 80045c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80045c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80045d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045d8:	d101      	bne.n	80045de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <LL_RCC_IsActiveFlag_PPRE1>:
{
 80045ea:	b480      	push	{r7}
 80045ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80045ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80045fc:	d101      	bne.n	8004602 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800461c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004620:	d101      	bne.n	8004626 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
	...

08004634 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b08d      	sub	sp, #52	@ 0x34
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d101      	bne.n	8004646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e324      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 808d 	beq.w	800476e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004654:	f7ff fea1 	bl	800439a <LL_RCC_GetSysClkSource>
 8004658:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800465a:	f7ff ff82 	bl	8004562 <LL_RCC_PLL_GetMainSource>
 800465e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_RCC_OscConfig+0x3e>
 8004666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004668:	2b0c      	cmp	r3, #12
 800466a:	d147      	bne.n	80046fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	2b01      	cmp	r3, #1
 8004670:	d144      	bne.n	80046fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e308      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8004682:	f7ff fe4c 	bl	800431e <LL_RCC_MSI_GetRange>
 8004686:	4603      	mov	r3, r0
 8004688:	429c      	cmp	r4, r3
 800468a:	d914      	bls.n	80046b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	4618      	mov	r0, r3
 8004692:	f000 fcc5 	bl	8005020 <RCC_SetFlashLatencyFromMSIRange>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e2f7      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7ff fe26 	bl	80042f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fe4a 	bl	8004348 <LL_RCC_MSI_SetCalibTrimming>
 80046b4:	e013      	b.n	80046de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	4618      	mov	r0, r3
 80046bc:	f7ff fe1b 	bl	80042f6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fe3f 	bl	8004348 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fca6 	bl	8005020 <RCC_SetFlashLatencyFromMSIRange>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d001      	beq.n	80046de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	e2d8      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80046de:	f000 fc8b 	bl	8004ff8 <HAL_RCC_GetHCLKFreq>
 80046e2:	4603      	mov	r3, r0
 80046e4:	4aa4      	ldr	r2, [pc, #656]	@ (8004978 <HAL_RCC_OscConfig+0x344>)
 80046e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80046e8:	4ba4      	ldr	r3, [pc, #656]	@ (800497c <HAL_RCC_OscConfig+0x348>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe f8ad 	bl	800284c <HAL_InitTick>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d039      	beq.n	800476c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e2c9      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	69db      	ldr	r3, [r3, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d01e      	beq.n	8004742 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004704:	f7ff fdc8 	bl	8004298 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004708:	f7fe f8ee 	bl	80028e8 <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004710:	f7fe f8ea 	bl	80028e8 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e2b6      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004722:	f7ff fdd7 	bl	80042d4 <LL_RCC_MSI_IsReady>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f1      	beq.n	8004710 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fde0 	bl	80042f6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fe04 	bl	8004348 <LL_RCC_MSI_SetCalibTrimming>
 8004740:	e015      	b.n	800476e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004742:	f7ff fdb8 	bl	80042b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004746:	f7fe f8cf 	bl	80028e8 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800474e:	f7fe f8cb 	bl	80028e8 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b02      	cmp	r3, #2
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e297      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004760:	f7ff fdb8 	bl	80042d4 <LL_RCC_MSI_IsReady>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f1      	bne.n	800474e <HAL_RCC_OscConfig+0x11a>
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800476c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d047      	beq.n	800480a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800477a:	f7ff fe0e 	bl	800439a <LL_RCC_GetSysClkSource>
 800477e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004780:	f7ff feef 	bl	8004562 <LL_RCC_PLL_GetMainSource>
 8004784:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	2b08      	cmp	r3, #8
 800478a:	d005      	beq.n	8004798 <HAL_RCC_OscConfig+0x164>
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d108      	bne.n	80047a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b03      	cmp	r3, #3
 8004796:	d105      	bne.n	80047a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d134      	bne.n	800480a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e275      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ac:	d102      	bne.n	80047b4 <HAL_RCC_OscConfig+0x180>
 80047ae:	f7ff fc29 	bl	8004004 <LL_RCC_HSE_Enable>
 80047b2:	e001      	b.n	80047b8 <HAL_RCC_OscConfig+0x184>
 80047b4:	f7ff fc35 	bl	8004022 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d012      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fe f892 	bl	80028e8 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c8:	f7fe f88e 	bl	80028e8 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	@ 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e25a      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 80047da:	f7ff fc31 	bl	8004040 <LL_RCC_HSE_IsReady>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f1      	beq.n	80047c8 <HAL_RCC_OscConfig+0x194>
 80047e4:	e011      	b.n	800480a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fe f87f 	bl	80028e8 <HAL_GetTick>
 80047ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80047ec:	e008      	b.n	8004800 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ee:	f7fe f87b 	bl	80028e8 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b64      	cmp	r3, #100	@ 0x64
 80047fa:	d901      	bls.n	8004800 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e247      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004800:	f7ff fc1e 	bl	8004040 <LL_RCC_HSE_IsReady>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1f1      	bne.n	80047ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d04c      	beq.n	80048b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004816:	f7ff fdc0 	bl	800439a <LL_RCC_GetSysClkSource>
 800481a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800481c:	f7ff fea1 	bl	8004562 <LL_RCC_PLL_GetMainSource>
 8004820:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d005      	beq.n	8004834 <HAL_RCC_OscConfig+0x200>
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	2b0c      	cmp	r3, #12
 800482c:	d10e      	bne.n	800484c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2b02      	cmp	r3, #2
 8004832:	d10b      	bne.n	800484c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e227      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fc3d 	bl	80040c4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800484a:	e031      	b.n	80048b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d019      	beq.n	8004888 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004854:	f7ff fc06 	bl	8004064 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004858:	f7fe f846 	bl	80028e8 <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004860:	f7fe f842 	bl	80028e8 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e20e      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 8004872:	f7ff fc15 	bl	80040a0 <LL_RCC_HSI_IsReady>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f1      	beq.n	8004860 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	4618      	mov	r0, r3
 8004882:	f7ff fc1f 	bl	80040c4 <LL_RCC_HSI_SetCalibTrimming>
 8004886:	e013      	b.n	80048b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004888:	f7ff fbfb 	bl	8004082 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fe f82c 	bl	80028e8 <HAL_GetTick>
 8004890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004894:	f7fe f828 	bl	80028e8 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1f4      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80048a6:	f7ff fbfb 	bl	80040a0 <LL_RCC_HSI_IsReady>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1f1      	bne.n	8004894 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80a3 	beq.w	8004a10 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d076      	beq.n	80049c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d046      	beq.n	800496c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80048de:	f7ff fc7e 	bl	80041de <LL_RCC_LSI1_IsReady>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d113      	bne.n	8004910 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80048e8:	f7ff fc57 	bl	800419a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048ec:	f7fd fffc 	bl	80028e8 <HAL_GetTick>
 80048f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048f4:	f7fd fff8 	bl	80028e8 <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1c4      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004906:	f7ff fc6a 	bl	80041de <LL_RCC_LSI1_IsReady>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0f1      	beq.n	80048f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004910:	f7ff fc77 	bl	8004202 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004914:	f7fd ffe8 	bl	80028e8 <HAL_GetTick>
 8004918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800491c:	f7fd ffe4 	bl	80028e8 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b03      	cmp	r3, #3
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e1b0      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800492e:	f7ff fc8a 	bl	8004246 <LL_RCC_LSI2_IsReady>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f1      	beq.n	800491c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff fc94 	bl	800426a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8004942:	f7ff fc3b 	bl	80041bc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004946:	f7fd ffcf 	bl	80028e8 <HAL_GetTick>
 800494a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800494e:	f7fd ffcb 	bl	80028e8 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b02      	cmp	r3, #2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e197      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8004960:	f7ff fc3d 	bl	80041de <LL_RCC_LSI1_IsReady>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1f1      	bne.n	800494e <HAL_RCC_OscConfig+0x31a>
 800496a:	e051      	b.n	8004a10 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800496c:	f7ff fc15 	bl	800419a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd ffba 	bl	80028e8 <HAL_GetTick>
 8004974:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004976:	e00c      	b.n	8004992 <HAL_RCC_OscConfig+0x35e>
 8004978:	20000014 	.word	0x20000014
 800497c:	2000001c 	.word	0x2000001c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004980:	f7fd ffb2 	bl	80028e8 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e17e      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004992:	f7ff fc24 	bl	80041de <LL_RCC_LSI1_IsReady>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f1      	beq.n	8004980 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800499c:	f7ff fc42 	bl	8004224 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049a0:	e008      	b.n	80049b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049a2:	f7fd ffa1 	bl	80028e8 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d901      	bls.n	80049b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e16d      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80049b4:	f7ff fc47 	bl	8004246 <LL_RCC_LSI2_IsReady>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1f1      	bne.n	80049a2 <HAL_RCC_OscConfig+0x36e>
 80049be:	e027      	b.n	8004a10 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80049c0:	f7ff fc30 	bl	8004224 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049c4:	f7fd ff90 	bl	80028e8 <HAL_GetTick>
 80049c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80049cc:	f7fd ff8c 	bl	80028e8 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e158      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80049de:	f7ff fc32 	bl	8004246 <LL_RCC_LSI2_IsReady>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f1      	bne.n	80049cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80049e8:	f7ff fbe8 	bl	80041bc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7fd ff7c 	bl	80028e8 <HAL_GetTick>
 80049f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80049f4:	f7fd ff78 	bl	80028e8 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e144      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004a06:	f7ff fbea 	bl	80041de <LL_RCC_LSI1_IsReady>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f1      	bne.n	80049f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d05b      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a1c:	4b9e      	ldr	r3, [pc, #632]	@ (8004c98 <HAL_RCC_OscConfig+0x664>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d114      	bne.n	8004a52 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004a28:	f7ff fab4 	bl	8003f94 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a2c:	f7fd ff5c 	bl	80028e8 <HAL_GetTick>
 8004a30:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a34:	f7fd ff58 	bl	80028e8 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e124      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a46:	4b94      	ldr	r3, [pc, #592]	@ (8004c98 <HAL_RCC_OscConfig+0x664>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d0f0      	beq.n	8004a34 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d102      	bne.n	8004a60 <HAL_RCC_OscConfig+0x42c>
 8004a5a:	f7ff fb48 	bl	80040ee <LL_RCC_LSE_Enable>
 8004a5e:	e00c      	b.n	8004a7a <HAL_RCC_OscConfig+0x446>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	2b05      	cmp	r3, #5
 8004a66:	d104      	bne.n	8004a72 <HAL_RCC_OscConfig+0x43e>
 8004a68:	f7ff fb63 	bl	8004132 <LL_RCC_LSE_EnableBypass>
 8004a6c:	f7ff fb3f 	bl	80040ee <LL_RCC_LSE_Enable>
 8004a70:	e003      	b.n	8004a7a <HAL_RCC_OscConfig+0x446>
 8004a72:	f7ff fb4d 	bl	8004110 <LL_RCC_LSE_Disable>
 8004a76:	f7ff fb6d 	bl	8004154 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d014      	beq.n	8004aac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a82:	f7fd ff31 	bl	80028e8 <HAL_GetTick>
 8004a86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a88:	e00a      	b.n	8004aa0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fd ff2d 	bl	80028e8 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e0f7      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004aa0:	f7ff fb69 	bl	8004176 <LL_RCC_LSE_IsReady>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0ef      	beq.n	8004a8a <HAL_RCC_OscConfig+0x456>
 8004aaa:	e013      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fd ff1c 	bl	80028e8 <HAL_GetTick>
 8004ab0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004ab2:	e00a      	b.n	8004aca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab4:	f7fd ff18 	bl	80028e8 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e0e2      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004aca:	f7ff fb54 	bl	8004176 <LL_RCC_LSE_IsReady>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ef      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80d8 	beq.w	8004c8e <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ade:	f7ff fc5c 	bl	800439a <LL_RCC_GetSysClkSource>
 8004ae2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	f040 80a6 	bne.w	8004c42 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0203 	and.w	r2, r3, #3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d123      	bne.n	8004b4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d11c      	bne.n	8004b4c <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d114      	bne.n	8004b4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d10d      	bne.n	8004b4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d106      	bne.n	8004b4c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d054      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	2b0c      	cmp	r3, #12
 8004b50:	d04f      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b52:	f7ff fcc0 	bl	80044d6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b56:	f7fd fec7 	bl	80028e8 <HAL_GetTick>
 8004b5a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b5c:	e008      	b.n	8004b70 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5e:	f7fd fec3 	bl	80028e8 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e08f      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1ef      	bne.n	8004b5e <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	4b45      	ldr	r3, [pc, #276]	@ (8004c9c <HAL_RCC_OscConfig+0x668>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004b90:	4311      	orrs	r1, r2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004b96:	0212      	lsls	r2, r2, #8
 8004b98:	4311      	orrs	r1, r2
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004b9e:	4311      	orrs	r1, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ba4:	4311      	orrs	r1, r2
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004baa:	430a      	orrs	r2, r1
 8004bac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004bb4:	f7ff fc80 	bl	80044b8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bc8:	f7fd fe8e 	bl	80028e8 <HAL_GetTick>
 8004bcc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd0:	f7fd fe8a 	bl	80028e8 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e056      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ef      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bf0:	e04d      	b.n	8004c8e <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e04c      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d144      	bne.n	8004c8e <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c04:	f7ff fc58 	bl	80044b8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c18:	f7fd fe66 	bl	80028e8 <HAL_GetTick>
 8004c1c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fd fe62 	bl	80028e8 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e02e      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0ef      	beq.n	8004c20 <HAL_RCC_OscConfig+0x5ec>
 8004c40:	e025      	b.n	8004c8e <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d020      	beq.n	8004c8a <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	f7ff fc45 	bl	80044d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4c:	f7fd fe4c 	bl	80028e8 <HAL_GetTick>
 8004c50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c52:	e008      	b.n	8004c66 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c54:	f7fd fe48 	bl	80028e8 <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d901      	bls.n	8004c66 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 8004c62:	2303      	movs	r3, #3
 8004c64:	e014      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1ef      	bne.n	8004c54 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 8004c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c82:	f023 0303 	bic.w	r3, r3, #3
 8004c86:	60d3      	str	r3, [r2, #12]
 8004c88:	e001      	b.n	8004c8e <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e000      	b.n	8004c90 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3734      	adds	r7, #52	@ 0x34
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd90      	pop	{r4, r7, pc}
 8004c98:	58000400 	.word	0x58000400
 8004c9c:	11c1808c 	.word	0x11c1808c

08004ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d101      	bne.n	8004cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e12d      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b98      	ldr	r3, [pc, #608]	@ (8004f18 <HAL_RCC_ClockConfig+0x278>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d91b      	bls.n	8004cfa <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b95      	ldr	r3, [pc, #596]	@ (8004f18 <HAL_RCC_ClockConfig+0x278>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f023 0207 	bic.w	r2, r3, #7
 8004cca:	4993      	ldr	r1, [pc, #588]	@ (8004f18 <HAL_RCC_ClockConfig+0x278>)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd2:	f7fd fe09 	bl	80028e8 <HAL_GetTick>
 8004cd6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cda:	f7fd fe05 	bl	80028e8 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e111      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cec:	4b8a      	ldr	r3, [pc, #552]	@ (8004f18 <HAL_RCC_ClockConfig+0x278>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0307 	and.w	r3, r3, #7
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d1ef      	bne.n	8004cda <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d016      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7ff fb51 	bl	80043b2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d10:	f7fd fdea 	bl	80028e8 <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d18:	f7fd fde6 	bl	80028e8 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e0f2      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d2a:	f7ff fc26 	bl	800457a <LL_RCC_IsActiveFlag_HPRE>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f1      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0320 	and.w	r3, r3, #32
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d016      	beq.n	8004d6e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff fb48 	bl	80043da <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d4a:	f7fd fdcd 	bl	80028e8 <HAL_GetTick>
 8004d4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d52:	f7fd fdc9 	bl	80028e8 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e0d5      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d64:	f7ff fc1b 	bl	800459e <LL_RCC_IsActiveFlag_C2HPRE>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f1      	beq.n	8004d52 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fb41 	bl	8004406 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d84:	f7fd fdb0 	bl	80028e8 <HAL_GetTick>
 8004d88:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d8c:	f7fd fdac 	bl	80028e8 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e0b8      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d9e:	f7ff fc11 	bl	80045c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f1      	beq.n	8004d8c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d016      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fb3b 	bl	8004434 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004dbe:	f7fd fd93 	bl	80028e8 <HAL_GetTick>
 8004dc2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004dc4:	e008      	b.n	8004dd8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dc6:	f7fd fd8f 	bl	80028e8 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d901      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e09b      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004dd8:	f7ff fc07 	bl	80045ea <LL_RCC_IsActiveFlag_PPRE1>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d0f1      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d017      	beq.n	8004e1e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff fb31 	bl	800445c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004dfa:	f7fd fd75 	bl	80028e8 <HAL_GetTick>
 8004dfe:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e00:	e008      	b.n	8004e14 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004e02:	f7fd fd71 	bl	80028e8 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e07d      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004e14:	f7ff fbfb 	bl	800460e <LL_RCC_IsActiveFlag_PPRE2>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f1      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d043      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d106      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e32:	f7ff f905 	bl	8004040 <LL_RCC_HSE_IsReady>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d11e      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e067      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004e48:	f7ff fb54 	bl	80044f4 <LL_RCC_PLL_IsReady>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d113      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e05c      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004e5e:	f7ff fa39 	bl	80042d4 <LL_RCC_MSI_IsReady>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d108      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e051      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e6c:	f7ff f918 	bl	80040a0 <LL_RCC_HSI_IsReady>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e04a      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fa77 	bl	8004372 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e84:	f7fd fd30 	bl	80028e8 <HAL_GetTick>
 8004e88:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e8c:	f7fd fd2c 	bl	80028e8 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e036      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea2:	f7ff fa7a 	bl	800439a <LL_RCC_GetSysClkSource>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d1ec      	bne.n	8004e8c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb2:	4b19      	ldr	r3, [pc, #100]	@ (8004f18 <HAL_RCC_ClockConfig+0x278>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d21b      	bcs.n	8004ef8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec0:	4b15      	ldr	r3, [pc, #84]	@ (8004f18 <HAL_RCC_ClockConfig+0x278>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f023 0207 	bic.w	r2, r3, #7
 8004ec8:	4913      	ldr	r1, [pc, #76]	@ (8004f18 <HAL_RCC_ClockConfig+0x278>)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ed0:	f7fd fd0a 	bl	80028e8 <HAL_GetTick>
 8004ed4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004ed8:	f7fd fd06 	bl	80028e8 <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e012      	b.n	8004f10 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eea:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <HAL_RCC_ClockConfig+0x278>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d1ef      	bne.n	8004ed8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ef8:	f000 f87e 	bl	8004ff8 <HAL_RCC_GetHCLKFreq>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4a07      	ldr	r2, [pc, #28]	@ (8004f1c <HAL_RCC_ClockConfig+0x27c>)
 8004f00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004f02:	f7fd fcfd 	bl	8002900 <HAL_GetTickPrio>
 8004f06:	4603      	mov	r3, r0
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fd fc9f 	bl	800284c <HAL_InitTick>
 8004f0e:	4603      	mov	r3, r0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	58004000 	.word	0x58004000
 8004f1c:	20000014 	.word	0x20000014

08004f20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f20:	b590      	push	{r4, r7, lr}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f26:	f7ff fa38 	bl	800439a <LL_RCC_GetSysClkSource>
 8004f2a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10a      	bne.n	8004f48 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f32:	f7ff f9f4 	bl	800431e <LL_RCC_MSI_GetRange>
 8004f36:	4603      	mov	r3, r0
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 030f 	and.w	r3, r3, #15
 8004f3e:	4a2b      	ldr	r2, [pc, #172]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	e04b      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d102      	bne.n	8004f54 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f4e:	4b28      	ldr	r3, [pc, #160]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f50:	60fb      	str	r3, [r7, #12]
 8004f52:	e045      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d10a      	bne.n	8004f70 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f5a:	f7ff f841 	bl	8003fe0 <LL_RCC_HSE_IsEnabledDiv2>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d102      	bne.n	8004f6a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004f64:	4b22      	ldr	r3, [pc, #136]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e03a      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f6a:	4b22      	ldr	r3, [pc, #136]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f6c:	60fb      	str	r3, [r7, #12]
 8004f6e:	e037      	b.n	8004fe0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004f70:	f7ff faf7 	bl	8004562 <LL_RCC_PLL_GetMainSource>
 8004f74:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d003      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0x64>
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d003      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0x6a>
 8004f82:	e00d      	b.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f84:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f86:	60bb      	str	r3, [r7, #8]
        break;
 8004f88:	e015      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f8a:	f7ff f829 	bl	8003fe0 <LL_RCC_HSE_IsEnabledDiv2>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d102      	bne.n	8004f9a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f94:	4b16      	ldr	r3, [pc, #88]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f96:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f98:	e00d      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004f9a:	4b16      	ldr	r3, [pc, #88]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f9c:	60bb      	str	r3, [r7, #8]
        break;
 8004f9e:	e00a      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004fa0:	f7ff f9bd 	bl	800431e <LL_RCC_MSI_GetRange>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	091b      	lsrs	r3, r3, #4
 8004fa8:	f003 030f 	and.w	r3, r3, #15
 8004fac:	4a0f      	ldr	r2, [pc, #60]	@ (8004fec <HAL_RCC_GetSysClockFreq+0xcc>)
 8004fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb2:	60bb      	str	r3, [r7, #8]
        break;
 8004fb4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004fb6:	f7ff faaf 	bl	8004518 <LL_RCC_PLL_GetN>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	fb03 f402 	mul.w	r4, r3, r2
 8004fc2:	f7ff fac2 	bl	800454a <LL_RCC_PLL_GetDivider>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	091b      	lsrs	r3, r3, #4
 8004fca:	3301      	adds	r3, #1
 8004fcc:	fbb4 f4f3 	udiv	r4, r4, r3
 8004fd0:	f7ff faaf 	bl	8004532 <LL_RCC_PLL_GetR>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	0f5b      	lsrs	r3, r3, #29
 8004fd8:	3301      	adds	r3, #1
 8004fda:	fbb4 f3f3 	udiv	r3, r4, r3
 8004fde:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd90      	pop	{r4, r7, pc}
 8004fea:	bf00      	nop
 8004fec:	08009a68 	.word	0x08009a68
 8004ff0:	00f42400 	.word	0x00f42400
 8004ff4:	01e84800 	.word	0x01e84800

08004ff8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ff8:	b598      	push	{r3, r4, r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004ffc:	f7ff ff90 	bl	8004f20 <HAL_RCC_GetSysClockFreq>
 8005000:	4604      	mov	r4, r0
 8005002:	f7ff fa3f 	bl	8004484 <LL_RCC_GetAHBPrescaler>
 8005006:	4603      	mov	r3, r0
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	f003 030f 	and.w	r3, r3, #15
 800500e:	4a03      	ldr	r2, [pc, #12]	@ (800501c <HAL_RCC_GetHCLKFreq+0x24>)
 8005010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005014:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd98      	pop	{r3, r4, r7, pc}
 800501c:	08009a28 	.word	0x08009a28

08005020 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2bb0      	cmp	r3, #176	@ 0xb0
 800502c:	d903      	bls.n	8005036 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800502e:	4b14      	ldr	r3, [pc, #80]	@ (8005080 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e007      	b.n	8005046 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	4a10      	ldr	r2, [pc, #64]	@ (8005080 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8005040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005044:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005046:	f7ff fa29 	bl	800449c <LL_RCC_GetAHB4Prescaler>
 800504a:	4603      	mov	r3, r0
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	4a0c      	ldr	r2, [pc, #48]	@ (8005084 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	4a09      	ldr	r2, [pc, #36]	@ (8005088 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005064:	fba2 2303 	umull	r2, r3, r2, r3
 8005068:	0c9b      	lsrs	r3, r3, #18
 800506a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800506e:	4618      	mov	r0, r3
 8005070:	f000 f80c 	bl	800508c <RCC_SetFlashLatency>
 8005074:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	08009a68 	.word	0x08009a68
 8005084:	08009a28 	.word	0x08009a28
 8005088:	431bde83 	.word	0x431bde83

0800508c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800508c:	b590      	push	{r4, r7, lr}
 800508e:	b08f      	sub	sp, #60	@ 0x3c
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005096:	4b24      	ldr	r3, [pc, #144]	@ (8005128 <RCC_SetFlashLatency+0x9c>)
 8005098:	f107 041c 	add.w	r4, r7, #28
 800509c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800509e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80050a2:	4b22      	ldr	r3, [pc, #136]	@ (800512c <RCC_SetFlashLatency+0xa0>)
 80050a4:	f107 040c 	add.w	r4, r7, #12
 80050a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80050aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80050ae:	2300      	movs	r3, #0
 80050b0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050b2:	2300      	movs	r3, #0
 80050b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80050b6:	e013      	b.n	80050e0 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	3338      	adds	r3, #56	@ 0x38
 80050be:	443b      	add	r3, r7
 80050c0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d807      	bhi.n	80050da <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 80050ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	3338      	adds	r3, #56	@ 0x38
 80050d0:	443b      	add	r3, r7
 80050d2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80050d6:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 80050d8:	e005      	b.n	80050e6 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050dc:	3301      	adds	r3, #1
 80050de:	633b      	str	r3, [r7, #48]	@ 0x30
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	2b03      	cmp	r3, #3
 80050e4:	d9e8      	bls.n	80050b8 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80050e6:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <RCC_SetFlashLatency+0xa4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 0207 	bic.w	r2, r3, #7
 80050ee:	4910      	ldr	r1, [pc, #64]	@ (8005130 <RCC_SetFlashLatency+0xa4>)
 80050f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f2:	4313      	orrs	r3, r2
 80050f4:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050f6:	f7fd fbf7 	bl	80028e8 <HAL_GetTick>
 80050fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80050fc:	e008      	b.n	8005110 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80050fe:	f7fd fbf3 	bl	80028e8 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e007      	b.n	8005120 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005110:	4b07      	ldr	r3, [pc, #28]	@ (8005130 <RCC_SetFlashLatency+0xa4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800511a:	429a      	cmp	r2, r3
 800511c:	d1ef      	bne.n	80050fe <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	373c      	adds	r7, #60	@ 0x3c
 8005124:	46bd      	mov	sp, r7
 8005126:	bd90      	pop	{r4, r7, pc}
 8005128:	0800987c 	.word	0x0800987c
 800512c:	0800988c 	.word	0x0800988c
 8005130:	58004000 	.word	0x58004000

08005134 <LL_RCC_LSE_IsEnabled>:
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d101      	bne.n	800514c <LL_RCC_LSE_IsEnabled+0x18>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_RCC_LSE_IsEnabled+0x1a>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <LL_RCC_LSE_IsReady>:
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005164:	f003 0302 	and.w	r3, r3, #2
 8005168:	2b02      	cmp	r3, #2
 800516a:	d101      	bne.n	8005170 <LL_RCC_LSE_IsReady+0x18>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <LL_RCC_LSE_IsReady+0x1a>
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <LL_RCC_SetRFWKPClockSource>:
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005188:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800518c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005190:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4313      	orrs	r3, r2
 8005198:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <LL_RCC_SetUSARTClockSource>:
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80051b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051b8:	f023 0203 	bic.w	r2, r3, #3
 80051bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <LL_RCC_SetI2CClockSource>:
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	091b      	lsrs	r3, r3, #4
 80051e8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80051ec:	43db      	mvns	r3, r3
 80051ee:	401a      	ands	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80051f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80051fc:	4313      	orrs	r3, r2
 80051fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005202:	bf00      	nop
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <LL_RCC_SetLPTIMClockSource>:
{
 800520e:	b480      	push	{r7}
 8005210:	b083      	sub	sp, #12
 8005212:	af00      	add	r7, sp, #0
 8005214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800521a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	041b      	lsls	r3, r3, #16
 8005224:	43db      	mvns	r3, r3
 8005226:	401a      	ands	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005236:	bf00      	nop
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr

08005242 <LL_RCC_SetRNGClockSource>:
{
 8005242:	b480      	push	{r7}
 8005244:	b083      	sub	sp, #12
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800524a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800524e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005252:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005256:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4313      	orrs	r3, r2
 800525e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <LL_RCC_SetCLK48ClockSource>:
{
 800526e:	b480      	push	{r7}
 8005270:	b083      	sub	sp, #12
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005282:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4313      	orrs	r3, r2
 800528a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800528e:	bf00      	nop
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_RCC_SetADCClockSource>:
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80052a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80052ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80052ba:	bf00      	nop
 80052bc:	370c      	adds	r7, #12
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <LL_RCC_SetRTCClockSource>:
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80052ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <LL_RCC_GetRTCClockSource>:
{
 80052f2:	b480      	push	{r7}
 80052f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80052f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8005302:	4618      	mov	r0, r3
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <LL_RCC_ForceBackupDomainReset>:
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005318:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800531c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005324:	bf00      	nop
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_RCC_ReleaseBackupDomainReset>:
{
 800532e:	b480      	push	{r7}
 8005330:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800533a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800533e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005342:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8005346:	bf00      	nop
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005358:	2300      	movs	r3, #0
 800535a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800535c:	2300      	movs	r3, #0
 800535e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005368:	2b00      	cmp	r3, #0
 800536a:	d046      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800536c:	f7ff ffc1 	bl	80052f2 <LL_RCC_GetRTCClockSource>
 8005370:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	69db      	ldr	r3, [r3, #28]
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	429a      	cmp	r2, r3
 800537a:	d03c      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800537c:	f7fe fe0a 	bl	8003f94 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d105      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	4618      	mov	r0, r3
 800538c:	f7ff ff9b 	bl	80052c6 <LL_RCC_SetRTCClockSource>
 8005390:	e02e      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800539a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800539c:	f7ff ffb6 	bl	800530c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80053a0:	f7ff ffc5 	bl	800532e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80053b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80053bc:	f7ff feba 	bl	8005134 <LL_RCC_LSE_IsEnabled>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d114      	bne.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053c6:	f7fd fa8f 	bl	80028e8 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80053cc:	e00b      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd fa8b 	bl	80028e8 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d902      	bls.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	77fb      	strb	r3, [r7, #31]
              break;
 80053e4:	e004      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 80053e6:	f7ff feb7 	bl	8005158 <LL_RCC_LSE_IsReady>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d1ee      	bne.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80053f0:	7ffb      	ldrb	r3, [r7, #31]
 80053f2:	77bb      	strb	r3, [r7, #30]
 80053f4:	e001      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f6:	7ffb      	ldrb	r3, [r7, #31]
 80053f8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	4618      	mov	r0, r3
 800540c:	f7ff fecc 	bl	80051a8 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0310 	and.w	r3, r3, #16
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff fef4 	bl	800520e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	4618      	mov	r0, r3
 8005438:	f7ff fee9 	bl	800520e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b00      	cmp	r3, #0
 8005446:	d004      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fec1 	bl	80051d4 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800545a:	2b00      	cmp	r3, #0
 800545c:	d02b      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005466:	d008      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005470:	d003      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d105      	bne.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	4618      	mov	r0, r3
 8005480:	f7ff fedf 	bl	8005242 <LL_RCC_SetRNGClockSource>
 8005484:	e00a      	b.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	2000      	movs	r0, #0
 8005492:	f7ff fed6 	bl	8005242 <LL_RCC_SetRNGClockSource>
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff fee9 	bl	800526e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
 80054a0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80054a4:	d107      	bne.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80054a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054b4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d011      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f7ff fee7 	bl	800529a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054d4:	d107      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e4:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d004      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f7ff fe40 	bl	800517c <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80054fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
	...

08005508 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	e09f      	b.n	800565a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005520:	b2db      	uxtb	r3, r3
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7fc fcb6 	bl	8001ea0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2202      	movs	r2, #2
 8005538:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800553c:	4b49      	ldr	r3, [pc, #292]	@ (8005664 <HAL_RTC_Init+0x15c>)
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b10      	cmp	r3, #16
 8005546:	d07e      	beq.n	8005646 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	22ca      	movs	r2, #202	@ 0xca
 800554e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2253      	movs	r2, #83	@ 0x53
 8005556:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f8ab 	bl	80056b4 <RTC_EnterInitMode>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00a      	beq.n	800557a <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	22ff      	movs	r2, #255	@ 0xff
 800556a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2204      	movs	r2, #4
 8005570:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	73fb      	strb	r3, [r7, #15]
 8005578:	e067      	b.n	800564a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800558c:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6899      	ldr	r1, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	431a      	orrs	r2, r3
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68d2      	ldr	r2, [r2, #12]
 80055b4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6919      	ldr	r1, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	041a      	lsls	r2, r3, #16
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055d8:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0202 	bic.w	r2, r2, #2
 80055e8:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69da      	ldr	r2, [r3, #28]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	431a      	orrs	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d113      	bne.n	8005638 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f000 f829 	bl	8005668 <HAL_RTC_WaitForSynchro>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00d      	beq.n	8005638 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	22ff      	movs	r2, #255	@ 0xff
 8005622:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2204      	movs	r2, #4
 8005628:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e010      	b.n	800565a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	22ff      	movs	r2, #255	@ 0xff
 800563e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005640:	2300      	movs	r3, #0
 8005642:	73fb      	strb	r3, [r7, #15]
 8005644:	e001      	b.n	800564a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005646:	2300      	movs	r3, #0
 8005648:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800564a:	7bfb      	ldrb	r3, [r7, #15]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8005658:	7bfb      	ldrb	r3, [r7, #15]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	40002800 	.word	0x40002800

08005668 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68da      	ldr	r2, [r3, #12]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800567e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005680:	f7fd f932 	bl	80028e8 <HAL_GetTick>
 8005684:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005686:	e009      	b.n	800569c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005688:	f7fd f92e 	bl	80028e8 <HAL_GetTick>
 800568c:	4602      	mov	r2, r0
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005696:	d901      	bls.n	800569c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e007      	b.n	80056ac <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0ee      	beq.n	8005688 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d119      	bne.n	80056fe <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80056d4:	f7fd f908 	bl	80028e8 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80056da:	e009      	b.n	80056f0 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80056dc:	f7fd f904 	bl	80028e8 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80056ea:	d901      	bls.n	80056f0 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e007      	b.n	8005700 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0ee      	beq.n	80056dc <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d101      	bne.n	800571a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005716:	2301      	movs	r3, #1
 8005718:	e095      	b.n	8005846 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d108      	bne.n	8005734 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800572a:	d009      	beq.n	8005740 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	61da      	str	r2, [r3, #28]
 8005732:	e005      	b.n	8005740 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d106      	bne.n	8005760 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7fc fbcc 	bl	8001ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005776:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005780:	d902      	bls.n	8005788 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005782:	2300      	movs	r3, #0
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e002      	b.n	800578e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005788:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800578c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005796:	d007      	beq.n	80057a8 <HAL_SPI_Init+0xa0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80057a0:	d002      	beq.n	80057a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057b8:	431a      	orrs	r2, r3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	431a      	orrs	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ea:	ea42 0103 	orr.w	r1, r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057f2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	0c1b      	lsrs	r3, r3, #16
 8005804:	f003 0204 	and.w	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005824:	ea42 0103 	orr.w	r1, r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b082      	sub	sp, #8
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e049      	b.n	80058f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d106      	bne.n	800587a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7fc fb7f 	bl	8001f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	3304      	adds	r3, #4
 800588a:	4619      	mov	r1, r3
 800588c:	4610      	mov	r0, r2
 800588e:	f000 f949 	bl	8005b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2201      	movs	r2, #1
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005908:	2300      	movs	r3, #0
 800590a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005916:	2302      	movs	r3, #2
 8005918:	e0ff      	b.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b14      	cmp	r3, #20
 8005926:	f200 80f0 	bhi.w	8005b0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800592a:	a201      	add	r2, pc, #4	@ (adr r2, 8005930 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800592c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005930:	08005985 	.word	0x08005985
 8005934:	08005b0b 	.word	0x08005b0b
 8005938:	08005b0b 	.word	0x08005b0b
 800593c:	08005b0b 	.word	0x08005b0b
 8005940:	080059c5 	.word	0x080059c5
 8005944:	08005b0b 	.word	0x08005b0b
 8005948:	08005b0b 	.word	0x08005b0b
 800594c:	08005b0b 	.word	0x08005b0b
 8005950:	08005a07 	.word	0x08005a07
 8005954:	08005b0b 	.word	0x08005b0b
 8005958:	08005b0b 	.word	0x08005b0b
 800595c:	08005b0b 	.word	0x08005b0b
 8005960:	08005a47 	.word	0x08005a47
 8005964:	08005b0b 	.word	0x08005b0b
 8005968:	08005b0b 	.word	0x08005b0b
 800596c:	08005b0b 	.word	0x08005b0b
 8005970:	08005a89 	.word	0x08005a89
 8005974:	08005b0b 	.word	0x08005b0b
 8005978:	08005b0b 	.word	0x08005b0b
 800597c:	08005b0b 	.word	0x08005b0b
 8005980:	08005ac9 	.word	0x08005ac9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68b9      	ldr	r1, [r7, #8]
 800598a:	4618      	mov	r0, r3
 800598c:	f000 f926 	bl	8005bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0208 	orr.w	r2, r2, #8
 800599e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699a      	ldr	r2, [r3, #24]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0204 	bic.w	r2, r2, #4
 80059ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6999      	ldr	r1, [r3, #24]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	691a      	ldr	r2, [r3, #16]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	619a      	str	r2, [r3, #24]
      break;
 80059c2:	e0a5      	b.n	8005b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f96e 	bl	8005cac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	699a      	ldr	r2, [r3, #24]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6999      	ldr	r1, [r3, #24]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	021a      	lsls	r2, r3, #8
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	619a      	str	r2, [r3, #24]
      break;
 8005a04:	e084      	b.n	8005b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68b9      	ldr	r1, [r7, #8]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f9bb 	bl	8005d88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	69da      	ldr	r2, [r3, #28]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f042 0208 	orr.w	r2, r2, #8
 8005a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	69da      	ldr	r2, [r3, #28]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0204 	bic.w	r2, r2, #4
 8005a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	69d9      	ldr	r1, [r3, #28]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	61da      	str	r2, [r3, #28]
      break;
 8005a44:	e064      	b.n	8005b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68b9      	ldr	r1, [r7, #8]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f000 fa07 	bl	8005e60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	69da      	ldr	r2, [r3, #28]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	69d9      	ldr	r1, [r3, #28]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	021a      	lsls	r2, r3, #8
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	61da      	str	r2, [r3, #28]
      break;
 8005a86:	e043      	b.n	8005b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f000 fa38 	bl	8005f04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0208 	orr.w	r2, r2, #8
 8005aa2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0204 	bic.w	r2, r2, #4
 8005ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691a      	ldr	r2, [r3, #16]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005ac6:	e023      	b.n	8005b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f000 fa64 	bl	8005f9c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	021a      	lsls	r2, r3, #8
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005b08:	e002      	b.n	8005b10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005b0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop

08005b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a28      	ldr	r2, [pc, #160]	@ (8005bd8 <TIM_Base_SetConfig+0xb4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_Base_SetConfig+0x20>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b42:	d108      	bne.n	8005b56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a1f      	ldr	r2, [pc, #124]	@ (8005bd8 <TIM_Base_SetConfig+0xb4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d003      	beq.n	8005b66 <TIM_Base_SetConfig+0x42>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b64:	d108      	bne.n	8005b78 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	4313      	orrs	r3, r2
 8005b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8005bd8 <TIM_Base_SetConfig+0xb4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d103      	bne.n	8005bac <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d105      	bne.n	8005bca <TIM_Base_SetConfig+0xa6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f023 0201 	bic.w	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	611a      	str	r2, [r3, #16]
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40012c00 	.word	0x40012c00

08005bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a1b      	ldr	r3, [r3, #32]
 8005bf0:	f023 0201 	bic.w	r2, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0303 	bic.w	r3, r3, #3
 8005c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 0302 	bic.w	r3, r3, #2
 8005c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	4313      	orrs	r3, r2
 8005c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a1c      	ldr	r2, [pc, #112]	@ (8005ca8 <TIM_OC1_SetConfig+0xcc>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d10c      	bne.n	8005c56 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f023 0308 	bic.w	r3, r3, #8
 8005c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 0304 	bic.w	r3, r3, #4
 8005c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a13      	ldr	r2, [pc, #76]	@ (8005ca8 <TIM_OC1_SetConfig+0xcc>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d111      	bne.n	8005c82 <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	693a      	ldr	r2, [r7, #16]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	621a      	str	r2, [r3, #32]
}
 8005c9c:	bf00      	nop
 8005c9e:	371c      	adds	r7, #28
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr
 8005ca8:	40012c00 	.word	0x40012c00

08005cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	f023 0210 	bic.w	r2, r3, #16
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	699b      	ldr	r3, [r3, #24]
 8005cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	021b      	lsls	r3, r3, #8
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f023 0320 	bic.w	r3, r3, #32
 8005cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	011b      	lsls	r3, r3, #4
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8005d84 <TIM_OC2_SetConfig+0xd8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10d      	bne.n	8005d2c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a15      	ldr	r2, [pc, #84]	@ (8005d84 <TIM_OC2_SetConfig+0xd8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d113      	bne.n	8005d5c <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	693a      	ldr	r2, [r7, #16]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	685a      	ldr	r2, [r3, #4]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40012c00 	.word	0x40012c00

08005d88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a1b      	ldr	r3, [r3, #32]
 8005d9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f023 0303 	bic.w	r3, r3, #3
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	021b      	lsls	r3, r3, #8
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e5c <TIM_OC3_SetConfig+0xd4>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d10d      	bne.n	8005e06 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a14      	ldr	r2, [pc, #80]	@ (8005e5c <TIM_OC3_SetConfig+0xd4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d113      	bne.n	8005e36 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	011b      	lsls	r3, r3, #4
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	697a      	ldr	r2, [r7, #20]
 8005e4e:	621a      	str	r2, [r3, #32]
}
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40012c00 	.word	0x40012c00

08005e60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	021b      	lsls	r3, r3, #8
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	031b      	lsls	r3, r3, #12
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a10      	ldr	r2, [pc, #64]	@ (8005f00 <TIM_OC4_SetConfig+0xa0>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d109      	bne.n	8005ed8 <TIM_OC4_SetConfig+0x78>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	019b      	lsls	r3, r3, #6
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	621a      	str	r2, [r3, #32]
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	40012c00 	.word	0x40012c00

08005f04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	041b      	lsls	r3, r3, #16
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a0f      	ldr	r2, [pc, #60]	@ (8005f98 <TIM_OC5_SetConfig+0x94>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d109      	bne.n	8005f72 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	693a      	ldr	r2, [r7, #16]
 8005f8a:	621a      	str	r2, [r3, #32]
}
 8005f8c:	bf00      	nop
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	40012c00 	.word	0x40012c00

08005f9c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	021b      	lsls	r3, r3, #8
 8005fd6:	68fa      	ldr	r2, [r7, #12]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005fe2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	051b      	lsls	r3, r3, #20
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a10      	ldr	r2, [pc, #64]	@ (8006034 <TIM_OC6_SetConfig+0x98>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d109      	bne.n	800600c <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	695b      	ldr	r3, [r3, #20]
 8006004:	029b      	lsls	r3, r3, #10
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685a      	ldr	r2, [r3, #4]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	693a      	ldr	r2, [r7, #16]
 8006024:	621a      	str	r2, [r3, #32]
}
 8006026:	bf00      	nop
 8006028:	371c      	adds	r7, #28
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40012c00 	.word	0x40012c00

08006038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800604c:	2302      	movs	r3, #2
 800604e:	e04a      	b.n	80060e6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2202      	movs	r2, #2
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a1f      	ldr	r2, [pc, #124]	@ (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d108      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a12      	ldr	r2, [pc, #72]	@ (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d004      	beq.n	80060ba <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b8:	d10c      	bne.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40012c00 	.word	0x40012c00

080060f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800610c:	2b01      	cmp	r3, #1
 800610e:	d101      	bne.n	8006114 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006110:	2302      	movs	r3, #2
 8006112:	e06e      	b.n	80061f2 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	4313      	orrs	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	4313      	orrs	r3, r2
 8006144:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	695b      	ldr	r3, [r3, #20]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	041b      	lsls	r3, r3, #16
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	69db      	ldr	r3, [r3, #28]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a17      	ldr	r2, [pc, #92]	@ (8006200 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d11c      	bne.n	80061e0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b0:	051b      	lsls	r3, r3, #20
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40012c00 	.word	0x40012c00

08006204 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b088      	sub	sp, #32
 8006208:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	2218      	movs	r2, #24
 8006214:	2100      	movs	r1, #0
 8006216:	4618      	mov	r0, r3
 8006218:	f001 f8dd 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800621c:	233f      	movs	r3, #63	@ 0x3f
 800621e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8006220:	2381      	movs	r3, #129	@ 0x81
 8006222:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006224:	1dfb      	adds	r3, r7, #7
 8006226:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8006228:	2301      	movs	r3, #1
 800622a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800622c:	f107 0308 	add.w	r3, r7, #8
 8006230:	2100      	movs	r1, #0
 8006232:	4618      	mov	r0, r3
 8006234:	f001 fc8c 	bl	8007b50 <hci_send_req>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	da01      	bge.n	8006242 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800623e:	23ff      	movs	r3, #255	@ 0xff
 8006240:	e000      	b.n	8006244 <aci_gap_set_non_discoverable+0x40>
  return status;
 8006242:	79fb      	ldrb	r3, [r7, #7]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800624c:	b5b0      	push	{r4, r5, r7, lr}
 800624e:	b0ce      	sub	sp, #312	@ 0x138
 8006250:	af00      	add	r7, sp, #0
 8006252:	4605      	mov	r5, r0
 8006254:	460c      	mov	r4, r1
 8006256:	4610      	mov	r0, r2
 8006258:	4619      	mov	r1, r3
 800625a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800625e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006262:	462a      	mov	r2, r5
 8006264:	701a      	strb	r2, [r3, #0]
 8006266:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800626a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800626e:	4622      	mov	r2, r4
 8006270:	801a      	strh	r2, [r3, #0]
 8006272:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006276:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800627a:	4602      	mov	r2, r0
 800627c:	801a      	strh	r2, [r3, #0]
 800627e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006282:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006286:	460a      	mov	r2, r1
 8006288:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800628a:	f107 0310 	add.w	r3, r7, #16
 800628e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8006292:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006296:	3308      	adds	r3, #8
 8006298:	f107 0210 	add.w	r2, r7, #16
 800629c:	4413      	add	r3, r2
 800629e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80062a2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80062a6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80062aa:	4413      	add	r3, r2
 80062ac:	3309      	adds	r3, #9
 80062ae:	f107 0210 	add.w	r2, r7, #16
 80062b2:	4413      	add	r3, r2
 80062b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80062b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80062bc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80062c0:	2200      	movs	r2, #0
 80062c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80062ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80062ce:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80062d2:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80062da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062de:	3301      	adds	r3, #1
 80062e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80062e4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80062e8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80062ec:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80062f0:	8812      	ldrh	r2, [r2, #0]
 80062f2:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80062f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80062fa:	3302      	adds	r3, #2
 80062fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006300:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006304:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006308:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800630c:	8812      	ldrh	r2, [r2, #0]
 800630e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8006312:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006316:	3302      	adds	r3, #2
 8006318:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800631c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006320:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006324:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006328:	7812      	ldrb	r2, [r2, #0]
 800632a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800632c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006330:	3301      	adds	r3, #1
 8006332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006336:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800633a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800633e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8006340:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006344:	3301      	adds	r3, #1
 8006346:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800634a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800634e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006352:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8006354:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006358:	3301      	adds	r3, #1
 800635a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800635e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006362:	3308      	adds	r3, #8
 8006364:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8006368:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800636c:	4618      	mov	r0, r3
 800636e:	f001 f822 	bl	80073b6 <Osal_MemCpy>
    index_input += Local_Name_Length;
 8006372:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8006376:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800637a:	4413      	add	r3, r2
 800637c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8006380:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006384:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006388:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800638a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800638e:	3301      	adds	r3, #1
 8006390:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8006394:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006398:	3301      	adds	r3, #1
 800639a:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800639e:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 f807 	bl	80073b6 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80063a8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80063ac:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80063b0:	4413      	add	r3, r2
 80063b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80063b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063ba:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80063be:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80063c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063c4:	3302      	adds	r3, #2
 80063c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80063ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80063ce:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80063d2:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80063d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80063d8:	3302      	adds	r3, #2
 80063da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80063de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063e2:	2218      	movs	r2, #24
 80063e4:	2100      	movs	r1, #0
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 fff5 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80063ec:	233f      	movs	r3, #63	@ 0x3f
 80063ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80063f2:	2383      	movs	r3, #131	@ 0x83
 80063f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80063f8:	f107 0310 	add.w	r3, r7, #16
 80063fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006400:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006404:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006408:	f107 030f 	add.w	r3, r7, #15
 800640c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006410:	2301      	movs	r3, #1
 8006412:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006416:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f001 fb97 	bl	8007b50 <hci_send_req>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	da01      	bge.n	800642c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8006428:	23ff      	movs	r3, #255	@ 0xff
 800642a:	e004      	b.n	8006436 <aci_gap_set_discoverable+0x1ea>
  return status;
 800642c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006430:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006434:	781b      	ldrb	r3, [r3, #0]
}
 8006436:	4618      	mov	r0, r3
 8006438:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800643c:	46bd      	mov	sp, r7
 800643e:	bdb0      	pop	{r4, r5, r7, pc}

08006440 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b0cc      	sub	sp, #304	@ 0x130
 8006444:	af00      	add	r7, sp, #0
 8006446:	4602      	mov	r2, r0
 8006448:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800644c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006450:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8006452:	f107 0310 	add.w	r3, r7, #16
 8006456:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800645a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800645e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006466:	2300      	movs	r3, #0
 8006468:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800646c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006470:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006474:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006478:	7812      	ldrb	r2, [r2, #0]
 800647a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800647c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006480:	3301      	adds	r3, #1
 8006482:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006486:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800648a:	2218      	movs	r2, #24
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f000 ffa1 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006494:	233f      	movs	r3, #63	@ 0x3f
 8006496:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800649a:	2385      	movs	r3, #133	@ 0x85
 800649c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80064a0:	f107 0310 	add.w	r3, r7, #16
 80064a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80064a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80064ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80064b0:	f107 030f 	add.w	r3, r7, #15
 80064b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80064b8:	2301      	movs	r3, #1
 80064ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80064be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80064c2:	2100      	movs	r1, #0
 80064c4:	4618      	mov	r0, r3
 80064c6:	f001 fb43 	bl	8007b50 <hci_send_req>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	da01      	bge.n	80064d4 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80064d0:	23ff      	movs	r3, #255	@ 0xff
 80064d2:	e004      	b.n	80064de <aci_gap_set_io_capability+0x9e>
  return status;
 80064d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80064dc:	781b      	ldrb	r3, [r3, #0]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80064e8:	b5b0      	push	{r4, r5, r7, lr}
 80064ea:	b0cc      	sub	sp, #304	@ 0x130
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4605      	mov	r5, r0
 80064f0:	460c      	mov	r4, r1
 80064f2:	4610      	mov	r0, r2
 80064f4:	4619      	mov	r1, r3
 80064f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80064fa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80064fe:	462a      	mov	r2, r5
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006506:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800650a:	4622      	mov	r2, r4
 800650c:	701a      	strb	r2, [r3, #0]
 800650e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006512:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006516:	4602      	mov	r2, r0
 8006518:	701a      	strb	r2, [r3, #0]
 800651a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800651e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006522:	460a      	mov	r2, r1
 8006524:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8006526:	f107 0310 	add.w	r3, r7, #16
 800652a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800652e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006532:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006536:	2200      	movs	r2, #0
 8006538:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800653a:	2300      	movs	r3, #0
 800653c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8006540:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006544:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006548:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800654c:	7812      	ldrb	r2, [r2, #0]
 800654e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006550:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006554:	3301      	adds	r3, #1
 8006556:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800655a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800655e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006562:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006566:	7812      	ldrb	r2, [r2, #0]
 8006568:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800656a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800656e:	3301      	adds	r3, #1
 8006570:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 8006574:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006578:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800657c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006580:	7812      	ldrb	r2, [r2, #0]
 8006582:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006584:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006588:	3301      	adds	r3, #1
 800658a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800658e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006592:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006596:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800659a:	7812      	ldrb	r2, [r2, #0]
 800659c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800659e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065a2:	3301      	adds	r3, #1
 80065a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80065a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065ac:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 80065b0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80065b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065b6:	3301      	adds	r3, #1
 80065b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80065bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065c0:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80065c4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80065c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065ca:	3301      	adds	r3, #1
 80065cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80065d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065d4:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80065d8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80065da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065de:	3301      	adds	r3, #1
 80065e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80065e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80065ec:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80065f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80065f4:	3304      	adds	r3, #4
 80065f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80065fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80065fe:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006602:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8006604:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006608:	3301      	adds	r3, #1
 800660a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800660e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006612:	2218      	movs	r2, #24
 8006614:	2100      	movs	r1, #0
 8006616:	4618      	mov	r0, r3
 8006618:	f000 fedd 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800661c:	233f      	movs	r3, #63	@ 0x3f
 800661e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8006622:	2386      	movs	r3, #134	@ 0x86
 8006624:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006628:	f107 0310 	add.w	r3, r7, #16
 800662c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006630:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006634:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006638:	f107 030f 	add.w	r3, r7, #15
 800663c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006640:	2301      	movs	r3, #1
 8006642:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006646:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800664a:	2100      	movs	r1, #0
 800664c:	4618      	mov	r0, r3
 800664e:	f001 fa7f 	bl	8007b50 <hci_send_req>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	da01      	bge.n	800665c <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8006658:	23ff      	movs	r3, #255	@ 0xff
 800665a:	e004      	b.n	8006666 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800665c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006660:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006664:	781b      	ldrb	r3, [r3, #0]
}
 8006666:	4618      	mov	r0, r3
 8006668:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800666c:	46bd      	mov	sp, r7
 800666e:	bdb0      	pop	{r4, r5, r7, pc}

08006670 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b0cd      	sub	sp, #308	@ 0x134
 8006674:	af00      	add	r7, sp, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	4611      	mov	r1, r2
 800667c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006680:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800668a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800668e:	4622      	mov	r2, r4
 8006690:	701a      	strb	r2, [r3, #0]
 8006692:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006696:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800669a:	4602      	mov	r2, r0
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80066a2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80066a6:	460a      	mov	r2, r1
 80066a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80066aa:	f107 0310 	add.w	r3, r7, #16
 80066ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	2207      	movs	r2, #7
 80066b8:	2100      	movs	r1, #0
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 fe8b 	bl	80073d6 <Osal_MemSet>
  int index_input = 0;
 80066c0:	2300      	movs	r3, #0
 80066c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 80066c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066ca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066ce:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80066d2:	7812      	ldrb	r2, [r2, #0]
 80066d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80066d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066da:	3301      	adds	r3, #1
 80066dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 80066e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80066e8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80066ec:	7812      	ldrb	r2, [r2, #0]
 80066ee:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80066f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80066f4:	3301      	adds	r3, #1
 80066f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80066fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80066fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006702:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006706:	7812      	ldrb	r2, [r2, #0]
 8006708:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800670a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800670e:	3301      	adds	r3, #1
 8006710:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006714:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006718:	2218      	movs	r2, #24
 800671a:	2100      	movs	r1, #0
 800671c:	4618      	mov	r0, r3
 800671e:	f000 fe5a 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006722:	233f      	movs	r3, #63	@ 0x3f
 8006724:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8006728:	238a      	movs	r3, #138	@ 0x8a
 800672a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800672e:	f107 0310 	add.w	r3, r7, #16
 8006732:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006736:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800673a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800673e:	f107 0308 	add.w	r3, r7, #8
 8006742:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006746:	2307      	movs	r3, #7
 8006748:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800674c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006750:	2100      	movs	r1, #0
 8006752:	4618      	mov	r0, r3
 8006754:	f001 f9fc 	bl	8007b50 <hci_send_req>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	da01      	bge.n	8006762 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800675e:	23ff      	movs	r3, #255	@ 0xff
 8006760:	e02e      	b.n	80067c0 <aci_gap_init+0x150>
  if ( resp.Status )
 8006762:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006766:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <aci_gap_init+0x10c>
    return resp.Status;
 8006770:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006774:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	e021      	b.n	80067c0 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800677c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006780:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8006784:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006788:	b29a      	uxth	r2, r3
 800678a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800678e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006796:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800679a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800679e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80067a2:	b29a      	uxth	r2, r3
 80067a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80067a8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80067aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80067b2:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80067bc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80067be:	2300      	movs	r3, #0
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd90      	pop	{r4, r7, pc}

080067ca <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b0cc      	sub	sp, #304	@ 0x130
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	4602      	mov	r2, r0
 80067d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80067da:	6019      	str	r1, [r3, #0]
 80067dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067e0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80067e4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 80067e6:	f107 0310 	add.w	r3, r7, #16
 80067ea:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80067ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80067f2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80067f6:	2200      	movs	r2, #0
 80067f8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80067fa:	2300      	movs	r3, #0
 80067fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8006800:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006804:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006808:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800680c:	7812      	ldrb	r2, [r2, #0]
 800680e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006810:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006814:	3301      	adds	r3, #1
 8006816:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800681a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800681e:	1c58      	adds	r0, r3, #1
 8006820:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006824:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800682e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	f000 fdbf 	bl	80073b6 <Osal_MemCpy>
  index_input += AdvDataLen;
 8006838:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800683c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006846:	4413      	add	r3, r2
 8006848:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800684c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006850:	2218      	movs	r2, #24
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fdbe 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800685a:	233f      	movs	r3, #63	@ 0x3f
 800685c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8006860:	238e      	movs	r3, #142	@ 0x8e
 8006862:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006866:	f107 0310 	add.w	r3, r7, #16
 800686a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800686e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006872:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006876:	f107 030f 	add.w	r3, r7, #15
 800687a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800687e:	2301      	movs	r3, #1
 8006880:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006888:	2100      	movs	r1, #0
 800688a:	4618      	mov	r0, r3
 800688c:	f001 f960 	bl	8007b50 <hci_send_req>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	da01      	bge.n	800689a <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8006896:	23ff      	movs	r3, #255	@ 0xff
 8006898:	e004      	b.n	80068a4 <aci_gap_update_adv_data+0xda>
  return status;
 800689a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800689e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80068a2:	781b      	ldrb	r3, [r3, #0]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b088      	sub	sp, #32
 80068b2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80068b8:	f107 0308 	add.w	r3, r7, #8
 80068bc:	2218      	movs	r2, #24
 80068be:	2100      	movs	r1, #0
 80068c0:	4618      	mov	r0, r3
 80068c2:	f000 fd88 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 80068c6:	233f      	movs	r3, #63	@ 0x3f
 80068c8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80068ca:	2392      	movs	r3, #146	@ 0x92
 80068cc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80068ce:	1dfb      	adds	r3, r7, #7
 80068d0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80068d2:	2301      	movs	r3, #1
 80068d4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80068d6:	f107 0308 	add.w	r3, r7, #8
 80068da:	2100      	movs	r1, #0
 80068dc:	4618      	mov	r0, r3
 80068de:	f001 f937 	bl	8007b50 <hci_send_req>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	da01      	bge.n	80068ec <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 80068e8:	23ff      	movs	r3, #255	@ 0xff
 80068ea:	e000      	b.n	80068ee <aci_gap_configure_filter_accept_list+0x40>
  return status;
 80068ec:	79fb      	ldrb	r3, [r7, #7]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3720      	adds	r7, #32
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b088      	sub	sp, #32
 80068fa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006900:	f107 0308 	add.w	r3, r7, #8
 8006904:	2218      	movs	r2, #24
 8006906:	2100      	movs	r1, #0
 8006908:	4618      	mov	r0, r3
 800690a:	f000 fd64 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800690e:	233f      	movs	r3, #63	@ 0x3f
 8006910:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8006912:	f240 1301 	movw	r3, #257	@ 0x101
 8006916:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8006918:	1dfb      	adds	r3, r7, #7
 800691a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800691c:	2301      	movs	r3, #1
 800691e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006920:	f107 0308 	add.w	r3, r7, #8
 8006924:	2100      	movs	r1, #0
 8006926:	4618      	mov	r0, r3
 8006928:	f001 f912 	bl	8007b50 <hci_send_req>
 800692c:	4603      	mov	r3, r0
 800692e:	2b00      	cmp	r3, #0
 8006930:	da01      	bge.n	8006936 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8006932:	23ff      	movs	r3, #255	@ 0xff
 8006934:	e000      	b.n	8006938 <aci_gatt_init+0x42>
  return status;
 8006936:	79fb      	ldrb	r3, [r7, #7]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3720      	adds	r7, #32
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8006940:	b590      	push	{r4, r7, lr}
 8006942:	b0cf      	sub	sp, #316	@ 0x13c
 8006944:	af00      	add	r7, sp, #0
 8006946:	4604      	mov	r4, r0
 8006948:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800694c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8006950:	6001      	str	r1, [r0, #0]
 8006952:	4610      	mov	r0, r2
 8006954:	4619      	mov	r1, r3
 8006956:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800695a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800695e:	4622      	mov	r2, r4
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006966:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800696a:	4602      	mov	r2, r0
 800696c:	701a      	strb	r2, [r3, #0]
 800696e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006972:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006976:	460a      	mov	r2, r1
 8006978:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800697a:	f107 0310 	add.w	r3, r7, #16
 800697e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8006982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006986:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d00a      	beq.n	80069a6 <aci_gatt_add_service+0x66>
 8006990:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006994:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b02      	cmp	r3, #2
 800699c:	d101      	bne.n	80069a2 <aci_gatt_add_service+0x62>
 800699e:	2311      	movs	r3, #17
 80069a0:	e002      	b.n	80069a8 <aci_gatt_add_service+0x68>
 80069a2:	2301      	movs	r3, #1
 80069a4:	e000      	b.n	80069a8 <aci_gatt_add_service+0x68>
 80069a6:	2303      	movs	r3, #3
 80069a8:	f107 0210 	add.w	r2, r7, #16
 80069ac:	4413      	add	r3, r2
 80069ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80069b2:	f107 030c 	add.w	r3, r7, #12
 80069b6:	2203      	movs	r2, #3
 80069b8:	2100      	movs	r1, #0
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fd0b 	bl	80073d6 <Osal_MemSet>
  int index_input = 0;
 80069c0:	2300      	movs	r3, #0
 80069c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80069c6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80069ca:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80069ce:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80069d2:	7812      	ldrb	r2, [r2, #0]
 80069d4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80069d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80069da:	3301      	adds	r3, #1
 80069dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80069e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80069e4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d002      	beq.n	80069f4 <aci_gatt_add_service+0xb4>
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d004      	beq.n	80069fc <aci_gatt_add_service+0xbc>
 80069f2:	e007      	b.n	8006a04 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80069f4:	2302      	movs	r3, #2
 80069f6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80069fa:	e005      	b.n	8006a08 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8006a02:	e001      	b.n	8006a08 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8006a04:	2397      	movs	r3, #151	@ 0x97
 8006a06:	e06c      	b.n	8006ae2 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8006a08:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006a0c:	1c58      	adds	r0, r3, #1
 8006a0e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8006a12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006a16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006a1a:	6819      	ldr	r1, [r3, #0]
 8006a1c:	f000 fccb 	bl	80073b6 <Osal_MemCpy>
    index_input += size;
 8006a20:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8006a24:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006a28:	4413      	add	r3, r2
 8006a2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8006a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a32:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a36:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8006a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a42:	3301      	adds	r3, #1
 8006a44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8006a48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006a4c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8006a50:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8006a58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006a62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006a66:	2218      	movs	r2, #24
 8006a68:	2100      	movs	r1, #0
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fcb3 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006a70:	233f      	movs	r3, #63	@ 0x3f
 8006a72:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8006a76:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8006a7a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006a7e:	f107 0310 	add.w	r3, r7, #16
 8006a82:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006a86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006a8a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8006a8e:	f107 030c 	add.w	r3, r7, #12
 8006a92:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8006a96:	2303      	movs	r3, #3
 8006a98:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006a9c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f001 f854 	bl	8007b50 <hci_send_req>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	da01      	bge.n	8006ab2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8006aae:	23ff      	movs	r3, #255	@ 0xff
 8006ab0:	e017      	b.n	8006ae2 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8006ab2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ab6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d005      	beq.n	8006acc <aci_gatt_add_service+0x18c>
    return resp.Status;
 8006ac0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ac4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	e00a      	b.n	8006ae2 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8006acc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8006ad0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ad4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8006ade:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd90      	pop	{r4, r7, pc}

08006aec <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8006aec:	b590      	push	{r4, r7, lr}
 8006aee:	b0d1      	sub	sp, #324	@ 0x144
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4604      	mov	r4, r0
 8006af4:	4608      	mov	r0, r1
 8006af6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8006afa:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8006afe:	600a      	str	r2, [r1, #0]
 8006b00:	4619      	mov	r1, r3
 8006b02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006b06:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8006b0a:	4622      	mov	r2, r4
 8006b0c:	801a      	strh	r2, [r3, #0]
 8006b0e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006b12:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006b16:	4602      	mov	r2, r0
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006b1e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8006b22:	460a      	mov	r2, r1
 8006b24:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8006b26:	f107 0318 	add.w	r3, r7, #24
 8006b2a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8006b2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006b32:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d00a      	beq.n	8006b52 <aci_gatt_add_char+0x66>
 8006b3c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006b40:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d101      	bne.n	8006b4e <aci_gatt_add_char+0x62>
 8006b4a:	2313      	movs	r3, #19
 8006b4c:	e002      	b.n	8006b54 <aci_gatt_add_char+0x68>
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e000      	b.n	8006b54 <aci_gatt_add_char+0x68>
 8006b52:	2305      	movs	r3, #5
 8006b54:	f107 0218 	add.w	r2, r7, #24
 8006b58:	4413      	add	r3, r2
 8006b5a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8006b5e:	f107 0314 	add.w	r3, r7, #20
 8006b62:	2203      	movs	r2, #3
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f000 fc35 	bl	80073d6 <Osal_MemSet>
  int index_input = 0;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8006b72:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006b76:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006b7a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8006b7e:	8812      	ldrh	r2, [r2, #0]
 8006b80:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006b82:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006b86:	3302      	adds	r3, #2
 8006b88:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8006b8c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006b90:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006b94:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8006b98:	7812      	ldrb	r2, [r2, #0]
 8006b9a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8006b9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8006ba6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006baa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d002      	beq.n	8006bba <aci_gatt_add_char+0xce>
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d004      	beq.n	8006bc2 <aci_gatt_add_char+0xd6>
 8006bb8:	e007      	b.n	8006bca <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8006bba:	2302      	movs	r3, #2
 8006bbc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006bc0:	e005      	b.n	8006bce <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8006bc2:	2310      	movs	r3, #16
 8006bc4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8006bc8:	e001      	b.n	8006bce <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8006bca:	2397      	movs	r3, #151	@ 0x97
 8006bcc:	e091      	b.n	8006cf2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8006bce:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8006bd2:	1cd8      	adds	r0, r3, #3
 8006bd4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8006bd8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006bdc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8006be0:	6819      	ldr	r1, [r3, #0]
 8006be2:	f000 fbe8 	bl	80073b6 <Osal_MemCpy>
    index_input += size;
 8006be6:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8006bea:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8006bee:	4413      	add	r3, r2
 8006bf0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8006bf4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006bf8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8006bfc:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8006c00:	8812      	ldrh	r2, [r2, #0]
 8006c02:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8006c04:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c08:	3302      	adds	r3, #2
 8006c0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8006c0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c12:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8006c16:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8006c18:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8006c22:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c26:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8006c2a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8006c2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c30:	3301      	adds	r3, #1
 8006c32:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8006c36:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c3a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8006c3e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8006c40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c44:	3301      	adds	r3, #1
 8006c46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8006c4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c4e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8006c52:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8006c54:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c58:	3301      	adds	r3, #1
 8006c5a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8006c5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8006c62:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8006c66:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8006c68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006c72:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006c76:	2218      	movs	r2, #24
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fbab 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006c80:	233f      	movs	r3, #63	@ 0x3f
 8006c82:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8006c86:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8006c8a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8006c8e:	f107 0318 	add.w	r3, r7, #24
 8006c92:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8006c96:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8006c9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8006c9e:	f107 0314 	add.w	r3, r7, #20
 8006ca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006cac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 ff4c 	bl	8007b50 <hci_send_req>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da01      	bge.n	8006cc2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8006cbe:	23ff      	movs	r3, #255	@ 0xff
 8006cc0:	e017      	b.n	8006cf2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8006cc2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006cc6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8006cd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006cd4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	e00a      	b.n	8006cf2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8006cdc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8006ce0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006ce4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8006cee:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd90      	pop	{r4, r7, pc}

08006cfc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8006cfc:	b5b0      	push	{r4, r5, r7, lr}
 8006cfe:	b0cc      	sub	sp, #304	@ 0x130
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	4605      	mov	r5, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	4610      	mov	r0, r2
 8006d08:	4619      	mov	r1, r3
 8006d0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d0e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006d12:	462a      	mov	r2, r5
 8006d14:	801a      	strh	r2, [r3, #0]
 8006d16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d1a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8006d1e:	4622      	mov	r2, r4
 8006d20:	801a      	strh	r2, [r3, #0]
 8006d22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d26:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8006d2a:	4602      	mov	r2, r0
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d32:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006d36:	460a      	mov	r2, r1
 8006d38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8006d3a:	f107 0310 	add.w	r3, r7, #16
 8006d3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006d42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006d46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8006d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d5c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006d60:	8812      	ldrh	r2, [r2, #0]
 8006d62:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d68:	3302      	adds	r3, #2
 8006d6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8006d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d72:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d76:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8006d7a:	8812      	ldrh	r2, [r2, #0]
 8006d7c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8006d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d82:	3302      	adds	r3, #2
 8006d84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8006d88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006d8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006d90:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8006d94:	7812      	ldrb	r2, [r2, #0]
 8006d96:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8006d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8006da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006da6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006daa:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8006dae:	7812      	ldrb	r2, [r2, #0]
 8006db0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8006db2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006db6:	3301      	adds	r3, #1
 8006db8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8006dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006dc0:	1d98      	adds	r0, r3, #6
 8006dc2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006dc6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8006dd2:	f000 faf0 	bl	80073b6 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8006dd6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006dda:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006de4:	4413      	add	r3, r2
 8006de6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006dea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006dee:	2218      	movs	r2, #24
 8006df0:	2100      	movs	r1, #0
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 faef 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006df8:	233f      	movs	r3, #63	@ 0x3f
 8006dfa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8006dfe:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8006e02:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006e06:	f107 0310 	add.w	r3, r7, #16
 8006e0a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006e0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e12:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006e16:	f107 030f 	add.w	r3, r7, #15
 8006e1a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006e24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e28:	2100      	movs	r1, #0
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f000 fe90 	bl	8007b50 <hci_send_req>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	da01      	bge.n	8006e3a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8006e36:	23ff      	movs	r3, #255	@ 0xff
 8006e38:	e004      	b.n	8006e44 <aci_gatt_update_char_value+0x148>
  return status;
 8006e3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e3e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e42:	781b      	ldrb	r3, [r3, #0]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bdb0      	pop	{r4, r5, r7, pc}

08006e4e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b0cc      	sub	sp, #304	@ 0x130
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	4602      	mov	r2, r0
 8006e56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e5a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006e5e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8006e60:	f107 0310 	add.w	r3, r7, #16
 8006e64:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006e68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006e6c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006e70:	2200      	movs	r2, #0
 8006e72:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006e74:	2300      	movs	r3, #0
 8006e76:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8006e7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006e7e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006e82:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006e86:	8812      	ldrh	r2, [r2, #0]
 8006e88:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8006e8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006e8e:	3302      	adds	r3, #2
 8006e90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006e94:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006e98:	2218      	movs	r2, #24
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 fa9a 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006ea2:	233f      	movs	r3, #63	@ 0x3f
 8006ea4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8006ea8:	f240 1325 	movw	r3, #293	@ 0x125
 8006eac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006eb0:	f107 0310 	add.w	r3, r7, #16
 8006eb4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006eb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006ebc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006ec0:	f107 030f 	add.w	r3, r7, #15
 8006ec4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006ece:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 fe3b 	bl	8007b50 <hci_send_req>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da01      	bge.n	8006ee4 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8006ee0:	23ff      	movs	r3, #255	@ 0xff
 8006ee2:	e004      	b.n	8006eee <aci_gatt_confirm_indication+0xa0>
  return status;
 8006ee4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ee8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006eec:	781b      	ldrb	r3, [r3, #0]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b0cc      	sub	sp, #304	@ 0x130
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006f06:	601a      	str	r2, [r3, #0]
 8006f08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f0c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006f10:	4602      	mov	r2, r0
 8006f12:	701a      	strb	r2, [r3, #0]
 8006f14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f18:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006f1c:	460a      	mov	r2, r1
 8006f1e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006f20:	f107 0310 	add.w	r3, r7, #16
 8006f24:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006f28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f2c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006f30:	2200      	movs	r2, #0
 8006f32:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8006f3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f3e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f42:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006f46:	7812      	ldrb	r2, [r2, #0]
 8006f48:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006f4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f4e:	3301      	adds	r3, #1
 8006f50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8006f54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006f5c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006f60:	7812      	ldrb	r2, [r2, #0]
 8006f62:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006f64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8006f6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006f72:	1c98      	adds	r0, r3, #2
 8006f74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f78:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006f7c:	781a      	ldrb	r2, [r3, #0]
 8006f7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f82:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006f86:	6819      	ldr	r1, [r3, #0]
 8006f88:	f000 fa15 	bl	80073b6 <Osal_MemCpy>
  index_input += Length;
 8006f8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006f90:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006fa0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006fa4:	2218      	movs	r2, #24
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 fa14 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8006fae:	233f      	movs	r3, #63	@ 0x3f
 8006fb0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8006fb4:	230c      	movs	r3, #12
 8006fb6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006fba:	f107 0310 	add.w	r3, r7, #16
 8006fbe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006fc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006fc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006fca:	f107 030f 	add.w	r3, r7, #15
 8006fce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8006fd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006fdc:	2100      	movs	r1, #0
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fdb6 	bl	8007b50 <hci_send_req>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	da01      	bge.n	8006fee <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8006fea:	23ff      	movs	r3, #255	@ 0xff
 8006fec:	e004      	b.n	8006ff8 <aci_hal_write_config_data+0x100>
  return status;
 8006fee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006ff2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006ff6:	781b      	ldrb	r3, [r3, #0]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b0cc      	sub	sp, #304	@ 0x130
 8007006:	af00      	add	r7, sp, #0
 8007008:	4602      	mov	r2, r0
 800700a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800700e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8007012:	701a      	strb	r2, [r3, #0]
 8007014:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007018:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800701c:	460a      	mov	r2, r1
 800701e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8007020:	f107 0310 	add.w	r3, r7, #16
 8007024:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8007028:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800702c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8007030:	2200      	movs	r2, #0
 8007032:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800703a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800703e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007042:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007046:	7812      	ldrb	r2, [r2, #0]
 8007048:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800704a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800704e:	3301      	adds	r3, #1
 8007050:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8007054:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007058:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800705c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007060:	7812      	ldrb	r2, [r2, #0]
 8007062:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007064:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007068:	3301      	adds	r3, #1
 800706a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800706e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007072:	2218      	movs	r2, #24
 8007074:	2100      	movs	r1, #0
 8007076:	4618      	mov	r0, r3
 8007078:	f000 f9ad 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 800707c:	233f      	movs	r3, #63	@ 0x3f
 800707e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8007082:	230f      	movs	r3, #15
 8007084:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007088:	f107 0310 	add.w	r3, r7, #16
 800708c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007090:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007094:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007098:	f107 030f 	add.w	r3, r7, #15
 800709c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80070a0:	2301      	movs	r3, #1
 80070a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80070a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80070aa:	2100      	movs	r1, #0
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fd4f 	bl	8007b50 <hci_send_req>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	da01      	bge.n	80070bc <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80070b8:	23ff      	movs	r3, #255	@ 0xff
 80070ba:	e004      	b.n	80070c6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80070bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070c0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80070c4:	781b      	ldrb	r3, [r3, #0]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b0cc      	sub	sp, #304	@ 0x130
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	4602      	mov	r2, r0
 80070d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070dc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80070e0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80070e2:	f107 0310 	add.w	r3, r7, #16
 80070e6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80070ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80070ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80070f6:	2300      	movs	r3, #0
 80070f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80070fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007100:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007104:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8007108:	8812      	ldrh	r2, [r2, #0]
 800710a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800710c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007110:	3302      	adds	r3, #2
 8007112:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007116:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800711a:	2218      	movs	r2, #24
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f000 f959 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x3f;
 8007124:	233f      	movs	r3, #63	@ 0x3f
 8007126:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800712a:	2318      	movs	r3, #24
 800712c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8007130:	f107 0310 	add.w	r3, r7, #16
 8007134:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007138:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800713c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8007140:	f107 030f 	add.w	r3, r7, #15
 8007144:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007148:	2301      	movs	r3, #1
 800714a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800714e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007152:	2100      	movs	r1, #0
 8007154:	4618      	mov	r0, r3
 8007156:	f000 fcfb 	bl	8007b50 <hci_send_req>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	da01      	bge.n	8007164 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8007160:	23ff      	movs	r3, #255	@ 0xff
 8007162:	e004      	b.n	800716e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8007164:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8007168:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800716c:	781b      	ldrb	r3, [r3, #0]
}
 800716e:	4618      	mov	r0, r3
 8007170:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800717e:	2300      	movs	r3, #0
 8007180:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007182:	f107 0308 	add.w	r3, r7, #8
 8007186:	2218      	movs	r2, #24
 8007188:	2100      	movs	r1, #0
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f923 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x03;
 8007190:	2303      	movs	r3, #3
 8007192:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8007194:	2303      	movs	r3, #3
 8007196:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007198:	1dfb      	adds	r3, r7, #7
 800719a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800719c:	2301      	movs	r3, #1
 800719e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80071a0:	f107 0308 	add.w	r3, r7, #8
 80071a4:	2100      	movs	r1, #0
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 fcd2 	bl	8007b50 <hci_send_req>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da01      	bge.n	80071b6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80071b2:	23ff      	movs	r3, #255	@ 0xff
 80071b4:	e000      	b.n	80071b8 <hci_reset+0x40>
  return status;
 80071b6:	79fb      	ldrb	r3, [r7, #7]
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3720      	adds	r7, #32
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b0ce      	sub	sp, #312	@ 0x138
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80071ce:	6019      	str	r1, [r3, #0]
 80071d0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071d4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80071de:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80071e2:	4602      	mov	r2, r0
 80071e4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80071e6:	f107 0318 	add.w	r3, r7, #24
 80071ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80071ee:	f107 0310 	add.w	r3, r7, #16
 80071f2:	2205      	movs	r2, #5
 80071f4:	2100      	movs	r1, #0
 80071f6:	4618      	mov	r0, r3
 80071f8:	f000 f8ed 	bl	80073d6 <Osal_MemSet>
  int index_input = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 8007202:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007206:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800720a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800720e:	8812      	ldrh	r2, [r2, #0]
 8007210:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007212:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007216:	3302      	adds	r3, #2
 8007218:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800721c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007220:	2218      	movs	r2, #24
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f000 f8d6 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x08;
 800722a:	2308      	movs	r3, #8
 800722c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 8007230:	2330      	movs	r3, #48	@ 0x30
 8007232:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8007236:	f107 0318 	add.w	r3, r7, #24
 800723a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800723e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8007242:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8007246:	f107 0310 	add.w	r3, r7, #16
 800724a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800724e:	2305      	movs	r3, #5
 8007250:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007254:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8007258:	2100      	movs	r1, #0
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fc78 	bl	8007b50 <hci_send_req>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	da01      	bge.n	800726a <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8007266:	23ff      	movs	r3, #255	@ 0xff
 8007268:	e023      	b.n	80072b2 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800726a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800726e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d005      	beq.n	8007284 <hci_le_read_phy+0xc4>
    return resp.Status;
 8007278:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800727c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	e016      	b.n	80072b2 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8007284:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007288:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800728c:	78da      	ldrb	r2, [r3, #3]
 800728e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8007292:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800729a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800729e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80072a2:	791a      	ldrb	r2, [r3, #4]
 80072a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80072a8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80072bc:	b590      	push	{r4, r7, lr}
 80072be:	b0cd      	sub	sp, #308	@ 0x134
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072cc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80072d0:	4622      	mov	r2, r4
 80072d2:	701a      	strb	r2, [r3, #0]
 80072d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072d8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80072dc:	4602      	mov	r2, r0
 80072de:	701a      	strb	r2, [r3, #0]
 80072e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072e4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80072e8:	460a      	mov	r2, r1
 80072ea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 80072ec:	f107 0310 	add.w	r3, r7, #16
 80072f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80072f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80072f8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8007306:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800730a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800730e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8007312:	7812      	ldrb	r2, [r2, #0]
 8007314:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007316:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800731a:	3301      	adds	r3, #1
 800731c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8007320:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007324:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007328:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800732c:	7812      	ldrb	r2, [r2, #0]
 800732e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007330:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007334:	3301      	adds	r3, #1
 8007336:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800733a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800733e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8007342:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8007346:	7812      	ldrb	r2, [r2, #0]
 8007348:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800734a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800734e:	3301      	adds	r3, #1
 8007350:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007354:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007358:	2218      	movs	r2, #24
 800735a:	2100      	movs	r1, #0
 800735c:	4618      	mov	r0, r3
 800735e:	f000 f83a 	bl	80073d6 <Osal_MemSet>
  rq.ogf = 0x08;
 8007362:	2308      	movs	r3, #8
 8007364:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8007368:	2331      	movs	r3, #49	@ 0x31
 800736a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800736e:	f107 0310 	add.w	r3, r7, #16
 8007372:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8007376:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800737a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800737e:	f107 030f 	add.w	r3, r7, #15
 8007382:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8007386:	2301      	movs	r3, #1
 8007388:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800738c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007390:	2100      	movs	r1, #0
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fbdc 	bl	8007b50 <hci_send_req>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	da01      	bge.n	80073a2 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800739e:	23ff      	movs	r3, #255	@ 0xff
 80073a0:	e004      	b.n	80073ac <hci_le_set_default_phy+0xf0>
  return status;
 80073a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80073a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80073aa:	781b      	ldrb	r3, [r3, #0]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd90      	pop	{r4, r7, pc}

080073b6 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	68b9      	ldr	r1, [r7, #8]
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f002 fa30 	bl	800982c <memcpy>
 80073cc:	4603      	mov	r3, r0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3710      	adds	r7, #16
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b084      	sub	sp, #16
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	68b9      	ldr	r1, [r7, #8]
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f002 f9f4 	bl	80097d4 <memset>
 80073ec:	4603      	mov	r3, r0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	@ 0x28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8007400:	2300      	movs	r3, #0
 8007402:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	3301      	adds	r3, #1
 800740a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2bff      	cmp	r3, #255	@ 0xff
 8007412:	d14c      	bne.n	80074ae <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	3302      	adds	r3, #2
 8007418:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	881b      	ldrh	r3, [r3, #0]
 800741e:	b29b      	uxth	r3, r3
 8007420:	461a      	mov	r2, r3
 8007422:	f640 4301 	movw	r3, #3073	@ 0xc01
 8007426:	429a      	cmp	r2, r3
 8007428:	d13d      	bne.n	80074a6 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	3302      	adds	r3, #2
 800742e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	885b      	ldrh	r3, [r3, #2]
 8007434:	b29b      	uxth	r3, r3
 8007436:	461a      	mov	r2, r3
 8007438:	4b20      	ldr	r3, [pc, #128]	@ (80074bc <PeerToPeer_Event_Handler+0xc4>)
 800743a:	889b      	ldrh	r3, [r3, #4]
 800743c:	3302      	adds	r3, #2
 800743e:	429a      	cmp	r2, r3
 8007440:	d118      	bne.n	8007474 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8007442:	2301      	movs	r3, #1
 8007444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	7a1b      	ldrb	r3, [r3, #8]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d007      	beq.n	8007464 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8007454:	2300      	movs	r3, #0
 8007456:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007458:	f107 0308 	add.w	r3, r7, #8
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fc79 	bl	8008d54 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 8007462:	e022      	b.n	80074aa <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8007464:	2301      	movs	r3, #1
 8007466:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8007468:	f107 0308 	add.w	r3, r7, #8
 800746c:	4618      	mov	r0, r3
 800746e:	f001 fc71 	bl	8008d54 <P2PS_STM_App_Notification>
        break;
 8007472:	e01a      	b.n	80074aa <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	885b      	ldrh	r3, [r3, #2]
 8007478:	b29b      	uxth	r3, r3
 800747a:	461a      	mov	r2, r3
 800747c:	4b0f      	ldr	r3, [pc, #60]	@ (80074bc <PeerToPeer_Event_Handler+0xc4>)
 800747e:	885b      	ldrh	r3, [r3, #2]
 8007480:	3301      	adds	r3, #1
 8007482:	429a      	cmp	r2, r3
 8007484:	d111      	bne.n	80074aa <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8007486:	2303      	movs	r3, #3
 8007488:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	88db      	ldrh	r3, [r3, #6]
 800748e:	b29b      	uxth	r3, r3
 8007490:	b2db      	uxtb	r3, r3
 8007492:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	3308      	adds	r3, #8
 8007498:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800749a:	f107 0308 	add.w	r3, r7, #8
 800749e:	4618      	mov	r0, r3
 80074a0:	f001 fc58 	bl	8008d54 <P2PS_STM_App_Notification>
        break;
 80074a4:	e001      	b.n	80074aa <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 80074a6:	bf00      	nop
 80074a8:	e002      	b.n	80074b0 <PeerToPeer_Event_Handler+0xb8>
        break;
 80074aa:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80074ac:	e000      	b.n	80074b0 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 80074ae:	bf00      	nop
  }

  return(return_value);
 80074b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 80074b4:	4618      	mov	r0, r3
 80074b6:	3728      	adds	r7, #40	@ 0x28
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	2000003c 	.word	0x2000003c

080074c0 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b08a      	sub	sp, #40	@ 0x28
 80074c4:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 80074c6:	484a      	ldr	r0, [pc, #296]	@ (80075f0 <P2PS_STM_Init+0x130>)
 80074c8:	f000 f94a 	bl	8007760 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 80074cc:	238f      	movs	r3, #143	@ 0x8f
 80074ce:	703b      	strb	r3, [r7, #0]
 80074d0:	23e5      	movs	r3, #229	@ 0xe5
 80074d2:	707b      	strb	r3, [r7, #1]
 80074d4:	23b3      	movs	r3, #179	@ 0xb3
 80074d6:	70bb      	strb	r3, [r7, #2]
 80074d8:	23d5      	movs	r3, #213	@ 0xd5
 80074da:	70fb      	strb	r3, [r7, #3]
 80074dc:	232e      	movs	r3, #46	@ 0x2e
 80074de:	713b      	strb	r3, [r7, #4]
 80074e0:	237f      	movs	r3, #127	@ 0x7f
 80074e2:	717b      	strb	r3, [r7, #5]
 80074e4:	234a      	movs	r3, #74	@ 0x4a
 80074e6:	71bb      	strb	r3, [r7, #6]
 80074e8:	2398      	movs	r3, #152	@ 0x98
 80074ea:	71fb      	strb	r3, [r7, #7]
 80074ec:	232a      	movs	r3, #42	@ 0x2a
 80074ee:	723b      	strb	r3, [r7, #8]
 80074f0:	2348      	movs	r3, #72	@ 0x48
 80074f2:	727b      	strb	r3, [r7, #9]
 80074f4:	237a      	movs	r3, #122	@ 0x7a
 80074f6:	72bb      	strb	r3, [r7, #10]
 80074f8:	23cc      	movs	r3, #204	@ 0xcc
 80074fa:	72fb      	strb	r3, [r7, #11]
 80074fc:	2340      	movs	r3, #64	@ 0x40
 80074fe:	733b      	strb	r3, [r7, #12]
 8007500:	23fe      	movs	r3, #254	@ 0xfe
 8007502:	737b      	strb	r3, [r7, #13]
 8007504:	2300      	movs	r3, #0
 8007506:	73bb      	strb	r3, [r7, #14]
 8007508:	2300      	movs	r3, #0
 800750a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800750c:	4639      	mov	r1, r7
 800750e:	4b39      	ldr	r3, [pc, #228]	@ (80075f4 <P2PS_STM_Init+0x134>)
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	2306      	movs	r3, #6
 8007514:	2201      	movs	r2, #1
 8007516:	2002      	movs	r0, #2
 8007518:	f7ff fa12 	bl	8006940 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800751c:	2319      	movs	r3, #25
 800751e:	703b      	strb	r3, [r7, #0]
 8007520:	23ed      	movs	r3, #237	@ 0xed
 8007522:	707b      	strb	r3, [r7, #1]
 8007524:	2382      	movs	r3, #130	@ 0x82
 8007526:	70bb      	strb	r3, [r7, #2]
 8007528:	23ae      	movs	r3, #174	@ 0xae
 800752a:	70fb      	strb	r3, [r7, #3]
 800752c:	23ed      	movs	r3, #237	@ 0xed
 800752e:	713b      	strb	r3, [r7, #4]
 8007530:	2321      	movs	r3, #33	@ 0x21
 8007532:	717b      	strb	r3, [r7, #5]
 8007534:	234c      	movs	r3, #76	@ 0x4c
 8007536:	71bb      	strb	r3, [r7, #6]
 8007538:	239d      	movs	r3, #157	@ 0x9d
 800753a:	71fb      	strb	r3, [r7, #7]
 800753c:	2341      	movs	r3, #65	@ 0x41
 800753e:	723b      	strb	r3, [r7, #8]
 8007540:	2345      	movs	r3, #69	@ 0x45
 8007542:	727b      	strb	r3, [r7, #9]
 8007544:	2322      	movs	r3, #34	@ 0x22
 8007546:	72bb      	strb	r3, [r7, #10]
 8007548:	238e      	movs	r3, #142	@ 0x8e
 800754a:	72fb      	strb	r3, [r7, #11]
 800754c:	2341      	movs	r3, #65	@ 0x41
 800754e:	733b      	strb	r3, [r7, #12]
 8007550:	23fe      	movs	r3, #254	@ 0xfe
 8007552:	737b      	strb	r3, [r7, #13]
 8007554:	2300      	movs	r3, #0
 8007556:	73bb      	strb	r3, [r7, #14]
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800755c:	4b25      	ldr	r3, [pc, #148]	@ (80075f4 <P2PS_STM_Init+0x134>)
 800755e:	8818      	ldrh	r0, [r3, #0]
 8007560:	463a      	mov	r2, r7
 8007562:	4b25      	ldr	r3, [pc, #148]	@ (80075f8 <P2PS_STM_Init+0x138>)
 8007564:	9305      	str	r3, [sp, #20]
 8007566:	2301      	movs	r3, #1
 8007568:	9304      	str	r3, [sp, #16]
 800756a:	230a      	movs	r3, #10
 800756c:	9303      	str	r3, [sp, #12]
 800756e:	2301      	movs	r3, #1
 8007570:	9302      	str	r3, [sp, #8]
 8007572:	2300      	movs	r3, #0
 8007574:	9301      	str	r3, [sp, #4]
 8007576:	2306      	movs	r3, #6
 8007578:	9300      	str	r3, [sp, #0]
 800757a:	2302      	movs	r3, #2
 800757c:	2102      	movs	r1, #2
 800757e:	f7ff fab5 	bl	8006aec <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8007582:	2319      	movs	r3, #25
 8007584:	703b      	strb	r3, [r7, #0]
 8007586:	23ed      	movs	r3, #237	@ 0xed
 8007588:	707b      	strb	r3, [r7, #1]
 800758a:	2382      	movs	r3, #130	@ 0x82
 800758c:	70bb      	strb	r3, [r7, #2]
 800758e:	23ae      	movs	r3, #174	@ 0xae
 8007590:	70fb      	strb	r3, [r7, #3]
 8007592:	23ed      	movs	r3, #237	@ 0xed
 8007594:	713b      	strb	r3, [r7, #4]
 8007596:	2321      	movs	r3, #33	@ 0x21
 8007598:	717b      	strb	r3, [r7, #5]
 800759a:	234c      	movs	r3, #76	@ 0x4c
 800759c:	71bb      	strb	r3, [r7, #6]
 800759e:	239d      	movs	r3, #157	@ 0x9d
 80075a0:	71fb      	strb	r3, [r7, #7]
 80075a2:	2341      	movs	r3, #65	@ 0x41
 80075a4:	723b      	strb	r3, [r7, #8]
 80075a6:	2345      	movs	r3, #69	@ 0x45
 80075a8:	727b      	strb	r3, [r7, #9]
 80075aa:	2322      	movs	r3, #34	@ 0x22
 80075ac:	72bb      	strb	r3, [r7, #10]
 80075ae:	238e      	movs	r3, #142	@ 0x8e
 80075b0:	72fb      	strb	r3, [r7, #11]
 80075b2:	2342      	movs	r3, #66	@ 0x42
 80075b4:	733b      	strb	r3, [r7, #12]
 80075b6:	23fe      	movs	r3, #254	@ 0xfe
 80075b8:	737b      	strb	r3, [r7, #13]
 80075ba:	2300      	movs	r3, #0
 80075bc:	73bb      	strb	r3, [r7, #14]
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80075c2:	4b0c      	ldr	r3, [pc, #48]	@ (80075f4 <P2PS_STM_Init+0x134>)
 80075c4:	8818      	ldrh	r0, [r3, #0]
 80075c6:	463a      	mov	r2, r7
 80075c8:	4b0c      	ldr	r3, [pc, #48]	@ (80075fc <P2PS_STM_Init+0x13c>)
 80075ca:	9305      	str	r3, [sp, #20]
 80075cc:	2301      	movs	r3, #1
 80075ce:	9304      	str	r3, [sp, #16]
 80075d0:	230a      	movs	r3, #10
 80075d2:	9303      	str	r3, [sp, #12]
 80075d4:	2301      	movs	r3, #1
 80075d6:	9302      	str	r3, [sp, #8]
 80075d8:	2300      	movs	r3, #0
 80075da:	9301      	str	r3, [sp, #4]
 80075dc:	2310      	movs	r3, #16
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	2302      	movs	r3, #2
 80075e2:	2102      	movs	r1, #2
 80075e4:	f7ff fa82 	bl	8006aec <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 80075e8:	bf00      	nop
}
 80075ea:	3710      	adds	r7, #16
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	080073f9 	.word	0x080073f9
 80075f4:	2000003c 	.word	0x2000003c
 80075f8:	2000003e 	.word	0x2000003e
 80075fc:	20000040 	.word	0x20000040

08007600 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
  return;
 8007604:	bf00      	nop
}
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800760e:	b480      	push	{r7}
 8007610:	af00      	add	r7, sp, #0
  return;
 8007612:	bf00      	nop
}
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  return;
 8007620:	bf00      	nop
}
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800762a:	b480      	push	{r7}
 800762c:	af00      	add	r7, sp, #0
  return;
 800762e:	bf00      	nop
}
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8007638:	b480      	push	{r7}
 800763a:	af00      	add	r7, sp, #0
  return;
 800763c:	bf00      	nop
}
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr

08007646 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8007646:	b480      	push	{r7}
 8007648:	af00      	add	r7, sp, #0
  return;
 800764a:	bf00      	nop
}
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
  return;
 8007658:	bf00      	nop
}
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8007662:	b480      	push	{r7}
 8007664:	af00      	add	r7, sp, #0
  return;
 8007666:	bf00      	nop
}
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
  return;
 8007674:	bf00      	nop
}
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800767e:	b480      	push	{r7}
 8007680:	af00      	add	r7, sp, #0
  return;
 8007682:	bf00      	nop
}
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800768c:	b480      	push	{r7}
 800768e:	af00      	add	r7, sp, #0
  return;
 8007690:	bf00      	nop
}
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800769a:	b480      	push	{r7}
 800769c:	af00      	add	r7, sp, #0
  return;
 800769e:	bf00      	nop
}
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	af00      	add	r7, sp, #0
  return;
 80076ac:	bf00      	nop
}
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr

080076b6 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80076b6:	b480      	push	{r7}
 80076b8:	af00      	add	r7, sp, #0
  return;
 80076ba:	bf00      	nop
}
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80076c4:	b480      	push	{r7}
 80076c6:	af00      	add	r7, sp, #0
  return;
 80076c8:	bf00      	nop
}
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80076d2:	b480      	push	{r7}
 80076d4:	af00      	add	r7, sp, #0
  return;
 80076d6:	bf00      	nop
}
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  return;
 80076e4:	bf00      	nop
}
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
	...

080076f0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 80076f4:	4b04      	ldr	r3, [pc, #16]	@ (8007708 <SVCCTL_Init+0x18>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 80076fa:	4b04      	ldr	r3, [pc, #16]	@ (800770c <SVCCTL_Init+0x1c>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007700:	f000 f806 	bl	8007710 <SVCCTL_SvcInit>

  return;
 8007704:	bf00      	nop
}
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20000044 	.word	0x20000044
 800770c:	20000064 	.word	0x20000064

08007710 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
  BAS_Init();
 8007714:	f7ff ff74 	bl	8007600 <BAS_Init>

  BLS_Init();
 8007718:	f7ff ff79 	bl	800760e <BLS_Init>

  CRS_STM_Init();
 800771c:	f7ff ff7e 	bl	800761c <CRS_STM_Init>

  DIS_Init();
 8007720:	f7ff ff83 	bl	800762a <DIS_Init>

  EDS_STM_Init();
 8007724:	f7ff ff88 	bl	8007638 <EDS_STM_Init>

  HIDS_Init();
 8007728:	f7ff ff8d 	bl	8007646 <HIDS_Init>

  HRS_Init();
 800772c:	f7ff ff92 	bl	8007654 <HRS_Init>

  HTS_Init();
 8007730:	f7ff ff97 	bl	8007662 <HTS_Init>

  IAS_Init();
 8007734:	f7ff ff9c 	bl	8007670 <IAS_Init>

  LLS_Init();
 8007738:	f7ff ffa1 	bl	800767e <LLS_Init>

  TPS_Init();
 800773c:	f7ff ffa6 	bl	800768c <TPS_Init>

  MOTENV_STM_Init();
 8007740:	f7ff ffab 	bl	800769a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007744:	f7ff febc 	bl	80074c0 <P2PS_STM_Init>

  ZDD_STM_Init();
 8007748:	f7ff ffae 	bl	80076a8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800774c:	f7ff ffb3 	bl	80076b6 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007750:	f7ff ffbf 	bl	80076d2 <BVOPUS_STM_Init>

  MESH_Init();
 8007754:	f7ff ffb6 	bl	80076c4 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007758:	f7ff ffc2 	bl	80076e0 <SVCCTL_InitCustomSvc>
  
  return;
 800775c:	bf00      	nop
}
 800775e:	bd80      	pop	{r7, pc}

08007760 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007768:	4b09      	ldr	r3, [pc, #36]	@ (8007790 <SVCCTL_RegisterSvcHandler+0x30>)
 800776a:	7f1b      	ldrb	r3, [r3, #28]
 800776c:	4619      	mov	r1, r3
 800776e:	4a08      	ldr	r2, [pc, #32]	@ (8007790 <SVCCTL_RegisterSvcHandler+0x30>)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007776:	4b06      	ldr	r3, [pc, #24]	@ (8007790 <SVCCTL_RegisterSvcHandler+0x30>)
 8007778:	7f1b      	ldrb	r3, [r3, #28]
 800777a:	3301      	adds	r3, #1
 800777c:	b2da      	uxtb	r2, r3
 800777e:	4b04      	ldr	r3, [pc, #16]	@ (8007790 <SVCCTL_RegisterSvcHandler+0x30>)
 8007780:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007782:	bf00      	nop
}
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	20000044 	.word	0x20000044

08007794 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3301      	adds	r3, #1
 80077a0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80077a2:	2300      	movs	r3, #0
 80077a4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2bff      	cmp	r3, #255	@ 0xff
 80077ac:	d125      	bne.n	80077fa <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	3302      	adds	r3, #2
 80077b2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80077be:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80077c2:	d118      	bne.n	80077f6 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80077c4:	2300      	movs	r3, #0
 80077c6:	757b      	strb	r3, [r7, #21]
 80077c8:	e00d      	b.n	80077e6 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80077ca:	7d7b      	ldrb	r3, [r7, #21]
 80077cc:	4a1a      	ldr	r2, [pc, #104]	@ (8007838 <SVCCTL_UserEvtRx+0xa4>)
 80077ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80077da:	7dfb      	ldrb	r3, [r7, #23]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d108      	bne.n	80077f2 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80077e0:	7d7b      	ldrb	r3, [r7, #21]
 80077e2:	3301      	adds	r3, #1
 80077e4:	757b      	strb	r3, [r7, #21]
 80077e6:	4b14      	ldr	r3, [pc, #80]	@ (8007838 <SVCCTL_UserEvtRx+0xa4>)
 80077e8:	7f1b      	ldrb	r3, [r3, #28]
 80077ea:	7d7a      	ldrb	r2, [r7, #21]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d3ec      	bcc.n	80077ca <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80077f0:	e002      	b.n	80077f8 <SVCCTL_UserEvtRx+0x64>
              break;
 80077f2:	bf00      	nop
          break;
 80077f4:	e000      	b.n	80077f8 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80077f6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80077f8:	e000      	b.n	80077fc <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80077fa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80077fc:	7dfb      	ldrb	r3, [r7, #23]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d00f      	beq.n	8007822 <SVCCTL_UserEvtRx+0x8e>
 8007802:	2b02      	cmp	r3, #2
 8007804:	dc10      	bgt.n	8007828 <SVCCTL_UserEvtRx+0x94>
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <SVCCTL_UserEvtRx+0x7c>
 800780a:	2b01      	cmp	r3, #1
 800780c:	d006      	beq.n	800781c <SVCCTL_UserEvtRx+0x88>
 800780e:	e00b      	b.n	8007828 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f000 ffd9 	bl	80087c8 <SVCCTL_App_Notification>
 8007816:	4603      	mov	r3, r0
 8007818:	75bb      	strb	r3, [r7, #22]
      break;
 800781a:	e008      	b.n	800782e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800781c:	2301      	movs	r3, #1
 800781e:	75bb      	strb	r3, [r7, #22]
      break;
 8007820:	e005      	b.n	800782e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007822:	2300      	movs	r3, #0
 8007824:	75bb      	strb	r3, [r7, #22]
      break;
 8007826:	e002      	b.n	800782e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007828:	2301      	movs	r3, #1
 800782a:	75bb      	strb	r3, [r7, #22]
      break;
 800782c:	bf00      	nop
  }

  return (return_status);
 800782e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3718      	adds	r7, #24
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	20000044 	.word	0x20000044

0800783c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	212e      	movs	r1, #46	@ 0x2e
 8007854:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8007858:	f000 fb16 	bl	8007e88 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	330b      	adds	r3, #11
 8007860:	78db      	ldrb	r3, [r3, #3]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b088      	sub	sp, #32
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8007872:	f107 030c 	add.w	r3, r7, #12
 8007876:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	210f      	movs	r1, #15
 8007882:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8007886:	f000 faff 	bl	8007e88 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	330b      	adds	r3, #11
 800788e:	78db      	ldrb	r3, [r3, #3]
}
 8007890:	4618      	mov	r0, r3
 8007892:	3720      	adds	r7, #32
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <SHCI_C2_ExtpaConfig>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ExtpaConfig(uint32_t gpio_port, uint16_t gpio_pin_number, uint8_t gpio_polarity, uint8_t gpio_status)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b088      	sub	sp, #32
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	4608      	mov	r0, r1
 80078a2:	4611      	mov	r1, r2
 80078a4:	461a      	mov	r2, r3
 80078a6:	4603      	mov	r3, r0
 80078a8:	807b      	strh	r3, [r7, #2]
 80078aa:	460b      	mov	r3, r1
 80078ac:	707b      	strb	r3, [r7, #1]
 80078ae:	4613      	mov	r3, r2
 80078b0:	703b      	strb	r3, [r7, #0]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80078b2:	f107 030c 	add.w	r3, r7, #12
 80078b6:	61fb      	str	r3, [r7, #28]

  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_port = gpio_port;
 80078b8:	f107 030c 	add.w	r3, r7, #12
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	601a      	str	r2, [r3, #0]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_pin_number = gpio_pin_number;
 80078c0:	f107 030c 	add.w	r3, r7, #12
 80078c4:	887a      	ldrh	r2, [r7, #2]
 80078c6:	809a      	strh	r2, [r3, #4]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_polarity = gpio_polarity;
 80078c8:	f107 030c 	add.w	r3, r7, #12
 80078cc:	787a      	ldrb	r2, [r7, #1]
 80078ce:	719a      	strb	r2, [r3, #6]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_status = gpio_status;
 80078d0:	f107 030c 	add.w	r3, r7, #12
 80078d4:	783a      	ldrb	r2, [r7, #0]
 80078d6:	71da      	strb	r2, [r3, #7]

  shci_send( SHCI_OPCODE_C2_EXTPA_CONFIG,
 80078d8:	f107 020c 	add.w	r2, r7, #12
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2108      	movs	r1, #8
 80078e0:	f64f 4072 	movw	r0, #64626	@ 0xfc72
 80078e4:	f000 fad0 	bl	8007e88 <shci_send>
             8,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80078e8:	69fb      	ldr	r3, [r7, #28]
 80078ea:	330b      	adds	r3, #11
 80078ec:	78db      	ldrb	r3, [r3, #3]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3720      	adds	r7, #32
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b088      	sub	sp, #32
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80078fe:	f107 030c 	add.w	r3, r7, #12
 8007902:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	2110      	movs	r1, #16
 800790a:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800790e:	f000 fabb 	bl	8007e88 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	330b      	adds	r3, #11
 8007916:	78db      	ldrb	r3, [r3, #3]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3720      	adds	r7, #32
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8007920:	b480      	push	{r7}
 8007922:	b08b      	sub	sp, #44	@ 0x2c
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8007938:	2300      	movs	r3, #0
 800793a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800793c:	2300      	movs	r3, #0
 800793e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8007940:	2300      	movs	r3, #0
 8007942:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8007948:	4b4a      	ldr	r3, [pc, #296]	@ (8007a74 <SHCI_GetWirelessFwInfo+0x154>)
 800794a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800794c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007950:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800795a:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a44      	ldr	r2, [pc, #272]	@ (8007a78 <SHCI_GetWirelessFwInfo+0x158>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d10f      	bne.n	800798c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	695b      	ldr	r3, [r3, #20]
 8007970:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	69db      	ldr	r3, [r3, #28]
 800797c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	617b      	str	r3, [r7, #20]
 800798a:	e01a      	b.n	80079c2 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8007994:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8007998:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80079c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c4:	0e1b      	lsrs	r3, r3, #24
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80079cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ce:	0c1b      	lsrs	r3, r3, #16
 80079d0:	b2da      	uxtb	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80079d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d8:	0a1b      	lsrs	r3, r3, #8
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	091b      	lsrs	r3, r3, #4
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	f003 030f 	and.w	r3, r3, #15
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80079f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	b2da      	uxtb	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	0e1b      	lsrs	r3, r3, #24
 8007a02:	b2da      	uxtb	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	0c1b      	lsrs	r3, r3, #16
 8007a0c:	b2da      	uxtb	r2, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8007a12:	6a3b      	ldr	r3, [r7, #32]
 8007a14:	0a1b      	lsrs	r3, r3, #8
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007a1c:	6a3b      	ldr	r3, [r7, #32]
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	0e1b      	lsrs	r3, r3, #24
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8007a36:	69bb      	ldr	r3, [r7, #24]
 8007a38:	0c1b      	lsrs	r3, r3, #16
 8007a3a:	b2da      	uxtb	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	0a1b      	lsrs	r3, r3, #8
 8007a44:	b2da      	uxtb	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	0e1b      	lsrs	r3, r3, #24
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	0c1b      	lsrs	r3, r3, #16
 8007a58:	b2da      	uxtb	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	372c      	adds	r7, #44	@ 0x2c
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	58004000 	.word	0x58004000
 8007a78:	a94656b9 	.word	0xa94656b9

08007a7c <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	4a08      	ldr	r2, [pc, #32]	@ (8007aac <hci_init+0x30>)
 8007a8c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8007a8e:	4a08      	ldr	r2, [pc, #32]	@ (8007ab0 <hci_init+0x34>)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8007a94:	4806      	ldr	r0, [pc, #24]	@ (8007ab0 <hci_init+0x34>)
 8007a96:	f000 f979 	bl	8007d8c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 f8da 	bl	8007c58 <TlInit>

  return;
 8007aa4:	bf00      	nop
}
 8007aa6:	3708      	adds	r7, #8
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	2000031c 	.word	0x2000031c
 8007ab0:	200002f4 	.word	0x200002f4

08007ab4 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007aba:	4822      	ldr	r0, [pc, #136]	@ (8007b44 <hci_user_evt_proc+0x90>)
 8007abc:	f000 fd32 	bl	8008524 <LST_is_empty>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d12b      	bne.n	8007b1e <hci_user_evt_proc+0x6a>
 8007ac6:	4b20      	ldr	r3, [pc, #128]	@ (8007b48 <hci_user_evt_proc+0x94>)
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d027      	beq.n	8007b1e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007ace:	f107 030c 	add.w	r3, r7, #12
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	481b      	ldr	r0, [pc, #108]	@ (8007b44 <hci_user_evt_proc+0x90>)
 8007ad6:	f000 fdb4 	bl	8008642 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8007ada:	4b1c      	ldr	r3, [pc, #112]	@ (8007b4c <hci_user_evt_proc+0x98>)
 8007adc:	69db      	ldr	r3, [r3, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00c      	beq.n	8007afc <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007aea:	4b18      	ldr	r3, [pc, #96]	@ (8007b4c <hci_user_evt_proc+0x98>)
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	1d3a      	adds	r2, r7, #4
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8007af4:	793a      	ldrb	r2, [r7, #4]
 8007af6:	4b14      	ldr	r3, [pc, #80]	@ (8007b48 <hci_user_evt_proc+0x94>)
 8007af8:	701a      	strb	r2, [r3, #0]
 8007afa:	e002      	b.n	8007b02 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007afc:	4b12      	ldr	r3, [pc, #72]	@ (8007b48 <hci_user_evt_proc+0x94>)
 8007afe:	2201      	movs	r2, #1
 8007b00:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8007b02:	4b11      	ldr	r3, [pc, #68]	@ (8007b48 <hci_user_evt_proc+0x94>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d004      	beq.n	8007b14 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 fc0d 	bl	800832c <TL_MM_EvtDone>
 8007b12:	e004      	b.n	8007b1e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4619      	mov	r1, r3
 8007b18:	480a      	ldr	r0, [pc, #40]	@ (8007b44 <hci_user_evt_proc+0x90>)
 8007b1a:	f000 fd25 	bl	8008568 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8007b1e:	4809      	ldr	r0, [pc, #36]	@ (8007b44 <hci_user_evt_proc+0x90>)
 8007b20:	f000 fd00 	bl	8008524 <LST_is_empty>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d107      	bne.n	8007b3a <hci_user_evt_proc+0x86>
 8007b2a:	4b07      	ldr	r3, [pc, #28]	@ (8007b48 <hci_user_evt_proc+0x94>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007b32:	4804      	ldr	r0, [pc, #16]	@ (8007b44 <hci_user_evt_proc+0x90>)
 8007b34:	f001 f8b5 	bl	8008ca2 <hci_notify_asynch_evt>
  }


  return;
 8007b38:	bf00      	nop
 8007b3a:	bf00      	nop
}
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	2000006c 	.word	0x2000006c
 8007b48:	20000078 	.word	0x20000078
 8007b4c:	200002f4 	.word	0x200002f4

08007b50 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8007b5c:	2000      	movs	r0, #0
 8007b5e:	f000 f8d1 	bl	8007d04 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8007b62:	2300      	movs	r3, #0
 8007b64:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	b21b      	sxth	r3, r3
 8007b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b70:	b21a      	sxth	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	029b      	lsls	r3, r3, #10
 8007b78:	b21b      	sxth	r3, r3
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	b21b      	sxth	r3, r3
 8007b7e:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8007b80:	4b33      	ldr	r3, [pc, #204]	@ (8007c50 <hci_send_req+0x100>)
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	b2d9      	uxtb	r1, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	8bbb      	ldrh	r3, [r7, #28]
 8007b92:	4618      	mov	r0, r3
 8007b94:	f000 f890 	bl	8007cb8 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8007b98:	e04e      	b.n	8007c38 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007b9a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007b9e:	f001 f897 	bl	8008cd0 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007ba2:	e043      	b.n	8007c2c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8007ba4:	f107 030c 	add.w	r3, r7, #12
 8007ba8:	4619      	mov	r1, r3
 8007baa:	482a      	ldr	r0, [pc, #168]	@ (8007c54 <hci_send_req+0x104>)
 8007bac:	f000 fd49 	bl	8008642 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	7a5b      	ldrb	r3, [r3, #9]
 8007bb4:	2b0f      	cmp	r3, #15
 8007bb6:	d114      	bne.n	8007be2 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	330b      	adds	r3, #11
 8007bbc:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	885b      	ldrh	r3, [r3, #2]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	8bba      	ldrh	r2, [r7, #28]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d104      	bne.n	8007bd4 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	691b      	ldr	r3, [r3, #16]
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	7812      	ldrb	r2, [r2, #0]
 8007bd2:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	785b      	ldrb	r3, [r3, #1]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d027      	beq.n	8007c2c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e024      	b.n	8007c2c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	330b      	adds	r3, #11
 8007be6:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	8bba      	ldrh	r2, [r7, #28]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d114      	bne.n	8007c20 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	7a9b      	ldrb	r3, [r3, #10]
 8007bfa:	3b03      	subs	r3, #3
 8007bfc:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695a      	ldr	r2, [r3, #20]
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	bfa8      	it	ge
 8007c08:	461a      	movge	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6918      	ldr	r0, [r3, #16]
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	1cd9      	adds	r1, r3, #3
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	f001 fe06 	bl	800982c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8007c2c:	4809      	ldr	r0, [pc, #36]	@ (8007c54 <hci_send_req+0x104>)
 8007c2e:	f000 fc79 	bl	8008524 <LST_is_empty>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d0b5      	beq.n	8007ba4 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8007c38:	7ffb      	ldrb	r3, [r7, #31]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0ad      	beq.n	8007b9a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007c3e:	2001      	movs	r0, #1
 8007c40:	f000 f860 	bl	8007d04 <NotifyCmdStatus>

  return 0;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3720      	adds	r7, #32
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000320 	.word	0x20000320
 8007c54:	20000314 	.word	0x20000314

08007c58 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8007c60:	480f      	ldr	r0, [pc, #60]	@ (8007ca0 <TlInit+0x48>)
 8007c62:	f000 fc4f 	bl	8008504 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8007c66:	4a0f      	ldr	r2, [pc, #60]	@ (8007ca4 <TlInit+0x4c>)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8007c6c:	480e      	ldr	r0, [pc, #56]	@ (8007ca8 <TlInit+0x50>)
 8007c6e:	f000 fc49 	bl	8008504 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007c72:	4b0e      	ldr	r3, [pc, #56]	@ (8007cac <TlInit+0x54>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8007c78:	4b0d      	ldr	r3, [pc, #52]	@ (8007cb0 <TlInit+0x58>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8007c84:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb4 <TlInit+0x5c>)
 8007c86:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8007c88:	4b09      	ldr	r3, [pc, #36]	@ (8007cb0 <TlInit+0x58>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f107 0208 	add.w	r2, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
  }

  return;
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop
}
 8007c98:	3718      	adds	r7, #24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000314 	.word	0x20000314
 8007ca4:	20000074 	.word	0x20000074
 8007ca8:	2000006c 	.word	0x2000006c
 8007cac:	20000078 	.word	0x20000078
 8007cb0:	200002f4 	.word	0x200002f4
 8007cb4:	08007d45 	.word	0x08007d45

08007cb8 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	603a      	str	r2, [r7, #0]
 8007cc2:	80fb      	strh	r3, [r7, #6]
 8007cc4:	460b      	mov	r3, r1
 8007cc6:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8007cfc <SendCmd+0x44>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	88fa      	ldrh	r2, [r7, #6]
 8007cce:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8007cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007cfc <SendCmd+0x44>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	797a      	ldrb	r2, [r7, #5]
 8007cd8:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8007cda:	4b08      	ldr	r3, [pc, #32]	@ (8007cfc <SendCmd+0x44>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	330c      	adds	r3, #12
 8007ce0:	797a      	ldrb	r2, [r7, #5]
 8007ce2:	6839      	ldr	r1, [r7, #0]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f001 fda1 	bl	800982c <memcpy>

  hciContext.io.Send(0,0);
 8007cea:	4b05      	ldr	r3, [pc, #20]	@ (8007d00 <SendCmd+0x48>)
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2100      	movs	r1, #0
 8007cf0:	2000      	movs	r0, #0
 8007cf2:	4798      	blx	r3

  return;
 8007cf4:	bf00      	nop
}
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000074 	.word	0x20000074
 8007d00:	200002f4 	.word	0x200002f4

08007d04 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8007d0e:	79fb      	ldrb	r3, [r7, #7]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d108      	bne.n	8007d26 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8007d14:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <NotifyCmdStatus+0x3c>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007d1c:	4b08      	ldr	r3, [pc, #32]	@ (8007d40 <NotifyCmdStatus+0x3c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2000      	movs	r0, #0
 8007d22:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8007d24:	e008      	b.n	8007d38 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8007d26:	4b06      	ldr	r3, [pc, #24]	@ (8007d40 <NotifyCmdStatus+0x3c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007d2e:	4b04      	ldr	r3, [pc, #16]	@ (8007d40 <NotifyCmdStatus+0x3c>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2001      	movs	r0, #1
 8007d34:	4798      	blx	r3
  return;
 8007d36:	bf00      	nop
 8007d38:	bf00      	nop
}
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	2000031c 	.word	0x2000031c

08007d44 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	7a5b      	ldrb	r3, [r3, #9]
 8007d50:	2b0f      	cmp	r3, #15
 8007d52:	d003      	beq.n	8007d5c <TlEvtReceived+0x18>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	7a5b      	ldrb	r3, [r3, #9]
 8007d58:	2b0e      	cmp	r3, #14
 8007d5a:	d107      	bne.n	8007d6c <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8007d5c:	6879      	ldr	r1, [r7, #4]
 8007d5e:	4809      	ldr	r0, [pc, #36]	@ (8007d84 <TlEvtReceived+0x40>)
 8007d60:	f000 fc28 	bl	80085b4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007d64:	2000      	movs	r0, #0
 8007d66:	f000 ffa8 	bl	8008cba <hci_cmd_resp_release>
 8007d6a:	e006      	b.n	8007d7a <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8007d6c:	6879      	ldr	r1, [r7, #4]
 8007d6e:	4806      	ldr	r0, [pc, #24]	@ (8007d88 <TlEvtReceived+0x44>)
 8007d70:	f000 fc20 	bl	80085b4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007d74:	4804      	ldr	r0, [pc, #16]	@ (8007d88 <TlEvtReceived+0x44>)
 8007d76:	f000 ff94 	bl	8008ca2 <hci_notify_asynch_evt>
  }

  return;
 8007d7a:	bf00      	nop
}
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20000314 	.word	0x20000314
 8007d88:	2000006c 	.word	0x2000006c

08007d8c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4a05      	ldr	r2, [pc, #20]	@ (8007dac <hci_register_io_bus+0x20>)
 8007d98:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a04      	ldr	r2, [pc, #16]	@ (8007db0 <hci_register_io_bus+0x24>)
 8007d9e:	611a      	str	r2, [r3, #16]

  return;
 8007da0:	bf00      	nop
}
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	080080a5 	.word	0x080080a5
 8007db0:	0800810d 	.word	0x0800810d

08007db4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	4a08      	ldr	r2, [pc, #32]	@ (8007de4 <shci_init+0x30>)
 8007dc4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8007dc6:	4a08      	ldr	r2, [pc, #32]	@ (8007de8 <shci_init+0x34>)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8007dcc:	4806      	ldr	r0, [pc, #24]	@ (8007de8 <shci_init+0x34>)
 8007dce:	f000 f915 	bl	8007ffc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f000 f898 	bl	8007f0c <TlInit>

  return;
 8007ddc:	bf00      	nop
}
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000344 	.word	0x20000344
 8007de8:	20000324 	.word	0x20000324

08007dec <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007df2:	4822      	ldr	r0, [pc, #136]	@ (8007e7c <shci_user_evt_proc+0x90>)
 8007df4:	f000 fb96 	bl	8008524 <LST_is_empty>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d12b      	bne.n	8007e56 <shci_user_evt_proc+0x6a>
 8007dfe:	4b20      	ldr	r3, [pc, #128]	@ (8007e80 <shci_user_evt_proc+0x94>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d027      	beq.n	8007e56 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8007e06:	f107 030c 	add.w	r3, r7, #12
 8007e0a:	4619      	mov	r1, r3
 8007e0c:	481b      	ldr	r0, [pc, #108]	@ (8007e7c <shci_user_evt_proc+0x90>)
 8007e0e:	f000 fc18 	bl	8008642 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8007e12:	4b1c      	ldr	r3, [pc, #112]	@ (8007e84 <shci_user_evt_proc+0x98>)
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00c      	beq.n	8007e34 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8007e22:	4b18      	ldr	r3, [pc, #96]	@ (8007e84 <shci_user_evt_proc+0x98>)
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	1d3a      	adds	r2, r7, #4
 8007e28:	4610      	mov	r0, r2
 8007e2a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007e2c:	793a      	ldrb	r2, [r7, #4]
 8007e2e:	4b14      	ldr	r3, [pc, #80]	@ (8007e80 <shci_user_evt_proc+0x94>)
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e002      	b.n	8007e3a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007e34:	4b12      	ldr	r3, [pc, #72]	@ (8007e80 <shci_user_evt_proc+0x94>)
 8007e36:	2201      	movs	r2, #1
 8007e38:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8007e3a:	4b11      	ldr	r3, [pc, #68]	@ (8007e80 <shci_user_evt_proc+0x94>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d004      	beq.n	8007e4c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fa71 	bl	800832c <TL_MM_EvtDone>
 8007e4a:	e004      	b.n	8007e56 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	480a      	ldr	r0, [pc, #40]	@ (8007e7c <shci_user_evt_proc+0x90>)
 8007e52:	f000 fb89 	bl	8008568 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8007e56:	4809      	ldr	r0, [pc, #36]	@ (8007e7c <shci_user_evt_proc+0x90>)
 8007e58:	f000 fb64 	bl	8008524 <LST_is_empty>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d107      	bne.n	8007e72 <shci_user_evt_proc+0x86>
 8007e62:	4b07      	ldr	r3, [pc, #28]	@ (8007e80 <shci_user_evt_proc+0x94>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8007e6a:	4804      	ldr	r0, [pc, #16]	@ (8007e7c <shci_user_evt_proc+0x90>)
 8007e6c:	f7f8 fbe0 	bl	8000630 <shci_notify_asynch_evt>
  }


  return;
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
}
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	2000007c 	.word	0x2000007c
 8007e80:	2000008c 	.word	0x2000008c
 8007e84:	20000324 	.word	0x20000324

08007e88 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60ba      	str	r2, [r7, #8]
 8007e90:	607b      	str	r3, [r7, #4]
 8007e92:	4603      	mov	r3, r0
 8007e94:	81fb      	strh	r3, [r7, #14]
 8007e96:	460b      	mov	r3, r1
 8007e98:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f000 f868 	bl	8007f70 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8007ea0:	4b17      	ldr	r3, [pc, #92]	@ (8007f00 <shci_send+0x78>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	89fa      	ldrh	r2, [r7, #14]
 8007ea6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8007eaa:	4b15      	ldr	r3, [pc, #84]	@ (8007f00 <shci_send+0x78>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	7b7a      	ldrb	r2, [r7, #13]
 8007eb0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8007eb2:	4b13      	ldr	r3, [pc, #76]	@ (8007f00 <shci_send+0x78>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	330c      	adds	r3, #12
 8007eb8:	7b7a      	ldrb	r2, [r7, #13]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f001 fcb5 	bl	800982c <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8007ec2:	4b10      	ldr	r3, [pc, #64]	@ (8007f04 <shci_send+0x7c>)
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8007ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f08 <shci_send+0x80>)
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	2100      	movs	r1, #0
 8007ece:	2000      	movs	r0, #0
 8007ed0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8007ed2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8007ed6:	f7f8 fbc2 	bl	800065e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f103 0008 	add.w	r0, r3, #8
 8007ee0:	4b07      	ldr	r3, [pc, #28]	@ (8007f00 <shci_send+0x78>)
 8007ee2:	6819      	ldr	r1, [r3, #0]
 8007ee4:	4b06      	ldr	r3, [pc, #24]	@ (8007f00 <shci_send+0x78>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	789b      	ldrb	r3, [r3, #2]
 8007eea:	3303      	adds	r3, #3
 8007eec:	461a      	mov	r2, r3
 8007eee:	f001 fc9d 	bl	800982c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007ef2:	2001      	movs	r0, #1
 8007ef4:	f000 f83c 	bl	8007f70 <Cmd_SetStatus>

  return;
 8007ef8:	bf00      	nop
}
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	20000088 	.word	0x20000088
 8007f04:	20000348 	.word	0x20000348
 8007f08:	20000324 	.word	0x20000324

08007f0c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b086      	sub	sp, #24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8007f14:	4a10      	ldr	r2, [pc, #64]	@ (8007f58 <TlInit+0x4c>)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8007f1a:	4810      	ldr	r0, [pc, #64]	@ (8007f5c <TlInit+0x50>)
 8007f1c:	f000 faf2 	bl	8008504 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8007f20:	2001      	movs	r0, #1
 8007f22:	f000 f825 	bl	8007f70 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007f26:	4b0e      	ldr	r3, [pc, #56]	@ (8007f60 <TlInit+0x54>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8007f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f64 <TlInit+0x58>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d00c      	beq.n	8007f4e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8007f38:	4b0b      	ldr	r3, [pc, #44]	@ (8007f68 <TlInit+0x5c>)
 8007f3a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f6c <TlInit+0x60>)
 8007f3e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8007f40:	4b08      	ldr	r3, [pc, #32]	@ (8007f64 <TlInit+0x58>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f107 020c 	add.w	r2, r7, #12
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4798      	blx	r3
  }

  return;
 8007f4c:	bf00      	nop
 8007f4e:	bf00      	nop
}
 8007f50:	3718      	adds	r7, #24
 8007f52:	46bd      	mov	sp, r7
 8007f54:	bd80      	pop	{r7, pc}
 8007f56:	bf00      	nop
 8007f58:	20000088 	.word	0x20000088
 8007f5c:	2000007c 	.word	0x2000007c
 8007f60:	2000008c 	.word	0x2000008c
 8007f64:	20000324 	.word	0x20000324
 8007f68:	08007fc1 	.word	0x08007fc1
 8007f6c:	08007fd9 	.word	0x08007fd9

08007f70 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10b      	bne.n	8007f98 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8007f80:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb8 <Cmd_SetStatus+0x48>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8007f88:	4b0b      	ldr	r3, [pc, #44]	@ (8007fb8 <Cmd_SetStatus+0x48>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8007f90:	4b0a      	ldr	r3, [pc, #40]	@ (8007fbc <Cmd_SetStatus+0x4c>)
 8007f92:	2200      	movs	r2, #0
 8007f94:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8007f96:	e00b      	b.n	8007fb0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8007f98:	4b08      	ldr	r3, [pc, #32]	@ (8007fbc <Cmd_SetStatus+0x4c>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8007f9e:	4b06      	ldr	r3, [pc, #24]	@ (8007fb8 <Cmd_SetStatus+0x48>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d004      	beq.n	8007fb0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8007fa6:	4b04      	ldr	r3, [pc, #16]	@ (8007fb8 <Cmd_SetStatus+0x48>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2001      	movs	r0, #1
 8007fac:	4798      	blx	r3
  return;
 8007fae:	bf00      	nop
 8007fb0:	bf00      	nop
}
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	20000344 	.word	0x20000344
 8007fbc:	20000084 	.word	0x20000084

08007fc0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b082      	sub	sp, #8
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f7f8 fb3d 	bl	8000648 <shci_cmd_resp_release>

  return;
 8007fce:	bf00      	nop
}
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8007fe0:	6879      	ldr	r1, [r7, #4]
 8007fe2:	4805      	ldr	r0, [pc, #20]	@ (8007ff8 <TlUserEvtReceived+0x20>)
 8007fe4:	f000 fae6 	bl	80085b4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007fe8:	4803      	ldr	r0, [pc, #12]	@ (8007ff8 <TlUserEvtReceived+0x20>)
 8007fea:	f7f8 fb21 	bl	8000630 <shci_notify_asynch_evt>

  return;
 8007fee:	bf00      	nop
}
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	2000007c 	.word	0x2000007c

08007ffc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a05      	ldr	r2, [pc, #20]	@ (800801c <shci_register_io_bus+0x20>)
 8008008:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a04      	ldr	r2, [pc, #16]	@ (8008020 <shci_register_io_bus+0x24>)
 800800e:	611a      	str	r2, [r3, #16]

  return;
 8008010:	bf00      	nop
}
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr
 800801c:	080081b9 	.word	0x080081b9
 8008020:	0800820d 	.word	0x0800820d

08008024 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8008024:	b580      	push	{r7, lr}
 8008026:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8008028:	f001 f850 	bl	80090cc <HW_IPCC_Enable>

  return;
 800802c:	bf00      	nop
}
 800802e:	bd80      	pop	{r7, pc}

08008030 <TL_Init>:


void TL_Init( void )
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8008034:	4b10      	ldr	r3, [pc, #64]	@ (8008078 <TL_Init+0x48>)
 8008036:	4a11      	ldr	r2, [pc, #68]	@ (800807c <TL_Init+0x4c>)
 8008038:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800803a:	4b0f      	ldr	r3, [pc, #60]	@ (8008078 <TL_Init+0x48>)
 800803c:	4a10      	ldr	r2, [pc, #64]	@ (8008080 <TL_Init+0x50>)
 800803e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8008040:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <TL_Init+0x48>)
 8008042:	4a10      	ldr	r2, [pc, #64]	@ (8008084 <TL_Init+0x54>)
 8008044:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8008046:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <TL_Init+0x48>)
 8008048:	4a0f      	ldr	r2, [pc, #60]	@ (8008088 <TL_Init+0x58>)
 800804a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800804c:	4b0a      	ldr	r3, [pc, #40]	@ (8008078 <TL_Init+0x48>)
 800804e:	4a0f      	ldr	r2, [pc, #60]	@ (800808c <TL_Init+0x5c>)
 8008050:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8008052:	4b09      	ldr	r3, [pc, #36]	@ (8008078 <TL_Init+0x48>)
 8008054:	4a0e      	ldr	r2, [pc, #56]	@ (8008090 <TL_Init+0x60>)
 8008056:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008058:	4b07      	ldr	r3, [pc, #28]	@ (8008078 <TL_Init+0x48>)
 800805a:	4a0e      	ldr	r2, [pc, #56]	@ (8008094 <TL_Init+0x64>)
 800805c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800805e:	4b06      	ldr	r3, [pc, #24]	@ (8008078 <TL_Init+0x48>)
 8008060:	4a0d      	ldr	r2, [pc, #52]	@ (8008098 <TL_Init+0x68>)
 8008062:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008064:	4b04      	ldr	r3, [pc, #16]	@ (8008078 <TL_Init+0x48>)
 8008066:	4a0d      	ldr	r2, [pc, #52]	@ (800809c <TL_Init+0x6c>)
 8008068:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800806a:	4b03      	ldr	r3, [pc, #12]	@ (8008078 <TL_Init+0x48>)
 800806c:	4a0c      	ldr	r2, [pc, #48]	@ (80080a0 <TL_Init+0x70>)
 800806e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8008070:	f001 f840 	bl	80090f4 <HW_IPCC_Init>

  return;
 8008074:	bf00      	nop
}
 8008076:	bd80      	pop	{r7, pc}
 8008078:	20030000 	.word	0x20030000
 800807c:	20030028 	.word	0x20030028
 8008080:	20030048 	.word	0x20030048
 8008084:	20030058 	.word	0x20030058
 8008088:	20030068 	.word	0x20030068
 800808c:	20030070 	.word	0x20030070
 8008090:	20030078 	.word	0x20030078
 8008094:	20030080 	.word	0x20030080
 8008098:	2003009c 	.word	0x2003009c
 800809c:	200300a0 	.word	0x200300a0
 80080a0:	200300ac 	.word	0x200300ac

080080a4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80080b0:	4811      	ldr	r0, [pc, #68]	@ (80080f8 <TL_BLE_Init+0x54>)
 80080b2:	f000 fa27 	bl	8008504 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80080b6:	4b11      	ldr	r3, [pc, #68]	@ (80080fc <TL_BLE_Init+0x58>)
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	689a      	ldr	r2, [r3, #8]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	68da      	ldr	r2, [r3, #12]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4a0c      	ldr	r2, [pc, #48]	@ (8008100 <TL_BLE_Init+0x5c>)
 80080d0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	4a08      	ldr	r2, [pc, #32]	@ (80080f8 <TL_BLE_Init+0x54>)
 80080d6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80080d8:	f001 f822 	bl	8009120 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a08      	ldr	r2, [pc, #32]	@ (8008104 <TL_BLE_Init+0x60>)
 80080e2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	4a07      	ldr	r2, [pc, #28]	@ (8008108 <TL_BLE_Init+0x64>)
 80080ea:	6013      	str	r3, [r2, #0]

  return 0;
 80080ec:	2300      	movs	r3, #0
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	200300c8 	.word	0x200300c8
 80080fc:	20030000 	.word	0x20030000
 8008100:	20030a58 	.word	0x20030a58
 8008104:	20000354 	.word	0x20000354
 8008108:	20000358 	.word	0x20000358

0800810c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8008118:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <TL_BLE_SendCmd+0x34>)
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2201      	movs	r2, #1
 8008120:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8008122:	4b07      	ldr	r3, [pc, #28]	@ (8008140 <TL_BLE_SendCmd+0x34>)
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4619      	mov	r1, r3
 800812a:	2001      	movs	r0, #1
 800812c:	f000 f96c 	bl	8008408 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8008130:	f001 f800 	bl	8009134 <HW_IPCC_BLE_SendCmd>

  return 0;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3708      	adds	r7, #8
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	20030000 	.word	0x20030000

08008144 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800814a:	e01c      	b.n	8008186 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800814c:	1d3b      	adds	r3, r7, #4
 800814e:	4619      	mov	r1, r3
 8008150:	4812      	ldr	r0, [pc, #72]	@ (800819c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008152:	f000 fa76 	bl	8008642 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	7a5b      	ldrb	r3, [r3, #9]
 800815a:	2b0f      	cmp	r3, #15
 800815c:	d003      	beq.n	8008166 <HW_IPCC_BLE_RxEvtNot+0x22>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	7a5b      	ldrb	r3, [r3, #9]
 8008162:	2b0e      	cmp	r3, #14
 8008164:	d105      	bne.n	8008172 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4619      	mov	r1, r3
 800816a:	2002      	movs	r0, #2
 800816c:	f000 f94c 	bl	8008408 <OutputDbgTrace>
 8008170:	e004      	b.n	800817c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4619      	mov	r1, r3
 8008176:	2003      	movs	r0, #3
 8008178:	f000 f946 	bl	8008408 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800817c:	4b08      	ldr	r3, [pc, #32]	@ (80081a0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	4610      	mov	r0, r2
 8008184:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8008186:	4805      	ldr	r0, [pc, #20]	@ (800819c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8008188:	f000 f9cc 	bl	8008524 <LST_is_empty>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0dc      	beq.n	800814c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8008192:	bf00      	nop
}
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	200300c8 	.word	0x200300c8
 80081a0:	20000354 	.word	0x20000354

080081a4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80081a8:	4b02      	ldr	r3, [pc, #8]	@ (80081b4 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4798      	blx	r3

  return;
 80081ae:	bf00      	nop
}
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	20000358 	.word	0x20000358

080081b8 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80081c4:	480d      	ldr	r0, [pc, #52]	@ (80081fc <TL_SYS_Init+0x44>)
 80081c6:	f000 f99d 	bl	8008504 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80081ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008200 <TL_SYS_Init+0x48>)
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	689a      	ldr	r2, [r3, #8]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4a08      	ldr	r2, [pc, #32]	@ (80081fc <TL_SYS_Init+0x44>)
 80081dc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80081de:	f000 ffcb 	bl	8009178 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a07      	ldr	r2, [pc, #28]	@ (8008204 <TL_SYS_Init+0x4c>)
 80081e8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	4a06      	ldr	r2, [pc, #24]	@ (8008208 <TL_SYS_Init+0x50>)
 80081f0:	6013      	str	r3, [r2, #0]

  return 0;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	200300d0 	.word	0x200300d0
 8008200:	20030000 	.word	0x20030000
 8008204:	2000035c 	.word	0x2000035c
 8008208:	20000360 	.word	0x20000360

0800820c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8008218:	4b09      	ldr	r3, [pc, #36]	@ (8008240 <TL_SYS_SendCmd+0x34>)
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	2210      	movs	r2, #16
 8008220:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8008222:	4b07      	ldr	r3, [pc, #28]	@ (8008240 <TL_SYS_SendCmd+0x34>)
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4619      	mov	r1, r3
 800822a:	2004      	movs	r0, #4
 800822c:	f000 f8ec 	bl	8008408 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8008230:	f000 ffac 	bl	800918c <HW_IPCC_SYS_SendCmd>

  return 0;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20030000 	.word	0x20030000

08008244 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008248:	4b07      	ldr	r3, [pc, #28]	@ (8008268 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4619      	mov	r1, r3
 8008250:	2005      	movs	r0, #5
 8008252:	f000 f8d9 	bl	8008408 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8008256:	4b05      	ldr	r3, [pc, #20]	@ (800826c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a03      	ldr	r2, [pc, #12]	@ (8008268 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800825c:	68d2      	ldr	r2, [r2, #12]
 800825e:	6812      	ldr	r2, [r2, #0]
 8008260:	4610      	mov	r0, r2
 8008262:	4798      	blx	r3

  return;
 8008264:	bf00      	nop
}
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20030000 	.word	0x20030000
 800826c:	2000035c 	.word	0x2000035c

08008270 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008276:	e00e      	b.n	8008296 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8008278:	1d3b      	adds	r3, r7, #4
 800827a:	4619      	mov	r1, r3
 800827c:	480b      	ldr	r0, [pc, #44]	@ (80082ac <HW_IPCC_SYS_EvtNot+0x3c>)
 800827e:	f000 f9e0 	bl	8008642 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4619      	mov	r1, r3
 8008286:	2006      	movs	r0, #6
 8008288:	f000 f8be 	bl	8008408 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800828c:	4b08      	ldr	r3, [pc, #32]	@ (80082b0 <HW_IPCC_SYS_EvtNot+0x40>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	4610      	mov	r0, r2
 8008294:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8008296:	4805      	ldr	r0, [pc, #20]	@ (80082ac <HW_IPCC_SYS_EvtNot+0x3c>)
 8008298:	f000 f944 	bl	8008524 <LST_is_empty>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d0ea      	beq.n	8008278 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80082a2:	bf00      	nop
}
 80082a4:	3708      	adds	r7, #8
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	200300d0 	.word	0x200300d0
 80082b0:	20000360 	.word	0x20000360

080082b4 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80082bc:	4817      	ldr	r0, [pc, #92]	@ (800831c <TL_MM_Init+0x68>)
 80082be:	f000 f921 	bl	8008504 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80082c2:	4817      	ldr	r0, [pc, #92]	@ (8008320 <TL_MM_Init+0x6c>)
 80082c4:	f000 f91e 	bl	8008504 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80082c8:	4b16      	ldr	r3, [pc, #88]	@ (8008324 <TL_MM_Init+0x70>)
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	4a16      	ldr	r2, [pc, #88]	@ (8008328 <TL_MM_Init+0x74>)
 80082ce:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80082d0:	4b15      	ldr	r3, [pc, #84]	@ (8008328 <TL_MM_Init+0x74>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6892      	ldr	r2, [r2, #8]
 80082d8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80082da:	4b13      	ldr	r3, [pc, #76]	@ (8008328 <TL_MM_Init+0x74>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	68d2      	ldr	r2, [r2, #12]
 80082e2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80082e4:	4b10      	ldr	r3, [pc, #64]	@ (8008328 <TL_MM_Init+0x74>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a0c      	ldr	r2, [pc, #48]	@ (800831c <TL_MM_Init+0x68>)
 80082ea:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80082ec:	4b0e      	ldr	r3, [pc, #56]	@ (8008328 <TL_MM_Init+0x74>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	6812      	ldr	r2, [r2, #0]
 80082f4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80082f6:	4b0c      	ldr	r3, [pc, #48]	@ (8008328 <TL_MM_Init+0x74>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	6852      	ldr	r2, [r2, #4]
 80082fe:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8008300:	4b09      	ldr	r3, [pc, #36]	@ (8008328 <TL_MM_Init+0x74>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6912      	ldr	r2, [r2, #16]
 8008308:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800830a:	4b07      	ldr	r3, [pc, #28]	@ (8008328 <TL_MM_Init+0x74>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6952      	ldr	r2, [r2, #20]
 8008312:	619a      	str	r2, [r3, #24]

  return;
 8008314:	bf00      	nop
}
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	200300b8 	.word	0x200300b8
 8008320:	2000034c 	.word	0x2000034c
 8008324:	20030000 	.word	0x20030000
 8008328:	20000364 	.word	0x20000364

0800832c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4807      	ldr	r0, [pc, #28]	@ (8008354 <TL_MM_EvtDone+0x28>)
 8008338:	f000 f93c 	bl	80085b4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800833c:	6879      	ldr	r1, [r7, #4]
 800833e:	2000      	movs	r0, #0
 8008340:	f000 f862 	bl	8008408 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8008344:	4804      	ldr	r0, [pc, #16]	@ (8008358 <TL_MM_EvtDone+0x2c>)
 8008346:	f000 ff47 	bl	80091d8 <HW_IPCC_MM_SendFreeBuf>

  return;
 800834a:	bf00      	nop
}
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	2000034c 	.word	0x2000034c
 8008358:	0800835d 	.word	0x0800835d

0800835c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8008362:	e00c      	b.n	800837e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8008364:	1d3b      	adds	r3, r7, #4
 8008366:	4619      	mov	r1, r3
 8008368:	480a      	ldr	r0, [pc, #40]	@ (8008394 <SendFreeBuf+0x38>)
 800836a:	f000 f96a 	bl	8008642 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800836e:	4b0a      	ldr	r3, [pc, #40]	@ (8008398 <SendFreeBuf+0x3c>)
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	4611      	mov	r1, r2
 8008378:	4618      	mov	r0, r3
 800837a:	f000 f91b 	bl	80085b4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800837e:	4805      	ldr	r0, [pc, #20]	@ (8008394 <SendFreeBuf+0x38>)
 8008380:	f000 f8d0 	bl	8008524 <LST_is_empty>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d0ec      	beq.n	8008364 <SendFreeBuf+0x8>
  }

  return;
 800838a:	bf00      	nop
}
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	2000034c 	.word	0x2000034c
 8008398:	20030000 	.word	0x20030000

0800839c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80083a0:	4805      	ldr	r0, [pc, #20]	@ (80083b8 <TL_TRACES_Init+0x1c>)
 80083a2:	f000 f8af 	bl	8008504 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80083a6:	4b05      	ldr	r3, [pc, #20]	@ (80083bc <TL_TRACES_Init+0x20>)
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	4a03      	ldr	r2, [pc, #12]	@ (80083b8 <TL_TRACES_Init+0x1c>)
 80083ac:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80083ae:	f000 ff49 	bl	8009244 <HW_IPCC_TRACES_Init>

  return;
 80083b2:	bf00      	nop
}
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	200300c0 	.word	0x200300c0
 80083bc:	20030000 	.word	0x20030000

080083c0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80083c6:	e008      	b.n	80083da <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80083c8:	1d3b      	adds	r3, r7, #4
 80083ca:	4619      	mov	r1, r3
 80083cc:	4808      	ldr	r0, [pc, #32]	@ (80083f0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80083ce:	f000 f938 	bl	8008642 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f000 f80d 	bl	80083f4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80083da:	4805      	ldr	r0, [pc, #20]	@ (80083f0 <HW_IPCC_TRACES_EvtNot+0x30>)
 80083dc:	f000 f8a2 	bl	8008524 <LST_is_empty>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0f0      	beq.n	80083c8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80083e6:	bf00      	nop
}
 80083e8:	3708      	adds	r7, #8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	200300c0 	.word	0x200300c0

080083f4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8008408:	b480      	push	{r7}
 800840a:	b085      	sub	sp, #20
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	6039      	str	r1, [r7, #0]
 8008412:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b06      	cmp	r3, #6
 8008418:	d845      	bhi.n	80084a6 <OutputDbgTrace+0x9e>
 800841a:	a201      	add	r2, pc, #4	@ (adr r2, 8008420 <OutputDbgTrace+0x18>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	0800843d 	.word	0x0800843d
 8008424:	08008461 	.word	0x08008461
 8008428:	08008467 	.word	0x08008467
 800842c:	0800847b 	.word	0x0800847b
 8008430:	08008487 	.word	0x08008487
 8008434:	0800848d 	.word	0x0800848d
 8008438:	0800849b 	.word	0x0800849b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	7a5b      	ldrb	r3, [r3, #9]
 8008444:	2bff      	cmp	r3, #255	@ 0xff
 8008446:	d005      	beq.n	8008454 <OutputDbgTrace+0x4c>
 8008448:	2bff      	cmp	r3, #255	@ 0xff
 800844a:	dc05      	bgt.n	8008458 <OutputDbgTrace+0x50>
 800844c:	2b0e      	cmp	r3, #14
 800844e:	d005      	beq.n	800845c <OutputDbgTrace+0x54>
 8008450:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8008452:	e001      	b.n	8008458 <OutputDbgTrace+0x50>
          break;
 8008454:	bf00      	nop
 8008456:	e027      	b.n	80084a8 <OutputDbgTrace+0xa0>
          break;
 8008458:	bf00      	nop
 800845a:	e025      	b.n	80084a8 <OutputDbgTrace+0xa0>
          break;
 800845c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800845e:	e023      	b.n	80084a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8008464:	e020      	b.n	80084a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	7a5b      	ldrb	r3, [r3, #9]
 800846e:	2b0e      	cmp	r3, #14
 8008470:	d001      	beq.n	8008476 <OutputDbgTrace+0x6e>
 8008472:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008474:	e000      	b.n	8008478 <OutputDbgTrace+0x70>
          break;
 8008476:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008478:	e016      	b.n	80084a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	7a5b      	ldrb	r3, [r3, #9]
 8008482:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008484:	e010      	b.n	80084a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800848a:	e00d      	b.n	80084a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	7a5b      	ldrb	r3, [r3, #9]
 8008494:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8008496:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8008498:	e006      	b.n	80084a8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	7a5b      	ldrb	r3, [r3, #9]
 80084a2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80084a4:	e000      	b.n	80084a8 <OutputDbgTrace+0xa0>

    default:
      break;
 80084a6:	bf00      	nop
  }

  return;
 80084a8:	bf00      	nop
}
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	4603      	mov	r3, r0
 80084bc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80084be:	4b0f      	ldr	r3, [pc, #60]	@ (80084fc <OTP_Read+0x48>)
 80084c0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80084c2:	e002      	b.n	80084ca <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3b08      	subs	r3, #8
 80084c8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3307      	adds	r3, #7
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	79fa      	ldrb	r2, [r7, #7]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d003      	beq.n	80084de <OTP_Read+0x2a>
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	4a09      	ldr	r2, [pc, #36]	@ (8008500 <OTP_Read+0x4c>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d1f2      	bne.n	80084c4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3307      	adds	r3, #7
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	79fa      	ldrb	r2, [r7, #7]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d001      	beq.n	80084ee <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80084ea:	2300      	movs	r3, #0
 80084ec:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80084ee:	68fb      	ldr	r3, [r7, #12]
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3714      	adds	r7, #20
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	1fff73f8 	.word	0x1fff73f8
 8008500:	1fff7000 	.word	0x1fff7000

08008504 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	687a      	ldr	r2, [r7, #4]
 8008510:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	605a      	str	r2, [r3, #4]
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800852c:	f3ef 8310 	mrs	r3, PRIMASK
 8008530:	60fb      	str	r3, [r7, #12]
  return(result);
 8008532:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008534:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008536:	b672      	cpsid	i
}
 8008538:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d102      	bne.n	800854a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8008544:	2301      	movs	r3, #1
 8008546:	75fb      	strb	r3, [r7, #23]
 8008548:	e001      	b.n	800854e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800854a:	2300      	movs	r3, #0
 800854c:	75fb      	strb	r3, [r7, #23]
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	f383 8810 	msr	PRIMASK, r3
}
 8008558:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
}
 800855c:	4618      	mov	r0, r3
 800855e:	371c      	adds	r7, #28
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8008568:	b480      	push	{r7}
 800856a:	b087      	sub	sp, #28
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008572:	f3ef 8310 	mrs	r3, PRIMASK
 8008576:	60fb      	str	r3, [r7, #12]
  return(result);
 8008578:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800857a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800857c:	b672      	cpsid	i
}
 800857e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	683a      	ldr	r2, [r7, #0]
 8008592:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	605a      	str	r2, [r3, #4]
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	f383 8810 	msr	PRIMASK, r3
}
 80085a6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80085a8:	bf00      	nop
 80085aa:	371c      	adds	r7, #28
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085be:	f3ef 8310 	mrs	r3, PRIMASK
 80085c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80085c4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80085c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80085c8:	b672      	cpsid	i
}
 80085ca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	683a      	ldr	r2, [r7, #0]
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	f383 8810 	msr	PRIMASK, r3
}
 80085f2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80085f4:	bf00      	nop
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008608:	f3ef 8310 	mrs	r3, PRIMASK
 800860c:	60fb      	str	r3, [r7, #12]
  return(result);
 800860e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008610:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008612:	b672      	cpsid	i
}
 8008614:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	6812      	ldr	r2, [r2, #0]
 800861e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6852      	ldr	r2, [r2, #4]
 8008628:	605a      	str	r2, [r3, #4]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f383 8810 	msr	PRIMASK, r3
}
 8008634:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008636:	bf00      	nop
 8008638:	371c      	adds	r7, #28
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b086      	sub	sp, #24
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800864c:	f3ef 8310 	mrs	r3, PRIMASK
 8008650:	60fb      	str	r3, [r7, #12]
  return(result);
 8008652:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8008654:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008656:	b672      	cpsid	i
}
 8008658:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f7ff ffca 	bl	8008600 <LST_remove_node>
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f383 8810 	msr	PRIMASK, r3
}
 8008676:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8008678:	bf00      	nop
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008680:	b480      	push	{r7}
 8008682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008684:	4b03      	ldr	r3, [pc, #12]	@ (8008694 <LL_FLASH_GetUDN+0x14>)
 8008686:	681b      	ldr	r3, [r3, #0]
}
 8008688:	4618      	mov	r0, r3
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	1fff7580 	.word	0x1fff7580

08008698 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800869c:	4b03      	ldr	r3, [pc, #12]	@ (80086ac <LL_FLASH_GetDeviceID+0x14>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	b2db      	uxtb	r3, r3
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	1fff7584 	.word	0x1fff7584

080086b0 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80086b0:	b480      	push	{r7}
 80086b2:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80086b4:	4b03      	ldr	r3, [pc, #12]	@ (80086c4 <LL_FLASH_GetSTCompanyID+0x14>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	0a1b      	lsrs	r3, r3, #8
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	1fff7584 	.word	0x1fff7584

080086c8 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80086c8:	b5b0      	push	{r4, r5, r7, lr}
 80086ca:	b090      	sub	sp, #64	@ 0x40
 80086cc:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80086ce:	2392      	movs	r3, #146	@ 0x92
 80086d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80086d4:	4b31      	ldr	r3, [pc, #196]	@ (800879c <APP_BLE_Init+0xd4>)
 80086d6:	1d3c      	adds	r4, r7, #4
 80086d8:	461d      	mov	r5, r3
 80086da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80086ea:	c403      	stmia	r4!, {r0, r1}
 80086ec:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80086ee:	f000 f923 	bl	8008938 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80086f2:	2101      	movs	r1, #1
 80086f4:	2002      	movs	r0, #2
 80086f6:	f000 fdcd 	bl	8009294 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80086fa:	4a29      	ldr	r2, [pc, #164]	@ (80087a0 <APP_BLE_Init+0xd8>)
 80086fc:	2100      	movs	r1, #0
 80086fe:	2002      	movs	r0, #2
 8008700:	f000 ff2a 	bl	8009558 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8008704:	1d3b      	adds	r3, r7, #4
 8008706:	4618      	mov	r0, r3
 8008708:	f7ff f898 	bl	800783c <SHCI_C2_BLE_Init>
 800870c:	4603      	mov	r3, r0
 800870e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8008712:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800871a:	f7f9 f8b3 	bl	8001884 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800871e:	f000 f921 	bl	8008964 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8008722:	f7fe ffe5 	bl	80076f0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008726:	4b1f      	ldr	r3, [pc, #124]	@ (80087a4 <APP_BLE_Init+0xdc>)
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800872e:	4b1d      	ldr	r3, [pc, #116]	@ (80087a4 <APP_BLE_Init+0xdc>)
 8008730:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008734:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8008736:	4a1c      	ldr	r2, [pc, #112]	@ (80087a8 <APP_BLE_Init+0xe0>)
 8008738:	2100      	movs	r1, #0
 800873a:	2001      	movs	r0, #1
 800873c:	f000 ff0c 	bl	8009558 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8008740:	2006      	movs	r0, #6
 8008742:	f7fe fcc5 	bl	80070d0 <aci_hal_set_radio_activity_mask>
 8008746:	4603      	mov	r3, r0
 8008748:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800874c:	f000 fb40 	bl	8008dd0 <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  SHCI_C2_ExtpaConfig((uint32_t)RFPA_CSD_GPIO_Port, RFPA_CSD_Pin, EXT_PA_ENABLED_HIGH, EXT_PA_ENABLED);
 8008750:	2301      	movs	r3, #1
 8008752:	2201      	movs	r2, #1
 8008754:	2102      	movs	r1, #2
 8008756:	4815      	ldr	r0, [pc, #84]	@ (80087ac <APP_BLE_Init+0xe4>)
 8008758:	f7ff f89e 	bl	8007898 <SHCI_C2_ExtpaConfig>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800875c:	4b14      	ldr	r3, [pc, #80]	@ (80087b0 <APP_BLE_Init+0xe8>)
 800875e:	2200      	movs	r2, #0
 8008760:	4914      	ldr	r1, [pc, #80]	@ (80087b4 <APP_BLE_Init+0xec>)
 8008762:	2000      	movs	r0, #0
 8008764:	f7f8 fc74 	bl	8001050 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8008768:	4b13      	ldr	r3, [pc, #76]	@ (80087b8 <APP_BLE_Init+0xf0>)
 800876a:	2200      	movs	r2, #0
 800876c:	4913      	ldr	r1, [pc, #76]	@ (80087bc <APP_BLE_Init+0xf4>)
 800876e:	2000      	movs	r0, #0
 8008770:	f7f8 fc6e 	bl	8001050 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8008774:	4b0b      	ldr	r3, [pc, #44]	@ (80087a4 <APP_BLE_Init+0xdc>)
 8008776:	2200      	movs	r2, #0
 8008778:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800877a:	4b0a      	ldr	r3, [pc, #40]	@ (80087a4 <APP_BLE_Init+0xdc>)
 800877c:	2200      	movs	r2, #0
 800877e:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8008780:	4b0f      	ldr	r3, [pc, #60]	@ (80087c0 <APP_BLE_Init+0xf8>)
 8008782:	2280      	movs	r2, #128	@ 0x80
 8008784:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8008786:	4b0f      	ldr	r3, [pc, #60]	@ (80087c4 <APP_BLE_Init+0xfc>)
 8008788:	22a0      	movs	r2, #160	@ 0xa0
 800878a:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800878c:	2001      	movs	r0, #1
 800878e:	f000 f9bb 	bl	8008b08 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8008792:	bf00      	nop
}
 8008794:	3740      	adds	r7, #64	@ 0x40
 8008796:	46bd      	mov	sp, r7
 8008798:	bdb0      	pop	{r4, r5, r7, pc}
 800879a:	bf00      	nop
 800879c:	0800989c 	.word	0x0800989c
 80087a0:	08007ab5 	.word	0x08007ab5
 80087a4:	20000370 	.word	0x20000370
 80087a8:	08008c51 	.word	0x08008c51
 80087ac:	48000400 	.word	0x48000400
 80087b0:	08008c85 	.word	0x08008c85
 80087b4:	200003f1 	.word	0x200003f1
 80087b8:	08008c95 	.word	0x08008c95
 80087bc:	200003f2 	.word	0x200003f2
 80087c0:	200003f4 	.word	0x200003f4
 80087c4:	200003f6 	.word	0x200003f6

080087c8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08a      	sub	sp, #40	@ 0x28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80087d0:	2392      	movs	r3, #146	@ 0x92
 80087d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3301      	adds	r3, #1
 80087da:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	2bff      	cmp	r3, #255	@ 0xff
 80087e2:	d076      	beq.n	80088d2 <SVCCTL_App_Notification+0x10a>
 80087e4:	2bff      	cmp	r3, #255	@ 0xff
 80087e6:	f300 809b 	bgt.w	8008920 <SVCCTL_App_Notification+0x158>
 80087ea:	2b05      	cmp	r3, #5
 80087ec:	d002      	beq.n	80087f4 <SVCCTL_App_Notification+0x2c>
 80087ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80087f0:	d020      	beq.n	8008834 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80087f2:	e095      	b.n	8008920 <SVCCTL_App_Notification+0x158>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	3302      	adds	r3, #2
 80087f8:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008800:	b29a      	uxth	r2, r3
 8008802:	4b4b      	ldr	r3, [pc, #300]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 8008804:	8adb      	ldrh	r3, [r3, #22]
 8008806:	429a      	cmp	r2, r3
 8008808:	d106      	bne.n	8008818 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800880a:	4b49      	ldr	r3, [pc, #292]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 800880c:	2200      	movs	r2, #0
 800880e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008810:	4b47      	ldr	r3, [pc, #284]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 8008812:	2200      	movs	r2, #0
 8008814:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8008818:	2001      	movs	r0, #1
 800881a:	f000 f975 	bl	8008b08 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800881e:	4b45      	ldr	r3, [pc, #276]	@ (8008934 <SVCCTL_App_Notification+0x16c>)
 8008820:	2201      	movs	r2, #1
 8008822:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008824:	4b42      	ldr	r3, [pc, #264]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 8008826:	8ada      	ldrh	r2, [r3, #22]
 8008828:	4b42      	ldr	r3, [pc, #264]	@ (8008934 <SVCCTL_App_Notification+0x16c>)
 800882a:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800882c:	4841      	ldr	r0, [pc, #260]	@ (8008934 <SVCCTL_App_Notification+0x16c>)
 800882e:	f000 fab1 	bl	8008d94 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8008832:	e078      	b.n	8008926 <SVCCTL_App_Notification+0x15e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	3302      	adds	r3, #2
 8008838:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b0c      	cmp	r3, #12
 8008840:	d005      	beq.n	800884e <SVCCTL_App_Notification+0x86>
 8008842:	2b0c      	cmp	r3, #12
 8008844:	dc41      	bgt.n	80088ca <SVCCTL_App_Notification+0x102>
 8008846:	2b01      	cmp	r3, #1
 8008848:	d017      	beq.n	800887a <SVCCTL_App_Notification+0xb2>
 800884a:	2b03      	cmp	r3, #3
          break;
 800884c:	e03d      	b.n	80088ca <SVCCTL_App_Notification+0x102>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	3301      	adds	r3, #1
 8008852:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 8008854:	4b36      	ldr	r3, [pc, #216]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 8008856:	8adb      	ldrh	r3, [r3, #22]
 8008858:	f107 020a 	add.w	r2, r7, #10
 800885c:	f107 010b 	add.w	r1, r7, #11
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fcad 	bl	80071c0 <hci_le_read_phy>
 8008866:	4603      	mov	r3, r0
 8008868:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800886c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008870:	2b00      	cmp	r3, #0
 8008872:	d12c      	bne.n	80088ce <SVCCTL_App_Notification+0x106>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8008874:	7afb      	ldrb	r3, [r7, #11]
 8008876:	2b02      	cmp	r3, #2
          break;
 8008878:	e029      	b.n	80088ce <SVCCTL_App_Notification+0x106>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	3301      	adds	r3, #1
 800887e:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008880:	4b2b      	ldr	r3, [pc, #172]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 8008882:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008886:	4618      	mov	r0, r3
 8008888:	f7f8 fc5c 	bl	8001144 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800888c:	4b28      	ldr	r3, [pc, #160]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 800888e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008892:	2b04      	cmp	r3, #4
 8008894:	d104      	bne.n	80088a0 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008896:	4b26      	ldr	r3, [pc, #152]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 8008898:	2206      	movs	r2, #6
 800889a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800889e:	e003      	b.n	80088a8 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80088a0:	4b23      	ldr	r3, [pc, #140]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 80088a2:	2205      	movs	r2, #5
 80088a4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80088ae:	b29a      	uxth	r2, r3
 80088b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 80088b2:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 80088b4:	4b1f      	ldr	r3, [pc, #124]	@ (8008934 <SVCCTL_App_Notification+0x16c>)
 80088b6:	2200      	movs	r2, #0
 80088b8:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80088ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 80088bc:	8ada      	ldrh	r2, [r3, #22]
 80088be:	4b1d      	ldr	r3, [pc, #116]	@ (8008934 <SVCCTL_App_Notification+0x16c>)
 80088c0:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 80088c2:	481c      	ldr	r0, [pc, #112]	@ (8008934 <SVCCTL_App_Notification+0x16c>)
 80088c4:	f000 fa66 	bl	8008d94 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80088c8:	e002      	b.n	80088d0 <SVCCTL_App_Notification+0x108>
          break;
 80088ca:	bf00      	nop
 80088cc:	e02b      	b.n	8008926 <SVCCTL_App_Notification+0x15e>
          break;
 80088ce:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80088d0:	e029      	b.n	8008926 <SVCCTL_App_Notification+0x15e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80088d2:	6a3b      	ldr	r3, [r7, #32]
 80088d4:	3302      	adds	r3, #2
 80088d6:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d010      	beq.n	8008908 <SVCCTL_App_Notification+0x140>
 80088e6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80088ea:	4293      	cmp	r3, r2
 80088ec:	dc1a      	bgt.n	8008924 <SVCCTL_App_Notification+0x15c>
 80088ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f2:	d00f      	beq.n	8008914 <SVCCTL_App_Notification+0x14c>
 80088f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088f8:	dc14      	bgt.n	8008924 <SVCCTL_App_Notification+0x15c>
 80088fa:	2b04      	cmp	r3, #4
 80088fc:	d00c      	beq.n	8008918 <SVCCTL_App_Notification+0x150>
 80088fe:	f240 4207 	movw	r2, #1031	@ 0x407
 8008902:	4293      	cmp	r3, r2
 8008904:	d00a      	beq.n	800891c <SVCCTL_App_Notification+0x154>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008906:	e00d      	b.n	8008924 <SVCCTL_App_Notification+0x15c>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8008908:	4b09      	ldr	r3, [pc, #36]	@ (8008930 <SVCCTL_App_Notification+0x168>)
 800890a:	8adb      	ldrh	r3, [r3, #22]
 800890c:	4618      	mov	r0, r3
 800890e:	f7fe fa9e 	bl	8006e4e <aci_gatt_confirm_indication>
        break;
 8008912:	e004      	b.n	800891e <SVCCTL_App_Notification+0x156>
          break;
 8008914:	bf00      	nop
 8008916:	e005      	b.n	8008924 <SVCCTL_App_Notification+0x15c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8008918:	bf00      	nop
 800891a:	e003      	b.n	8008924 <SVCCTL_App_Notification+0x15c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800891c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800891e:	e001      	b.n	8008924 <SVCCTL_App_Notification+0x15c>
      break;
 8008920:	bf00      	nop
 8008922:	e000      	b.n	8008926 <SVCCTL_App_Notification+0x15e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8008924:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008926:	2301      	movs	r3, #1
}
 8008928:	4618      	mov	r0, r3
 800892a:	3728      	adds	r7, #40	@ 0x28
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20000370 	.word	0x20000370
 8008934:	200003f8 	.word	0x200003f8

08008938 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800893e:	4b06      	ldr	r3, [pc, #24]	@ (8008958 <Ble_Tl_Init+0x20>)
 8008940:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8008942:	4b06      	ldr	r3, [pc, #24]	@ (800895c <Ble_Tl_Init+0x24>)
 8008944:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8008946:	463b      	mov	r3, r7
 8008948:	4619      	mov	r1, r3
 800894a:	4805      	ldr	r0, [pc, #20]	@ (8008960 <Ble_Tl_Init+0x28>)
 800894c:	f7ff f896 	bl	8007a7c <hci_init>

  return;
 8008950:	bf00      	nop
}
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	200300d8 	.word	0x200300d8
 800895c:	08008d1f 	.word	0x08008d1f
 8008960:	08008ce7 	.word	0x08008ce7

08008964 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8008964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008966:	b08d      	sub	sp, #52	@ 0x34
 8008968:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800896a:	2300      	movs	r3, #0
 800896c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800896e:	2392      	movs	r3, #146	@ 0x92
 8008970:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8008972:	f7fe fc01 	bl	8007178 <hci_reset>
 8008976:	4603      	mov	r3, r0
 8008978:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800897a:	f000 f925 	bl	8008bc8 <BleGetBdAddress>
 800897e:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	2106      	movs	r1, #6
 8008984:	2000      	movs	r0, #0
 8008986:	f7fe fab7 	bl	8006ef8 <aci_hal_write_config_data>
 800898a:	4603      	mov	r3, r0
 800898c:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	3305      	adds	r3, #5
 8008992:	781a      	ldrb	r2, [r3, #0]
 8008994:	4b56      	ldr	r3, [pc, #344]	@ (8008af0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8008996:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	3304      	adds	r3, #4
 800899c:	781a      	ldrb	r2, [r3, #0]
 800899e:	4b54      	ldr	r3, [pc, #336]	@ (8008af0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80089a0:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	3303      	adds	r3, #3
 80089a6:	781a      	ldrb	r2, [r3, #0]
 80089a8:	4b51      	ldr	r3, [pc, #324]	@ (8008af0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80089aa:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	3302      	adds	r3, #2
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	4b4f      	ldr	r3, [pc, #316]	@ (8008af0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80089b4:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	3301      	adds	r3, #1
 80089ba:	781a      	ldrb	r2, [r3, #0]
 80089bc:	4b4c      	ldr	r3, [pc, #304]	@ (8008af0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80089be:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	781a      	ldrb	r2, [r3, #0]
 80089c4:	4b4a      	ldr	r3, [pc, #296]	@ (8008af0 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80089c6:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80089c8:	4a4a      	ldr	r2, [pc, #296]	@ (8008af4 <Ble_Hci_Gap_Gatt_Init+0x190>)
 80089ca:	2110      	movs	r1, #16
 80089cc:	2018      	movs	r0, #24
 80089ce:	f7fe fa93 	bl	8006ef8 <aci_hal_write_config_data>
 80089d2:	4603      	mov	r3, r0
 80089d4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80089d6:	4a48      	ldr	r2, [pc, #288]	@ (8008af8 <Ble_Hci_Gap_Gatt_Init+0x194>)
 80089d8:	2110      	movs	r1, #16
 80089da:	2008      	movs	r0, #8
 80089dc:	f7fe fa8c 	bl	8006ef8 <aci_hal_write_config_data>
 80089e0:	4603      	mov	r3, r0
 80089e2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80089e4:	211d      	movs	r1, #29
 80089e6:	2001      	movs	r0, #1
 80089e8:	f7fe fb0b 	bl	8007002 <aci_hal_set_tx_power_level>
 80089ec:	4603      	mov	r3, r0
 80089ee:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80089f0:	f7fd ff81 	bl	80068f6 <aci_gatt_init>
 80089f4:	4603      	mov	r3, r0
 80089f6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	f043 0301 	orr.w	r3, r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8008a04:	7bfb      	ldrb	r3, [r7, #15]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d01f      	beq.n	8008a4a <Ble_Hci_Gap_Gatt_Init+0xe6>
  {
    const char *name = "P2PSRV1";
 8008a0a:	4b3c      	ldr	r3, [pc, #240]	@ (8008afc <Ble_Hci_Gap_Gatt_Init+0x198>)
 8008a0c:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8008a0e:	1dba      	adds	r2, r7, #6
 8008a10:	7bf8      	ldrb	r0, [r7, #15]
 8008a12:	1cbb      	adds	r3, r7, #2
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	1d3b      	adds	r3, r7, #4
 8008a18:	9300      	str	r3, [sp, #0]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	2207      	movs	r2, #7
 8008a1e:	2100      	movs	r1, #0
 8008a20:	f7fd fe26 	bl	8006670 <aci_gap_init>
 8008a24:	4603      	mov	r3, r0
 8008a26:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8008a28:	88fc      	ldrh	r4, [r7, #6]
 8008a2a:	88bd      	ldrh	r5, [r7, #4]
 8008a2c:	68b8      	ldr	r0, [r7, #8]
 8008a2e:	f7f7 fba5 	bl	800017c <strlen>
 8008a32:	4603      	mov	r3, r0
 8008a34:	b2da      	uxtb	r2, r3
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	4629      	mov	r1, r5
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7fe f95b 	bl	8006cfc <aci_gatt_update_char_value>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8008a4a:	88f8      	ldrh	r0, [r7, #6]
 8008a4c:	8879      	ldrh	r1, [r7, #2]
 8008a4e:	463b      	mov	r3, r7
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	2302      	movs	r3, #2
 8008a54:	2200      	movs	r2, #0
 8008a56:	f7fe f951 	bl	8006cfc <aci_gatt_update_char_value>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_1M,RX_1M);
 8008a5e:	2201      	movs	r2, #1
 8008a60:	2101      	movs	r1, #1
 8008a62:	2000      	movs	r0, #0
 8008a64:	f7fe fc2a 	bl	80072bc <hci_le_set_default_phy>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008a6c:	4b24      	ldr	r3, [pc, #144]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008a6e:	2201      	movs	r2, #1
 8008a70:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008a72:	4b23      	ldr	r3, [pc, #140]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008a74:	781b      	ldrb	r3, [r3, #0]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f7fd fce2 	bl	8006440 <aci_gap_set_io_capability>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008a80:	4b1f      	ldr	r3, [pc, #124]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008a82:	2201      	movs	r2, #1
 8008a84:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008a86:	4b1e      	ldr	r3, [pc, #120]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008a88:	2208      	movs	r2, #8
 8008a8a:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008a8e:	2210      	movs	r2, #16
 8008a90:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008a92:	4b1b      	ldr	r3, [pc, #108]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008a98:	4b19      	ldr	r3, [pc, #100]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008a9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008b04 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8008a9c:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008a9e:	4b18      	ldr	r3, [pc, #96]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008aa4:	4b16      	ldr	r3, [pc, #88]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008aa6:	789c      	ldrb	r4, [r3, #2]
 8008aa8:	4b15      	ldr	r3, [pc, #84]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008aaa:	785d      	ldrb	r5, [r3, #1]
 8008aac:	4b14      	ldr	r3, [pc, #80]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008aae:	791b      	ldrb	r3, [r3, #4]
 8008ab0:	4a13      	ldr	r2, [pc, #76]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008ab2:	7952      	ldrb	r2, [r2, #5]
 8008ab4:	4912      	ldr	r1, [pc, #72]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008ab6:	78c9      	ldrb	r1, [r1, #3]
 8008ab8:	4811      	ldr	r0, [pc, #68]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008aba:	6880      	ldr	r0, [r0, #8]
 8008abc:	2600      	movs	r6, #0
 8008abe:	9604      	str	r6, [sp, #16]
 8008ac0:	9003      	str	r0, [sp, #12]
 8008ac2:	9102      	str	r1, [sp, #8]
 8008ac4:	9201      	str	r2, [sp, #4]
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	2300      	movs	r3, #0
 8008aca:	2201      	movs	r2, #1
 8008acc:	4629      	mov	r1, r5
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f7fd fd0a 	bl	80064e8 <aci_gap_set_authentication_requirement>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008ad8:	4b09      	ldr	r3, [pc, #36]	@ (8008b00 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8008ada:	789b      	ldrb	r3, [r3, #2]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d003      	beq.n	8008ae8 <Ble_Hci_Gap_Gatt_Init+0x184>
  {
    ret = aci_gap_configure_whitelist();
 8008ae0:	f7fd fee5 	bl	80068ae <aci_gap_configure_filter_accept_list>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8008ae8:	bf00      	nop
 8008aea:	371c      	adds	r7, #28
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af0:	20000024 	.word	0x20000024
 8008af4:	08009ab0 	.word	0x08009ab0
 8008af8:	08009ac0 	.word	0x08009ac0
 8008afc:	080098d8 	.word	0x080098d8
 8008b00:	20000370 	.word	0x20000370
 8008b04:	0001b207 	.word	0x0001b207

08008b08 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b08c      	sub	sp, #48	@ 0x30
 8008b0c:	af08      	add	r7, sp, #32
 8008b0e:	4603      	mov	r3, r0
 8008b10:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008b12:	2392      	movs	r3, #146	@ 0x92
 8008b14:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8008b16:	79fb      	ldrb	r3, [r7, #7]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d106      	bne.n	8008b2a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8008b1c:	4b24      	ldr	r3, [pc, #144]	@ (8008bb0 <Adv_Request+0xa8>)
 8008b1e:	881b      	ldrh	r3, [r3, #0]
 8008b20:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8008b22:	4b24      	ldr	r3, [pc, #144]	@ (8008bb4 <Adv_Request+0xac>)
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	81bb      	strh	r3, [r7, #12]
 8008b28:	e005      	b.n	8008b36 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8008b2a:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 8008b2e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8008b30:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8008b34:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8008b36:	4b20      	ldr	r3, [pc, #128]	@ (8008bb8 <Adv_Request+0xb0>)
 8008b38:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7f8 fb01 	bl	8001144 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d10d      	bne.n	8008b64 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8008b48:	4b1b      	ldr	r3, [pc, #108]	@ (8008bb8 <Adv_Request+0xb0>)
 8008b4a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d004      	beq.n	8008b5c <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8008b52:	4b19      	ldr	r3, [pc, #100]	@ (8008bb8 <Adv_Request+0xb0>)
 8008b54:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	d103      	bne.n	8008b64 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 8008b5c:	f7fd fb52 	bl	8006204 <aci_gap_set_non_discoverable>
 8008b60:	4603      	mov	r3, r0
 8008b62:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8008b64:	4a14      	ldr	r2, [pc, #80]	@ (8008bb8 <Adv_Request+0xb0>)
 8008b66:	79fb      	ldrb	r3, [r7, #7]
 8008b68:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 8008b6c:	4b12      	ldr	r3, [pc, #72]	@ (8008bb8 <Adv_Request+0xb0>)
 8008b6e:	7e1b      	ldrb	r3, [r3, #24]
 8008b70:	89ba      	ldrh	r2, [r7, #12]
 8008b72:	89f9      	ldrh	r1, [r7, #14]
 8008b74:	2000      	movs	r0, #0
 8008b76:	9006      	str	r0, [sp, #24]
 8008b78:	2000      	movs	r0, #0
 8008b7a:	9005      	str	r0, [sp, #20]
 8008b7c:	480f      	ldr	r0, [pc, #60]	@ (8008bbc <Adv_Request+0xb4>)
 8008b7e:	9004      	str	r0, [sp, #16]
 8008b80:	9303      	str	r3, [sp, #12]
 8008b82:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc0 <Adv_Request+0xb8>)
 8008b84:	9302      	str	r3, [sp, #8]
 8008b86:	2308      	movs	r3, #8
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	2300      	movs	r3, #0
 8008b90:	2000      	movs	r0, #0
 8008b92:	f7fd fb5b 	bl	800624c <aci_gap_set_discoverable>
 8008b96:	4603      	mov	r3, r0
 8008b98:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 8008b9a:	490a      	ldr	r1, [pc, #40]	@ (8008bc4 <Adv_Request+0xbc>)
 8008b9c:	200e      	movs	r0, #14
 8008b9e:	f7fd fe14 	bl	80067ca <aci_gap_update_adv_data>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8008ba6:	bf00      	nop
}
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	200003f4 	.word	0x200003f4
 8008bb4:	200003f6 	.word	0x200003f6
 8008bb8:	20000370 	.word	0x20000370
 8008bbc:	20000389 	.word	0x20000389
 8008bc0:	08009ad0 	.word	0x08009ad0
 8008bc4:	20000024 	.word	0x20000024

08008bc8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b086      	sub	sp, #24
 8008bcc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008bce:	f7ff fd57 	bl	8008680 <LL_FLASH_GetUDN>
 8008bd2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bda:	d023      	beq.n	8008c24 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008bdc:	f7ff fd68 	bl	80086b0 <LL_FLASH_GetSTCompanyID>
 8008be0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008be2:	f7ff fd59 	bl	8008698 <LL_FLASH_GetDeviceID>
 8008be6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	b2da      	uxtb	r2, r3
 8008bec:	4b16      	ldr	r3, [pc, #88]	@ (8008c48 <BleGetBdAddress+0x80>)
 8008bee:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	0a1b      	lsrs	r3, r3, #8
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	4b14      	ldr	r3, [pc, #80]	@ (8008c48 <BleGetBdAddress+0x80>)
 8008bf8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	4b12      	ldr	r3, [pc, #72]	@ (8008c48 <BleGetBdAddress+0x80>)
 8008c00:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	b2da      	uxtb	r2, r3
 8008c06:	4b10      	ldr	r3, [pc, #64]	@ (8008c48 <BleGetBdAddress+0x80>)
 8008c08:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	0a1b      	lsrs	r3, r3, #8
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	4b0d      	ldr	r3, [pc, #52]	@ (8008c48 <BleGetBdAddress+0x80>)
 8008c12:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	0c1b      	lsrs	r3, r3, #16
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c48 <BleGetBdAddress+0x80>)
 8008c1c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8008c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8008c48 <BleGetBdAddress+0x80>)
 8008c20:	617b      	str	r3, [r7, #20]
 8008c22:	e00b      	b.n	8008c3c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8008c24:	2000      	movs	r0, #0
 8008c26:	f7ff fc45 	bl	80084b4 <OTP_Read>
 8008c2a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d002      	beq.n	8008c38 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	617b      	str	r3, [r7, #20]
 8008c36:	e001      	b.n	8008c3c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8008c38:	4b04      	ldr	r3, [pc, #16]	@ (8008c4c <BleGetBdAddress+0x84>)
 8008c3a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8008c3c:	697b      	ldr	r3, [r7, #20]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3718      	adds	r7, #24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20000368 	.word	0x20000368
 8008c4c:	08009aa8 	.word	0x08009aa8

08008c50 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008c56:	4b0a      	ldr	r3, [pc, #40]	@ (8008c80 <Adv_Cancel+0x30>)
 8008c58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8008c5c:	2b05      	cmp	r3, #5
 8008c5e:	d00a      	beq.n	8008c76 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008c60:	2392      	movs	r3, #146	@ 0x92
 8008c62:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8008c64:	f7fd face 	bl	8006204 <aci_gap_set_non_discoverable>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008c6c:	4b04      	ldr	r3, [pc, #16]	@ (8008c80 <Adv_Cancel+0x30>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop
}
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	20000370 	.word	0x20000370

08008c84 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8008c88:	2100      	movs	r1, #0
 8008c8a:	2001      	movs	r0, #1
 8008c8c:	f000 fc86 	bl	800959c <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 8008c90:	bf00      	nop
}
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 8008c94:	b480      	push	{r7}
 8008c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 8008c98:	bf00      	nop
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8008ca2:	b580      	push	{r7, lr}
 8008ca4:	b082      	sub	sp, #8
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008caa:	2100      	movs	r1, #0
 8008cac:	2002      	movs	r0, #2
 8008cae:	f000 fc75 	bl	800959c <UTIL_SEQ_SetTask>

  return;
 8008cb2:	bf00      	nop
}
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8008cba:	b580      	push	{r7, lr}
 8008cbc:	b082      	sub	sp, #8
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	f000 fcd6 	bl	8009674 <UTIL_SEQ_SetEvt>

  return;
 8008cc8:	bf00      	nop
}
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008cd8:	2001      	movs	r0, #1
 8008cda:	f000 fceb 	bl	80096b4 <UTIL_SEQ_WaitEvt>

  return;
 8008cde:	bf00      	nop
}
 8008ce0:	3708      	adds	r7, #8
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8008ce6:	b580      	push	{r7, lr}
 8008ce8:	b084      	sub	sp, #16
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fd4b 	bl	8007794 <SVCCTL_UserEvtRx>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008d02:	7afb      	ldrb	r3, [r7, #11]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8008d0e:	e003      	b.n	8008d18 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	701a      	strb	r2, [r3, #0]
  return;
 8008d16:	bf00      	nop
}
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}

08008d1e <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b084      	sub	sp, #16
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	4603      	mov	r3, r0
 8008d26:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d002      	beq.n	8008d34 <BLE_StatusNot+0x16>
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d006      	beq.n	8008d40 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8008d32:	e00b      	b.n	8008d4c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008d34:	2307      	movs	r3, #7
 8008d36:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f000 fc5b 	bl	80095f4 <UTIL_SEQ_PauseTask>
      break;
 8008d3e:	e005      	b.n	8008d4c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008d40:	2307      	movs	r3, #7
 8008d42:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 fc75 	bl	8009634 <UTIL_SEQ_ResumeTask>
      break;
 8008d4a:	bf00      	nop
  }

  return;
 8008d4c:	bf00      	nop
}
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d006      	beq.n	8008d72 <P2PS_STM_App_Notification+0x1e>
 8008d64:	2b03      	cmp	r3, #3
 8008d66:	dc09      	bgt.n	8008d7c <P2PS_STM_App_Notification+0x28>
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d009      	beq.n	8008d80 <P2PS_STM_App_Notification+0x2c>
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d009      	beq.n	8008d84 <P2PS_STM_App_Notification+0x30>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8008d70:	e004      	b.n	8008d7c <P2PS_STM_App_Notification+0x28>
    	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8008d72:	2110      	movs	r1, #16
 8008d74:	4806      	ldr	r0, [pc, #24]	@ (8008d90 <P2PS_STM_App_Notification+0x3c>)
 8008d76:	f7fa f9df 	bl	8003138 <HAL_GPIO_TogglePin>
      break;
 8008d7a:	e004      	b.n	8008d86 <P2PS_STM_App_Notification+0x32>
      break;
 8008d7c:	bf00      	nop
 8008d7e:	e002      	b.n	8008d86 <P2PS_STM_App_Notification+0x32>
      break;
 8008d80:	bf00      	nop
 8008d82:	e000      	b.n	8008d86 <P2PS_STM_App_Notification+0x32>
      break;
 8008d84:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8008d86:	bf00      	nop
}
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
 8008d8e:	bf00      	nop
 8008d90:	48000400 	.word	0x48000400

08008d94 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b082      	sub	sp, #8
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	781b      	ldrb	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <P2PS_APP_Notification+0x16>
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d006      	beq.n	8008db6 <P2PS_APP_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8008da8:	e00b      	b.n	8008dc2 <P2PS_APP_Notification+0x2e>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8008daa:	2201      	movs	r2, #1
 8008dac:	2120      	movs	r1, #32
 8008dae:	4807      	ldr	r0, [pc, #28]	@ (8008dcc <P2PS_APP_Notification+0x38>)
 8008db0:	f7fa f9aa 	bl	8003108 <HAL_GPIO_WritePin>
    break;
 8008db4:	e005      	b.n	8008dc2 <P2PS_APP_Notification+0x2e>
    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8008db6:	2200      	movs	r2, #0
 8008db8:	2120      	movs	r1, #32
 8008dba:	4804      	ldr	r0, [pc, #16]	@ (8008dcc <P2PS_APP_Notification+0x38>)
 8008dbc:	f7fa f9a4 	bl	8003108 <HAL_GPIO_WritePin>
    break;
 8008dc0:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8008dc2:	bf00      	nop
}
 8008dc4:	3708      	adds	r7, #8
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	48000400 	.word	0x48000400

08008dd0 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 8008dd4:	bf00      	nop
}
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <LL_PWR_EnableBootC2>:
{
 8008de0:	b480      	push	{r7}
 8008de2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008de4:	4b05      	ldr	r3, [pc, #20]	@ (8008dfc <LL_PWR_EnableBootC2+0x1c>)
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	4a04      	ldr	r2, [pc, #16]	@ (8008dfc <LL_PWR_EnableBootC2+0x1c>)
 8008dea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dee:	60d3      	str	r3, [r2, #12]
}
 8008df0:	bf00      	nop
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	58000400 	.word	0x58000400

08008e00 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8008e08:	4b06      	ldr	r3, [pc, #24]	@ (8008e24 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008e0a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8008e0e:	4905      	ldr	r1, [pc, #20]	@ (8008e24 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8008e18:	bf00      	nop
 8008e1a:	370c      	adds	r7, #12
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e22:	4770      	bx	lr
 8008e24:	58000800 	.word	0x58000800

08008e28 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008e30:	4b05      	ldr	r3, [pc, #20]	@ (8008e48 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008e32:	6a1a      	ldr	r2, [r3, #32]
 8008e34:	4904      	ldr	r1, [pc, #16]	@ (8008e48 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	620b      	str	r3, [r1, #32]
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr
 8008e48:	58000800 	.word	0x58000800

08008e4c <LL_AHB3_GRP1_EnableClock>:
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008e54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008e70:	68fb      	ldr	r3, [r7, #12]
}
 8008e72:	bf00      	nop
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b085      	sub	sp, #20
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e8a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008e8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8008e9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e9e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
}
 8008eaa:	bf00      	nop
 8008eac:	3714      	adds	r7, #20
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb4:	4770      	bx	lr

08008eb6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	601a      	str	r2, [r3, #0]
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed4:	4770      	bx	lr

08008ed6 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8008ed6:	b480      	push	{r7}
 8008ed8:	b083      	sub	sp, #12
 8008eda:	af00      	add	r7, sp, #0
 8008edc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f043 0201 	orr.w	r2, r3, #1
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	041b      	lsls	r3, r3, #16
 8008f08:	43db      	mvns	r3, r3
 8008f0a:	401a      	ands	r2, r3
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	605a      	str	r2, [r3, #4]
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685a      	ldr	r2, [r3, #4]
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	041b      	lsls	r3, r3, #16
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	605a      	str	r2, [r3, #4]
}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	43db      	mvns	r3, r3
 8008f52:	401a      	ands	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	605a      	str	r2, [r3, #4]
}
 8008f58:	bf00      	nop
 8008f5a:	370c      	adds	r7, #12
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr

08008f64 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008f64:	b480      	push	{r7}
 8008f66:	b083      	sub	sp, #12
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	683a      	ldr	r2, [r7, #0]
 8008f72:	609a      	str	r2, [r3, #8]
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b083      	sub	sp, #12
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	041a      	lsls	r2, r3, #16
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	609a      	str	r2, [r3, #8]
}
 8008f92:	bf00      	nop
 8008f94:	370c      	adds	r7, #12
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b083      	sub	sp, #12
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	4013      	ands	r3, r2
 8008fb0:	683a      	ldr	r2, [r7, #0]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d101      	bne.n	8008fba <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e000      	b.n	8008fbc <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	69da      	ldr	r2, [r3, #28]
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	683a      	ldr	r2, [r7, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d101      	bne.n	8008fe4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e000      	b.n	8008fe6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	370c      	adds	r7, #12
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
	...

08008ff4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008ff8:	2102      	movs	r1, #2
 8008ffa:	4818      	ldr	r0, [pc, #96]	@ (800905c <HW_IPCC_Rx_Handler+0x68>)
 8008ffc:	f7ff ffe4 	bl	8008fc8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <HW_IPCC_Rx_Handler+0x24>
 8009006:	4b15      	ldr	r3, [pc, #84]	@ (800905c <HW_IPCC_Rx_Handler+0x68>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	f003 0302 	and.w	r3, r3, #2
 800900e:	2b00      	cmp	r3, #0
 8009010:	d102      	bne.n	8009018 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009012:	f000 f8d5 	bl	80091c0 <HW_IPCC_SYS_EvtHandler>
 8009016:	e01e      	b.n	8009056 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8009018:	2101      	movs	r1, #1
 800901a:	4810      	ldr	r0, [pc, #64]	@ (800905c <HW_IPCC_Rx_Handler+0x68>)
 800901c:	f7ff ffd4 	bl	8008fc8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d008      	beq.n	8009038 <HW_IPCC_Rx_Handler+0x44>
 8009026:	4b0d      	ldr	r3, [pc, #52]	@ (800905c <HW_IPCC_Rx_Handler+0x68>)
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d102      	bne.n	8009038 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8009032:	f000 f889 	bl	8009148 <HW_IPCC_BLE_EvtHandler>
 8009036:	e00e      	b.n	8009056 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8009038:	2108      	movs	r1, #8
 800903a:	4808      	ldr	r0, [pc, #32]	@ (800905c <HW_IPCC_Rx_Handler+0x68>)
 800903c:	f7ff ffc4 	bl	8008fc8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d008      	beq.n	8009058 <HW_IPCC_Rx_Handler+0x64>
 8009046:	4b05      	ldr	r3, [pc, #20]	@ (800905c <HW_IPCC_Rx_Handler+0x68>)
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f003 0308 	and.w	r3, r3, #8
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8009052:	f000 f901 	bl	8009258 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8009056:	bf00      	nop
 8009058:	bf00      	nop
}
 800905a:	bd80      	pop	{r7, pc}
 800905c:	58000c00 	.word	0x58000c00

08009060 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8009064:	2102      	movs	r1, #2
 8009066:	4818      	ldr	r0, [pc, #96]	@ (80090c8 <HW_IPCC_Tx_Handler+0x68>)
 8009068:	f7ff ff99 	bl	8008f9e <LL_C1_IPCC_IsActiveFlag_CHx>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d108      	bne.n	8009084 <HW_IPCC_Tx_Handler+0x24>
 8009072:	4b15      	ldr	r3, [pc, #84]	@ (80090c8 <HW_IPCC_Tx_Handler+0x68>)
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800907e:	f000 f893 	bl	80091a8 <HW_IPCC_SYS_CmdEvtHandler>
 8009082:	e01e      	b.n	80090c2 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009084:	2108      	movs	r1, #8
 8009086:	4810      	ldr	r0, [pc, #64]	@ (80090c8 <HW_IPCC_Tx_Handler+0x68>)
 8009088:	f7ff ff89 	bl	8008f9e <LL_C1_IPCC_IsActiveFlag_CHx>
 800908c:	4603      	mov	r3, r0
 800908e:	2b00      	cmp	r3, #0
 8009090:	d108      	bne.n	80090a4 <HW_IPCC_Tx_Handler+0x44>
 8009092:	4b0d      	ldr	r3, [pc, #52]	@ (80090c8 <HW_IPCC_Tx_Handler+0x68>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800909e:	f000 f8bd 	bl	800921c <HW_IPCC_MM_FreeBufHandler>
 80090a2:	e00e      	b.n	80090c2 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80090a4:	2120      	movs	r1, #32
 80090a6:	4808      	ldr	r0, [pc, #32]	@ (80090c8 <HW_IPCC_Tx_Handler+0x68>)
 80090a8:	f7ff ff79 	bl	8008f9e <LL_C1_IPCC_IsActiveFlag_CHx>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d108      	bne.n	80090c4 <HW_IPCC_Tx_Handler+0x64>
 80090b2:	4b05      	ldr	r3, [pc, #20]	@ (80090c8 <HW_IPCC_Tx_Handler+0x68>)
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d102      	bne.n	80090c4 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80090be:	f000 f84f 	bl	8009160 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80090c2:	bf00      	nop
 80090c4:	bf00      	nop
}
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	58000c00 	.word	0x58000c00

080090cc <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80090d0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80090d4:	f7ff fed3 	bl	8008e7e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80090d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80090dc:	f7ff fea4 	bl	8008e28 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80090e0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80090e4:	f7ff fe8c 	bl	8008e00 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80090e8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80090ea:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80090ec:	f7ff fe78 	bl	8008de0 <LL_PWR_EnableBootC2>

  return;
 80090f0:	bf00      	nop
}
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80090f8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80090fc:	f7ff fea6 	bl	8008e4c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009100:	4806      	ldr	r0, [pc, #24]	@ (800911c <HW_IPCC_Init+0x28>)
 8009102:	f7ff fee8 	bl	8008ed6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009106:	4805      	ldr	r0, [pc, #20]	@ (800911c <HW_IPCC_Init+0x28>)
 8009108:	f7ff fed5 	bl	8008eb6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800910c:	202c      	movs	r0, #44	@ 0x2c
 800910e:	f7f9 fd78 	bl	8002c02 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009112:	202d      	movs	r0, #45	@ 0x2d
 8009114:	f7f9 fd75 	bl	8002c02 <HAL_NVIC_EnableIRQ>

  return;
 8009118:	bf00      	nop
}
 800911a:	bd80      	pop	{r7, pc}
 800911c:	58000c00 	.word	0x58000c00

08009120 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8009120:	b580      	push	{r7, lr}
 8009122:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009124:	2101      	movs	r1, #1
 8009126:	4802      	ldr	r0, [pc, #8]	@ (8009130 <HW_IPCC_BLE_Init+0x10>)
 8009128:	f7ff ff0a 	bl	8008f40 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800912c:	bf00      	nop
}
 800912e:	bd80      	pop	{r7, pc}
 8009130:	58000c00 	.word	0x58000c00

08009134 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8009138:	2101      	movs	r1, #1
 800913a:	4802      	ldr	r0, [pc, #8]	@ (8009144 <HW_IPCC_BLE_SendCmd+0x10>)
 800913c:	f7ff ff20 	bl	8008f80 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009140:	bf00      	nop
}
 8009142:	bd80      	pop	{r7, pc}
 8009144:	58000c00 	.word	0x58000c00

08009148 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800914c:	f7fe fffa 	bl	8008144 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009150:	2101      	movs	r1, #1
 8009152:	4802      	ldr	r0, [pc, #8]	@ (800915c <HW_IPCC_BLE_EvtHandler+0x14>)
 8009154:	f7ff ff06 	bl	8008f64 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009158:	bf00      	nop
}
 800915a:	bd80      	pop	{r7, pc}
 800915c:	58000c00 	.word	0x58000c00

08009160 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009160:	b580      	push	{r7, lr}
 8009162:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009164:	2120      	movs	r1, #32
 8009166:	4803      	ldr	r0, [pc, #12]	@ (8009174 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009168:	f7ff fed8 	bl	8008f1c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800916c:	f7ff f81a 	bl	80081a4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009170:	bf00      	nop
}
 8009172:	bd80      	pop	{r7, pc}
 8009174:	58000c00 	.word	0x58000c00

08009178 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009178:	b580      	push	{r7, lr}
 800917a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800917c:	2102      	movs	r1, #2
 800917e:	4802      	ldr	r0, [pc, #8]	@ (8009188 <HW_IPCC_SYS_Init+0x10>)
 8009180:	f7ff fede 	bl	8008f40 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009184:	bf00      	nop
}
 8009186:	bd80      	pop	{r7, pc}
 8009188:	58000c00 	.word	0x58000c00

0800918c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009190:	2102      	movs	r1, #2
 8009192:	4804      	ldr	r0, [pc, #16]	@ (80091a4 <HW_IPCC_SYS_SendCmd+0x18>)
 8009194:	f7ff fef4 	bl	8008f80 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009198:	2102      	movs	r1, #2
 800919a:	4802      	ldr	r0, [pc, #8]	@ (80091a4 <HW_IPCC_SYS_SendCmd+0x18>)
 800919c:	f7ff feab 	bl	8008ef6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80091a0:	bf00      	nop
}
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	58000c00 	.word	0x58000c00

080091a8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80091ac:	2102      	movs	r1, #2
 80091ae:	4803      	ldr	r0, [pc, #12]	@ (80091bc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80091b0:	f7ff feb4 	bl	8008f1c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80091b4:	f7ff f846 	bl	8008244 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80091b8:	bf00      	nop
}
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	58000c00 	.word	0x58000c00

080091c0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80091c4:	f7ff f854 	bl	8008270 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80091c8:	2102      	movs	r1, #2
 80091ca:	4802      	ldr	r0, [pc, #8]	@ (80091d4 <HW_IPCC_SYS_EvtHandler+0x14>)
 80091cc:	f7ff feca 	bl	8008f64 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80091d0:	bf00      	nop
}
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	58000c00 	.word	0x58000c00

080091d8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b082      	sub	sp, #8
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80091e0:	2108      	movs	r1, #8
 80091e2:	480c      	ldr	r0, [pc, #48]	@ (8009214 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80091e4:	f7ff fedb 	bl	8008f9e <LL_C1_IPCC_IsActiveFlag_CHx>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d007      	beq.n	80091fe <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80091ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009218 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80091f4:	2108      	movs	r1, #8
 80091f6:	4807      	ldr	r0, [pc, #28]	@ (8009214 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80091f8:	f7ff fe7d 	bl	8008ef6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80091fc:	e006      	b.n	800920c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009202:	2108      	movs	r1, #8
 8009204:	4803      	ldr	r0, [pc, #12]	@ (8009214 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009206:	f7ff febb 	bl	8008f80 <LL_C1_IPCC_SetFlag_CHx>
  return;
 800920a:	bf00      	nop
}
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	58000c00 	.word	0x58000c00
 8009218:	200003fc 	.word	0x200003fc

0800921c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009220:	2108      	movs	r1, #8
 8009222:	4806      	ldr	r0, [pc, #24]	@ (800923c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009224:	f7ff fe7a 	bl	8008f1c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009228:	4b05      	ldr	r3, [pc, #20]	@ (8009240 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800922e:	2108      	movs	r1, #8
 8009230:	4802      	ldr	r0, [pc, #8]	@ (800923c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009232:	f7ff fea5 	bl	8008f80 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009236:	bf00      	nop
}
 8009238:	bd80      	pop	{r7, pc}
 800923a:	bf00      	nop
 800923c:	58000c00 	.word	0x58000c00
 8009240:	200003fc 	.word	0x200003fc

08009244 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009248:	2108      	movs	r1, #8
 800924a:	4802      	ldr	r0, [pc, #8]	@ (8009254 <HW_IPCC_TRACES_Init+0x10>)
 800924c:	f7ff fe78 	bl	8008f40 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009250:	bf00      	nop
}
 8009252:	bd80      	pop	{r7, pc}
 8009254:	58000c00 	.word	0x58000c00

08009258 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800925c:	f7ff f8b0 	bl	80083c0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009260:	2108      	movs	r1, #8
 8009262:	4802      	ldr	r0, [pc, #8]	@ (800926c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009264:	f7ff fe7e 	bl	8008f64 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009268:	bf00      	nop
}
 800926a:	bd80      	pop	{r7, pc}
 800926c:	58000c00 	.word	0x58000c00

08009270 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8009270:	b480      	push	{r7}
 8009272:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009274:	4b05      	ldr	r3, [pc, #20]	@ (800928c <UTIL_LPM_Init+0x1c>)
 8009276:	2200      	movs	r2, #0
 8009278:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800927a:	4b05      	ldr	r3, [pc, #20]	@ (8009290 <UTIL_LPM_Init+0x20>)
 800927c:	2200      	movs	r2, #0
 800927e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009280:	bf00      	nop
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	20000400 	.word	0x20000400
 8009290:	20000404 	.word	0x20000404

08009294 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	460b      	mov	r3, r1
 800929e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092a0:	f3ef 8310 	mrs	r3, PRIMASK
 80092a4:	613b      	str	r3, [r7, #16]
  return(result);
 80092a6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80092a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80092aa:	b672      	cpsid	i
}
 80092ac:	bf00      	nop
  
  switch(state)
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d008      	beq.n	80092c6 <UTIL_LPM_SetOffMode+0x32>
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d10e      	bne.n	80092d6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80092b8:	4b0d      	ldr	r3, [pc, #52]	@ (80092f0 <UTIL_LPM_SetOffMode+0x5c>)
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4313      	orrs	r3, r2
 80092c0:	4a0b      	ldr	r2, [pc, #44]	@ (80092f0 <UTIL_LPM_SetOffMode+0x5c>)
 80092c2:	6013      	str	r3, [r2, #0]
      break;
 80092c4:	e008      	b.n	80092d8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	43da      	mvns	r2, r3
 80092ca:	4b09      	ldr	r3, [pc, #36]	@ (80092f0 <UTIL_LPM_SetOffMode+0x5c>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4013      	ands	r3, r2
 80092d0:	4a07      	ldr	r2, [pc, #28]	@ (80092f0 <UTIL_LPM_SetOffMode+0x5c>)
 80092d2:	6013      	str	r3, [r2, #0]
      break;
 80092d4:	e000      	b.n	80092d8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80092d6:	bf00      	nop
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f383 8810 	msr	PRIMASK, r3
}
 80092e2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80092e4:	bf00      	nop
 80092e6:	371c      	adds	r7, #28
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr
 80092f0:	20000404 	.word	0x20000404

080092f4 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092fa:	f3ef 8310 	mrs	r3, PRIMASK
 80092fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8009300:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8009302:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8009304:	b672      	cpsid	i
}
 8009306:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8009308:	4b12      	ldr	r3, [pc, #72]	@ (8009354 <UTIL_LPM_EnterLowPower+0x60>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d006      	beq.n	800931e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8009310:	4b11      	ldr	r3, [pc, #68]	@ (8009358 <UTIL_LPM_EnterLowPower+0x64>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8009316:	4b10      	ldr	r3, [pc, #64]	@ (8009358 <UTIL_LPM_EnterLowPower+0x64>)
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	4798      	blx	r3
 800931c:	e010      	b.n	8009340 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800931e:	4b0f      	ldr	r3, [pc, #60]	@ (800935c <UTIL_LPM_EnterLowPower+0x68>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d006      	beq.n	8009334 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8009326:	4b0c      	ldr	r3, [pc, #48]	@ (8009358 <UTIL_LPM_EnterLowPower+0x64>)
 8009328:	689b      	ldr	r3, [r3, #8]
 800932a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800932c:	4b0a      	ldr	r3, [pc, #40]	@ (8009358 <UTIL_LPM_EnterLowPower+0x64>)
 800932e:	68db      	ldr	r3, [r3, #12]
 8009330:	4798      	blx	r3
 8009332:	e005      	b.n	8009340 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8009334:	4b08      	ldr	r3, [pc, #32]	@ (8009358 <UTIL_LPM_EnterLowPower+0x64>)
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800933a:	4b07      	ldr	r3, [pc, #28]	@ (8009358 <UTIL_LPM_EnterLowPower+0x64>)
 800933c:	695b      	ldr	r3, [r3, #20]
 800933e:	4798      	blx	r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f383 8810 	msr	PRIMASK, r3
}
 800934a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	20000400 	.word	0x20000400
 8009358:	08009a10 	.word	0x08009a10
 800935c:	20000404 	.word	0x20000404

08009360 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b090      	sub	sp, #64	@ 0x40
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8009368:	4b73      	ldr	r3, [pc, #460]	@ (8009538 <UTIL_SEQ_Run+0x1d8>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800936e:	4b72      	ldr	r3, [pc, #456]	@ (8009538 <UTIL_SEQ_Run+0x1d8>)
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4013      	ands	r3, r2
 8009376:	4a70      	ldr	r2, [pc, #448]	@ (8009538 <UTIL_SEQ_Run+0x1d8>)
 8009378:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800937a:	4b70      	ldr	r3, [pc, #448]	@ (800953c <UTIL_SEQ_Run+0x1dc>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8009380:	4b6f      	ldr	r3, [pc, #444]	@ (8009540 <UTIL_SEQ_Run+0x1e0>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8009386:	4b6f      	ldr	r3, [pc, #444]	@ (8009544 <UTIL_SEQ_Run+0x1e4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800938c:	4b6e      	ldr	r3, [pc, #440]	@ (8009548 <UTIL_SEQ_Run+0x1e8>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8009392:	e08d      	b.n	80094b0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8009394:	2300      	movs	r3, #0
 8009396:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8009398:	e002      	b.n	80093a0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800939a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800939c:	3301      	adds	r3, #1
 800939e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80093a0:	4a6a      	ldr	r2, [pc, #424]	@ (800954c <UTIL_SEQ_Run+0x1ec>)
 80093a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093a4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80093a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093aa:	401a      	ands	r2, r3
 80093ac:	4b62      	ldr	r3, [pc, #392]	@ (8009538 <UTIL_SEQ_Run+0x1d8>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4013      	ands	r3, r2
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d0f1      	beq.n	800939a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80093b6:	4a65      	ldr	r2, [pc, #404]	@ (800954c <UTIL_SEQ_Run+0x1ec>)
 80093b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80093be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c0:	401a      	ands	r2, r3
 80093c2:	4b5d      	ldr	r3, [pc, #372]	@ (8009538 <UTIL_SEQ_Run+0x1d8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4013      	ands	r3, r2
 80093c8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80093ca:	4a60      	ldr	r2, [pc, #384]	@ (800954c <UTIL_SEQ_Run+0x1ec>)
 80093cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	4413      	add	r3, r2
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d6:	4013      	ands	r3, r2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d106      	bne.n	80093ea <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80093dc:	4a5b      	ldr	r2, [pc, #364]	@ (800954c <UTIL_SEQ_Run+0x1ec>)
 80093de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093e0:	00db      	lsls	r3, r3, #3
 80093e2:	4413      	add	r3, r2
 80093e4:	f04f 32ff 	mov.w	r2, #4294967295
 80093e8:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80093ea:	4a58      	ldr	r2, [pc, #352]	@ (800954c <UTIL_SEQ_Run+0x1ec>)
 80093ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	4413      	add	r3, r2
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f6:	4013      	ands	r3, r2
 80093f8:	4618      	mov	r0, r3
 80093fa:	f000 f9b3 	bl	8009764 <SEQ_BitPosition>
 80093fe:	4603      	mov	r3, r0
 8009400:	461a      	mov	r2, r3
 8009402:	4b53      	ldr	r3, [pc, #332]	@ (8009550 <UTIL_SEQ_Run+0x1f0>)
 8009404:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009406:	4a51      	ldr	r2, [pc, #324]	@ (800954c <UTIL_SEQ_Run+0x1ec>)
 8009408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800940a:	00db      	lsls	r3, r3, #3
 800940c:	4413      	add	r3, r2
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	4b4f      	ldr	r3, [pc, #316]	@ (8009550 <UTIL_SEQ_Run+0x1f0>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2101      	movs	r1, #1
 8009416:	fa01 f303 	lsl.w	r3, r1, r3
 800941a:	43db      	mvns	r3, r3
 800941c:	401a      	ands	r2, r3
 800941e:	494b      	ldr	r1, [pc, #300]	@ (800954c <UTIL_SEQ_Run+0x1ec>)
 8009420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009422:	00db      	lsls	r3, r3, #3
 8009424:	440b      	add	r3, r1
 8009426:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009428:	f3ef 8310 	mrs	r3, PRIMASK
 800942c:	61bb      	str	r3, [r7, #24]
  return(result);
 800942e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009430:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8009432:	b672      	cpsid	i
}
 8009434:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8009436:	4b46      	ldr	r3, [pc, #280]	@ (8009550 <UTIL_SEQ_Run+0x1f0>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	2201      	movs	r2, #1
 800943c:	fa02 f303 	lsl.w	r3, r2, r3
 8009440:	43da      	mvns	r2, r3
 8009442:	4b3e      	ldr	r3, [pc, #248]	@ (800953c <UTIL_SEQ_Run+0x1dc>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4013      	ands	r3, r2
 8009448:	4a3c      	ldr	r2, [pc, #240]	@ (800953c <UTIL_SEQ_Run+0x1dc>)
 800944a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800944c:	2302      	movs	r3, #2
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009450:	e013      	b.n	800947a <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8009452:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009454:	3b01      	subs	r3, #1
 8009456:	4a3d      	ldr	r2, [pc, #244]	@ (800954c <UTIL_SEQ_Run+0x1ec>)
 8009458:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800945c:	4b3c      	ldr	r3, [pc, #240]	@ (8009550 <UTIL_SEQ_Run+0x1f0>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2201      	movs	r2, #1
 8009462:	fa02 f303 	lsl.w	r3, r2, r3
 8009466:	43da      	mvns	r2, r3
 8009468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800946a:	3b01      	subs	r3, #1
 800946c:	400a      	ands	r2, r1
 800946e:	4937      	ldr	r1, [pc, #220]	@ (800954c <UTIL_SEQ_Run+0x1ec>)
 8009470:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8009474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009476:	3b01      	subs	r3, #1
 8009478:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800947a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1e8      	bne.n	8009452 <UTIL_SEQ_Run+0xf2>
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	f383 8810 	msr	PRIMASK, r3
}
 800948a:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800948c:	4b30      	ldr	r3, [pc, #192]	@ (8009550 <UTIL_SEQ_Run+0x1f0>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a30      	ldr	r2, [pc, #192]	@ (8009554 <UTIL_SEQ_Run+0x1f4>)
 8009492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009496:	4798      	blx	r3

    local_taskset = TaskSet;
 8009498:	4b28      	ldr	r3, [pc, #160]	@ (800953c <UTIL_SEQ_Run+0x1dc>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 800949e:	4b28      	ldr	r3, [pc, #160]	@ (8009540 <UTIL_SEQ_Run+0x1e0>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80094a4:	4b27      	ldr	r3, [pc, #156]	@ (8009544 <UTIL_SEQ_Run+0x1e4>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80094aa:	4b27      	ldr	r3, [pc, #156]	@ (8009548 <UTIL_SEQ_Run+0x1e8>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80094b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b4:	401a      	ands	r2, r3
 80094b6:	4b20      	ldr	r3, [pc, #128]	@ (8009538 <UTIL_SEQ_Run+0x1d8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4013      	ands	r3, r2
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d005      	beq.n	80094cc <UTIL_SEQ_Run+0x16c>
 80094c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094c4:	4013      	ands	r3, r2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f43f af64 	beq.w	8009394 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80094cc:	4b20      	ldr	r3, [pc, #128]	@ (8009550 <UTIL_SEQ_Run+0x1f0>)
 80094ce:	f04f 32ff 	mov.w	r2, #4294967295
 80094d2:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80094d4:	f000 f938 	bl	8009748 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094d8:	f3ef 8310 	mrs	r3, PRIMASK
 80094dc:	613b      	str	r3, [r7, #16]
  return(result);
 80094de:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80094e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80094e2:	b672      	cpsid	i
}
 80094e4:	bf00      	nop
  local_taskset = TaskSet;
 80094e6:	4b15      	ldr	r3, [pc, #84]	@ (800953c <UTIL_SEQ_Run+0x1dc>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80094ec:	4b14      	ldr	r3, [pc, #80]	@ (8009540 <UTIL_SEQ_Run+0x1e0>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80094f2:	4b14      	ldr	r3, [pc, #80]	@ (8009544 <UTIL_SEQ_Run+0x1e4>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80094f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	401a      	ands	r2, r3
 80094fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009538 <UTIL_SEQ_Run+0x1d8>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4013      	ands	r3, r2
 8009504:	2b00      	cmp	r3, #0
 8009506:	d107      	bne.n	8009518 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8009508:	4b0f      	ldr	r3, [pc, #60]	@ (8009548 <UTIL_SEQ_Run+0x1e8>)
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950e:	4013      	ands	r3, r2
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8009514:	f7f7 f879 	bl	800060a <UTIL_SEQ_Idle>
 8009518:	69fb      	ldr	r3, [r7, #28]
 800951a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f383 8810 	msr	PRIMASK, r3
}
 8009522:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8009524:	f000 f917 	bl	8009756 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8009528:	4a03      	ldr	r2, [pc, #12]	@ (8009538 <UTIL_SEQ_Run+0x1d8>)
 800952a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952c:	6013      	str	r3, [r2, #0]

  return;
 800952e:	bf00      	nop
}
 8009530:	3740      	adds	r7, #64	@ 0x40
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	20000038 	.word	0x20000038
 800953c:	20000408 	.word	0x20000408
 8009540:	2000040c 	.word	0x2000040c
 8009544:	20000034 	.word	0x20000034
 8009548:	20000410 	.word	0x20000410
 800954c:	20000498 	.word	0x20000498
 8009550:	20000414 	.word	0x20000414
 8009554:	20000418 	.word	0x20000418

08009558 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009564:	f3ef 8310 	mrs	r3, PRIMASK
 8009568:	617b      	str	r3, [r7, #20]
  return(result);
 800956a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800956c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800956e:	b672      	cpsid	i
}
 8009570:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 f8f6 	bl	8009764 <SEQ_BitPosition>
 8009578:	4603      	mov	r3, r0
 800957a:	4619      	mov	r1, r3
 800957c:	4a06      	ldr	r2, [pc, #24]	@ (8009598 <UTIL_SEQ_RegTask+0x40>)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	f383 8810 	msr	PRIMASK, r3
}
 800958e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8009590:	bf00      	nop
}
 8009592:	3720      	adds	r7, #32
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	20000418 	.word	0x20000418

0800959c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800959c:	b480      	push	{r7}
 800959e:	b087      	sub	sp, #28
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095a6:	f3ef 8310 	mrs	r3, PRIMASK
 80095aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80095ac:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80095ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80095b0:	b672      	cpsid	i
}
 80095b2:	bf00      	nop

  TaskSet |= TaskId_bm;
 80095b4:	4b0d      	ldr	r3, [pc, #52]	@ (80095ec <UTIL_SEQ_SetTask+0x50>)
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	4a0b      	ldr	r2, [pc, #44]	@ (80095ec <UTIL_SEQ_SetTask+0x50>)
 80095be:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80095c0:	4a0b      	ldr	r2, [pc, #44]	@ (80095f0 <UTIL_SEQ_SetTask+0x54>)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	431a      	orrs	r2, r3
 80095cc:	4908      	ldr	r1, [pc, #32]	@ (80095f0 <UTIL_SEQ_SetTask+0x54>)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	f383 8810 	msr	PRIMASK, r3
}
 80095de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80095e0:	bf00      	nop
}
 80095e2:	371c      	adds	r7, #28
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	20000408 	.word	0x20000408
 80095f0:	20000498 	.word	0x20000498

080095f4 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095fc:	f3ef 8310 	mrs	r3, PRIMASK
 8009600:	60fb      	str	r3, [r7, #12]
  return(result);
 8009602:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009606:	b672      	cpsid	i
}
 8009608:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	43da      	mvns	r2, r3
 800960e:	4b08      	ldr	r3, [pc, #32]	@ (8009630 <UTIL_SEQ_PauseTask+0x3c>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4013      	ands	r3, r2
 8009614:	4a06      	ldr	r2, [pc, #24]	@ (8009630 <UTIL_SEQ_PauseTask+0x3c>)
 8009616:	6013      	str	r3, [r2, #0]
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	f383 8810 	msr	PRIMASK, r3
}
 8009622:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009624:	bf00      	nop
}
 8009626:	371c      	adds	r7, #28
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	20000034 	.word	0x20000034

08009634 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8009634:	b480      	push	{r7}
 8009636:	b087      	sub	sp, #28
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800963c:	f3ef 8310 	mrs	r3, PRIMASK
 8009640:	60fb      	str	r3, [r7, #12]
  return(result);
 8009642:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009644:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009646:	b672      	cpsid	i
}
 8009648:	bf00      	nop

  TaskMask |= TaskId_bm;
 800964a:	4b09      	ldr	r3, [pc, #36]	@ (8009670 <UTIL_SEQ_ResumeTask+0x3c>)
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4313      	orrs	r3, r2
 8009652:	4a07      	ldr	r2, [pc, #28]	@ (8009670 <UTIL_SEQ_ResumeTask+0x3c>)
 8009654:	6013      	str	r3, [r2, #0]
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	f383 8810 	msr	PRIMASK, r3
}
 8009660:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8009662:	bf00      	nop
}
 8009664:	371c      	adds	r7, #28
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	20000034 	.word	0x20000034

08009674 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800967c:	f3ef 8310 	mrs	r3, PRIMASK
 8009680:	60fb      	str	r3, [r7, #12]
  return(result);
 8009682:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8009684:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009686:	b672      	cpsid	i
}
 8009688:	bf00      	nop

  EvtSet |= EvtId_bm;
 800968a:	4b09      	ldr	r3, [pc, #36]	@ (80096b0 <UTIL_SEQ_SetEvt+0x3c>)
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4313      	orrs	r3, r2
 8009692:	4a07      	ldr	r2, [pc, #28]	@ (80096b0 <UTIL_SEQ_SetEvt+0x3c>)
 8009694:	6013      	str	r3, [r2, #0]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f383 8810 	msr	PRIMASK, r3
}
 80096a0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80096a2:	bf00      	nop
}
 80096a4:	371c      	adds	r7, #28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	2000040c 	.word	0x2000040c

080096b4 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b088      	sub	sp, #32
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80096bc:	4b1f      	ldr	r3, [pc, #124]	@ (800973c <UTIL_SEQ_WaitEvt+0x88>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80096c2:	4b1e      	ldr	r3, [pc, #120]	@ (800973c <UTIL_SEQ_WaitEvt+0x88>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096ca:	d102      	bne.n	80096d2 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80096cc:	2300      	movs	r3, #0
 80096ce:	61fb      	str	r3, [r7, #28]
 80096d0:	e005      	b.n	80096de <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80096d2:	4b1a      	ldr	r3, [pc, #104]	@ (800973c <UTIL_SEQ_WaitEvt+0x88>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2201      	movs	r2, #1
 80096d8:	fa02 f303 	lsl.w	r3, r2, r3
 80096dc:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80096de:	4b18      	ldr	r3, [pc, #96]	@ (8009740 <UTIL_SEQ_WaitEvt+0x8c>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80096e4:	4a16      	ldr	r2, [pc, #88]	@ (8009740 <UTIL_SEQ_WaitEvt+0x8c>)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80096ea:	e003      	b.n	80096f4 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80096ec:	6879      	ldr	r1, [r7, #4]
 80096ee:	69f8      	ldr	r0, [r7, #28]
 80096f0:	f7f6 ff91 	bl	8000616 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80096f4:	4b13      	ldr	r3, [pc, #76]	@ (8009744 <UTIL_SEQ_WaitEvt+0x90>)
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4013      	ands	r3, r2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0f5      	beq.n	80096ec <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8009700:	4a0e      	ldr	r2, [pc, #56]	@ (800973c <UTIL_SEQ_WaitEvt+0x88>)
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009706:	f3ef 8310 	mrs	r3, PRIMASK
 800970a:	60bb      	str	r3, [r7, #8]
  return(result);
 800970c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800970e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009710:	b672      	cpsid	i
}
 8009712:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	43da      	mvns	r2, r3
 8009718:	4b0a      	ldr	r3, [pc, #40]	@ (8009744 <UTIL_SEQ_WaitEvt+0x90>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4013      	ands	r3, r2
 800971e:	4a09      	ldr	r2, [pc, #36]	@ (8009744 <UTIL_SEQ_WaitEvt+0x90>)
 8009720:	6013      	str	r3, [r2, #0]
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f383 8810 	msr	PRIMASK, r3
}
 800972c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800972e:	4a04      	ldr	r2, [pc, #16]	@ (8009740 <UTIL_SEQ_WaitEvt+0x8c>)
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	6013      	str	r3, [r2, #0]
  return;
 8009734:	bf00      	nop
}
 8009736:	3720      	adds	r7, #32
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20000414 	.word	0x20000414
 8009740:	20000410 	.word	0x20000410
 8009744:	2000040c 	.word	0x2000040c

08009748 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8009748:	b480      	push	{r7}
 800974a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800974c:	bf00      	nop
}
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8009756:	b480      	push	{r7}
 8009758:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800975a:	bf00      	nop
}
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800977a:	d204      	bcs.n	8009786 <SEQ_BitPosition+0x22>
 800977c:	2310      	movs	r3, #16
 800977e:	73fb      	strb	r3, [r7, #15]
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	041b      	lsls	r3, r3, #16
 8009784:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800978c:	d205      	bcs.n	800979a <SEQ_BitPosition+0x36>
 800978e:	7bfb      	ldrb	r3, [r7, #15]
 8009790:	3308      	adds	r3, #8
 8009792:	73fb      	strb	r3, [r7, #15]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	021b      	lsls	r3, r3, #8
 8009798:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097a0:	d205      	bcs.n	80097ae <SEQ_BitPosition+0x4a>
 80097a2:	7bfb      	ldrb	r3, [r7, #15]
 80097a4:	3304      	adds	r3, #4
 80097a6:	73fb      	strb	r3, [r7, #15]
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	011b      	lsls	r3, r3, #4
 80097ac:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	0f1b      	lsrs	r3, r3, #28
 80097b2:	4a07      	ldr	r2, [pc, #28]	@ (80097d0 <SEQ_BitPosition+0x6c>)
 80097b4:	5cd2      	ldrb	r2, [r2, r3]
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	4413      	add	r3, r2
 80097ba:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	f1c3 031f 	rsb	r3, r3, #31
 80097c2:	b2db      	uxtb	r3, r3
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3714      	adds	r7, #20
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr
 80097d0:	08009ad8 	.word	0x08009ad8

080097d4 <memset>:
 80097d4:	4402      	add	r2, r0
 80097d6:	4603      	mov	r3, r0
 80097d8:	4293      	cmp	r3, r2
 80097da:	d100      	bne.n	80097de <memset+0xa>
 80097dc:	4770      	bx	lr
 80097de:	f803 1b01 	strb.w	r1, [r3], #1
 80097e2:	e7f9      	b.n	80097d8 <memset+0x4>

080097e4 <__libc_init_array>:
 80097e4:	b570      	push	{r4, r5, r6, lr}
 80097e6:	4d0d      	ldr	r5, [pc, #52]	@ (800981c <__libc_init_array+0x38>)
 80097e8:	4c0d      	ldr	r4, [pc, #52]	@ (8009820 <__libc_init_array+0x3c>)
 80097ea:	1b64      	subs	r4, r4, r5
 80097ec:	10a4      	asrs	r4, r4, #2
 80097ee:	2600      	movs	r6, #0
 80097f0:	42a6      	cmp	r6, r4
 80097f2:	d109      	bne.n	8009808 <__libc_init_array+0x24>
 80097f4:	4d0b      	ldr	r5, [pc, #44]	@ (8009824 <__libc_init_array+0x40>)
 80097f6:	4c0c      	ldr	r4, [pc, #48]	@ (8009828 <__libc_init_array+0x44>)
 80097f8:	f000 f826 	bl	8009848 <_init>
 80097fc:	1b64      	subs	r4, r4, r5
 80097fe:	10a4      	asrs	r4, r4, #2
 8009800:	2600      	movs	r6, #0
 8009802:	42a6      	cmp	r6, r4
 8009804:	d105      	bne.n	8009812 <__libc_init_array+0x2e>
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	f855 3b04 	ldr.w	r3, [r5], #4
 800980c:	4798      	blx	r3
 800980e:	3601      	adds	r6, #1
 8009810:	e7ee      	b.n	80097f0 <__libc_init_array+0xc>
 8009812:	f855 3b04 	ldr.w	r3, [r5], #4
 8009816:	4798      	blx	r3
 8009818:	3601      	adds	r6, #1
 800981a:	e7f2      	b.n	8009802 <__libc_init_array+0x1e>
 800981c:	08009af0 	.word	0x08009af0
 8009820:	08009af0 	.word	0x08009af0
 8009824:	08009af0 	.word	0x08009af0
 8009828:	08009af4 	.word	0x08009af4

0800982c <memcpy>:
 800982c:	440a      	add	r2, r1
 800982e:	4291      	cmp	r1, r2
 8009830:	f100 33ff 	add.w	r3, r0, #4294967295
 8009834:	d100      	bne.n	8009838 <memcpy+0xc>
 8009836:	4770      	bx	lr
 8009838:	b510      	push	{r4, lr}
 800983a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800983e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009842:	4291      	cmp	r1, r2
 8009844:	d1f9      	bne.n	800983a <memcpy+0xe>
 8009846:	bd10      	pop	{r4, pc}

08009848 <_init>:
 8009848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984a:	bf00      	nop
 800984c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984e:	bc08      	pop	{r3}
 8009850:	469e      	mov	lr, r3
 8009852:	4770      	bx	lr

08009854 <_fini>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	bf00      	nop
 8009858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985a:	bc08      	pop	{r3}
 800985c:	469e      	mov	lr, r3
 800985e:	4770      	bx	lr
