
LaunchTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008474  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  080085b0  080085b0  000095b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008838  08008838  00009838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008840  08008840  00009840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008844  08008844  00009844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000030  20000008  08008848  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 0000003d  20000038  08008878  0000a038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000078  080088b5  0000a078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  2000008c  080088c6  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  080088c6  0000a46c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000aa67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000b000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000b000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080088c6  0000a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0002d289  00000000  00000000  0000aa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000060ba  00000000  00000000  00037d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002a60  00000000  00000000  0003dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002092  00000000  00000000  00040840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027528  00000000  00000000  000428d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00030843  00000000  00000000  00069dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000d8353  00000000  00000000  0009a63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00172990  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000b1e4  00000000  00000000  001729d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006b  00000000  00000000  0017dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000008c 	.word	0x2000008c
 8000158:	00000000 	.word	0x00000000
 800015c:	08008598 	.word	0x08008598

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000090 	.word	0x20000090
 8000178:	08008598 	.word	0x08008598

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  APPD_GeneralConfig.STBY_DebugGpioaPinList = STBY_DebugGpioaPinList;
 8000192:	4b15      	ldr	r3, [pc, #84]	@ (80001e8 <APPD_EnableCPU2+0x5c>)
 8000194:	881a      	ldrh	r2, [r3, #0]
 8000196:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <APPD_EnableCPU2+0x60>)
 8000198:	809a      	strh	r2, [r3, #4]
  APPD_GeneralConfig.STBY_DebugGpiobPinList = STBY_DebugGpiobPinList;
 800019a:	4b15      	ldr	r3, [pc, #84]	@ (80001f0 <APPD_EnableCPU2+0x64>)
 800019c:	881a      	ldrh	r2, [r3, #0]
 800019e:	4b13      	ldr	r3, [pc, #76]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a0:	80da      	strh	r2, [r3, #6]
  APPD_GeneralConfig.STBY_DebugGpiocPinList = STBY_DebugGpiocPinList;
 80001a2:	4b14      	ldr	r3, [pc, #80]	@ (80001f4 <APPD_EnableCPU2+0x68>)
 80001a4:	881a      	ldrh	r2, [r3, #0]
 80001a6:	4b11      	ldr	r3, [pc, #68]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001a8:	811a      	strh	r2, [r3, #8]
  APPD_GeneralConfig.STBY_DtbGpioaPinList = STBY_DtbGpioaPinList;
 80001aa:	4b13      	ldr	r3, [pc, #76]	@ (80001f8 <APPD_EnableCPU2+0x6c>)
 80001ac:	881a      	ldrh	r2, [r3, #0]
 80001ae:	4b0f      	ldr	r3, [pc, #60]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b0:	815a      	strh	r2, [r3, #10]
  APPD_GeneralConfig.STBY_DtbGpiobPinList = STBY_DtbGpiobPinList;
 80001b2:	4b12      	ldr	r3, [pc, #72]	@ (80001fc <APPD_EnableCPU2+0x70>)
 80001b4:	881a      	ldrh	r2, [r3, #0]
 80001b6:	4b0d      	ldr	r3, [pc, #52]	@ (80001ec <APPD_EnableCPU2+0x60>)
 80001b8:	819a      	strh	r2, [r3, #12]

  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80001ba:	4b11      	ldr	r3, [pc, #68]	@ (8000200 <APPD_EnableCPU2+0x74>)
 80001bc:	1d3c      	adds	r4, r7, #4
 80001be:	461d      	mov	r5, r3
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001c8:	c403      	stmia	r4!, {r0, r1}
 80001ca:	8022      	strh	r2, [r4, #0]
 80001cc:	3402      	adds	r4, #2
 80001ce:	0c13      	lsrs	r3, r2, #16
 80001d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001d2:	f006 ff8b 	bl	80070ec <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	4618      	mov	r0, r3
 80001da:	f006 f9ee 	bl	80065ba <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001de:	bf00      	nop
}
 80001e0:	3720      	adds	r7, #32
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bdb0      	pop	{r4, r5, r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000008 	.word	0x20000008
 80001ec:	200301e8 	.word	0x200301e8
 80001f0:	2000000a 	.word	0x2000000a
 80001f4:	2000000c 	.word	0x2000000c
 80001f8:	2000000e 	.word	0x2000000e
 80001fc:	20000010 	.word	0x20000010
 8000200:	080085b0 	.word	0x080085b0

08000204 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800020c:	4b07      	ldr	r3, [pc, #28]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 800020e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000212:	f023 0207 	bic.w	r2, r3, #7
 8000216:	4905      	ldr	r1, [pc, #20]	@ (800022c <LL_C2_PWR_SetPowerMode+0x28>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4313      	orrs	r3, r2
 800021c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022a:	4770      	bx	lr
 800022c:	58000400 	.word	0x58000400

08000230 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000238:	4b06      	ldr	r3, [pc, #24]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 800023a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800023e:	4905      	ldr	r1, [pc, #20]	@ (8000254 <LL_EXTI_EnableIT_32_63+0x24>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4313      	orrs	r3, r2
 8000244:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	58000800 	.word	0x58000800

08000258 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8000260:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000264:	4a0a      	ldr	r2, [pc, #40]	@ (8000290 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8000266:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800026a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800026e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000272:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	021b      	lsls	r3, r3, #8
 800027a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800027e:	4313      	orrs	r3, r2
 8000280:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	cafecafe 	.word	0xcafecafe

08000294 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800029c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80002a0:	689b      	ldr	r3, [r3, #8]
 80002a2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80002a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	608b      	str	r3, [r1, #8]
}
 80002b0:	bf00      	nop
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ba:	4770      	bx	lr

080002bc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80002c0:	4b04      	ldr	r3, [pc, #16]	@ (80002d4 <LL_DBGMCU_GetDeviceID+0x18>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	e0042000 	.word	0xe0042000

080002d8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <LL_DBGMCU_GetRevisionID+0x18>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	b29b      	uxth	r3, r3
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e0042000 	.word	0xe0042000

080002f4 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	22ff      	movs	r2, #255	@ 0xff
 8000300:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800030e:	b480      	push	{r7}
 8000310:	b083      	sub	sp, #12
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	22ca      	movs	r2, #202	@ 0xca
 800031a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	2253      	movs	r2, #83	@ 0x53
 8000320:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr

0800032e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800032e:	b480      	push	{r7}
 8000330:	b083      	sub	sp, #12
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
 8000336:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	f023 0207 	bic.w	r2, r3, #7
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	431a      	orrs	r2, r3
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	609a      	str	r2, [r3, #8]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr

08000354 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <MX_APPE_Config+0x18>)
 800035a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800035e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000360:	f000 f81d 	bl	800039e <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000364:	f000 f822 	bl	80003ac <Config_HSE>

  return;
 8000368:	bf00      	nop
}
 800036a:	bd80      	pop	{r7, pc}
 800036c:	58004000 	.word	0x58004000

08000370 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000374:	f000 f82e 	bl	80003d4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8000378:	f000 f844 	bl	8000404 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800037c:	4903      	ldr	r1, [pc, #12]	@ (800038c <MX_APPE_Init+0x1c>)
 800037e:	2000      	movs	r0, #0
 8000380:	f000 fd6c 	bl	8000e5c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000384:	f000 f84e 	bl	8000424 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8000388:	bf00      	nop
}
 800038a:	bd80      	pop	{r7, pc}
 800038c:	200001d8 	.word	0x200001d8

08000390 <Init_Exti>:

void Init_Exti(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8000394:	2050      	movs	r0, #80	@ 0x50
 8000396:	f7ff ff4b 	bl	8000230 <LL_EXTI_EnableIT_32_63>

  return;
 800039a:	bf00      	nop
}
 800039c:	bd80      	pop	{r7, pc}

0800039e <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80003a2:	bf00      	nop
}
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr

080003ac <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80003b2:	2000      	movs	r0, #0
 80003b4:	f006 ff26 	bl	8007204 <OTP_Read>
 80003b8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d005      	beq.n	80003cc <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	799b      	ldrb	r3, [r3, #6]
 80003c4:	4618      	mov	r0, r3
 80003c6:	f7ff ff47 	bl	8000258 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80003ca:	bf00      	nop
 80003cc:	bf00      	nop
}
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <System_Init>:

static void System_Init(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  Init_Exti();
 80003d8:	f7ff ffda 	bl	8000390 <Init_Exti>

  Init_Rtc();
 80003dc:	f000 f802 	bl	80003e4 <Init_Rtc>

  return;
 80003e0:	bf00      	nop
}
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <Init_Rtc>:

static void Init_Rtc(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80003e8:	4805      	ldr	r0, [pc, #20]	@ (8000400 <Init_Rtc+0x1c>)
 80003ea:	f7ff ff90 	bl	800030e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80003ee:	2100      	movs	r1, #0
 80003f0:	4803      	ldr	r0, [pc, #12]	@ (8000400 <Init_Rtc+0x1c>)
 80003f2:	f7ff ff9c 	bl	800032e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80003f6:	4802      	ldr	r0, [pc, #8]	@ (8000400 <Init_Rtc+0x1c>)
 80003f8:	f7ff ff7c 	bl	80002f4 <LL_RTC_EnableWriteProtection>

  return;
 80003fc:	bf00      	nop
}
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	40002800 	.word	0x40002800

08000404 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000408:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800040c:	f7ff ff42 	bl	8000294 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8000410:	f007 fdd6 	bl	8007fc0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000414:	2004      	movs	r0, #4
 8000416:	f7ff fef5 	bl	8000204 <LL_C2_PWR_SetPowerMode>
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */
  /**
   * Active SRAM retention for standby support
   */
  HAL_PWREx_EnableSRAMRetention();
 800041a:	f002 fc83 	bl	8002d24 <HAL_PWREx_EnableSRAMRetention>

  return;
 800041e:	bf00      	nop
}
 8000420:	bd80      	pop	{r7, pc}
	...

08000424 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800042a:	f006 fca9 	bl	8006d80 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800042e:	4a11      	ldr	r2, [pc, #68]	@ (8000474 <appe_Tl_Init+0x50>)
 8000430:	2100      	movs	r1, #0
 8000432:	2008      	movs	r0, #8
 8000434:	f007 ff38 	bl	80082a8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000438:	4b0f      	ldr	r3, [pc, #60]	@ (8000478 <appe_Tl_Init+0x54>)
 800043a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800043c:	4b0f      	ldr	r3, [pc, #60]	@ (800047c <appe_Tl_Init+0x58>)
 800043e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000440:	463b      	mov	r3, r7
 8000442:	4619      	mov	r1, r3
 8000444:	480e      	ldr	r0, [pc, #56]	@ (8000480 <appe_Tl_Init+0x5c>)
 8000446:	f006 fb5d 	bl	8006b04 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <appe_Tl_Init+0x60>)
 800044c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800044e:	4b0e      	ldr	r3, [pc, #56]	@ (8000488 <appe_Tl_Init+0x64>)
 8000450:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8000452:	4b0e      	ldr	r3, [pc, #56]	@ (800048c <appe_Tl_Init+0x68>)
 8000454:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000456:	f240 533c 	movw	r3, #1340	@ 0x53c
 800045a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800045c:	f107 0308 	add.w	r3, r7, #8
 8000460:	4618      	mov	r0, r3
 8000462:	f006 fdcf 	bl	8007004 <TL_MM_Init>

  TL_Enable();
 8000466:	f006 fc85 	bl	8006d74 <TL_Enable>

  return;
 800046a:	bf00      	nop
}
 800046c:	3720      	adds	r7, #32
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	08006b3d 	.word	0x08006b3d
 8000478:	20030734 	.word	0x20030734
 800047c:	08000491 	.word	0x08000491
 8000480:	080004a9 	.word	0x080004a9
 8000484:	2003094c 	.word	0x2003094c
 8000488:	20030840 	.word	0x20030840
 800048c:	200301f8 	.word	0x200301f8

08000490 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	4603      	mov	r3, r0
 8000498:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800049a:	bf00      	nop
}
 800049c:	370c      	adds	r7, #12
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
	...

080004a8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	330b      	adds	r3, #11
 80004b6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80004b8:	69fb      	ldr	r3, [r7, #28]
 80004ba:	881b      	ldrh	r3, [r3, #0]
 80004bc:	b29b      	uxth	r3, r3
 80004be:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80004c2:	2b07      	cmp	r3, #7
 80004c4:	d81f      	bhi.n	8000506 <APPE_SysUserEvtRx+0x5e>
 80004c6:	a201      	add	r2, pc, #4	@ (adr r2, 80004cc <APPE_SysUserEvtRx+0x24>)
 80004c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004cc:	080004ed 	.word	0x080004ed
 80004d0:	080004ff 	.word	0x080004ff
 80004d4:	08000507 	.word	0x08000507
 80004d8:	08000507 	.word	0x08000507
 80004dc:	08000507 	.word	0x08000507
 80004e0:	08000507 	.word	0x08000507
 80004e4:	08000507 	.word	0x08000507
 80004e8:	08000507 	.word	0x08000507
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80004ec:	f107 030c 	add.w	r3, r7, #12
 80004f0:	4618      	mov	r0, r3
 80004f2:	f006 f8bd 	bl	8006670 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 f81b 	bl	8000532 <APPE_SysEvtReadyProcessing>
    break;
 80004fc:	e004      	b.n	8000508 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 80004fe:	6878      	ldr	r0, [r7, #4]
 8000500:	f000 f806 	bl	8000510 <APPE_SysEvtError>
    break;
 8000504:	e000      	b.n	8000508 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000506:	bf00      	nop
  }

  return;
 8000508:	bf00      	nop
}
 800050a:	3720      	adds	r7, #32
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	330b      	adds	r3, #11
 800051e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	3302      	adds	r3, #2
 8000524:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8000526:	bf00      	nop
}
 8000528:	3714      	adds	r7, #20
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b08a      	sub	sp, #40	@ 0x28
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800053a:	f107 0308 	add.w	r3, r7, #8
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8000548:	2300      	movs	r3, #0
 800054a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	685b      	ldr	r3, [r3, #4]
 8000554:	330b      	adds	r3, #11
 8000556:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8000558:	69fb      	ldr	r3, [r7, #28]
 800055a:	3302      	adds	r3, #2
 800055c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800055e:	69bb      	ldr	r3, [r7, #24]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d11d      	bne.n	80005a2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8000566:	f7ff fe11 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800056a:	230f      	movs	r3, #15
 800056c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800056e:	237f      	movs	r3, #127	@ 0x7f
 8000570:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000572:	f7ff feb1 	bl	80002d8 <LL_DBGMCU_GetRevisionID>
 8000576:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057a:	b29b      	uxth	r3, r3
 800057c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800057e:	f7ff fe9d 	bl	80002bc <LL_DBGMCU_GetDeviceID>
 8000582:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000584:	6a3b      	ldr	r3, [r7, #32]
 8000586:	b29b      	uxth	r3, r3
 8000588:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800058a:	f107 0308 	add.w	r3, r7, #8
 800058e:	4618      	mov	r0, r3
 8000590:	f006 f859 	bl	8006646 <SHCI_C2_Config>

    APP_BLE_Init();
 8000594:	f006 ff40 	bl	8007418 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000598:	2100      	movs	r1, #0
 800059a:	2001      	movs	r0, #1
 800059c:	f007 fd22 	bl	8007fe4 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80005a0:	e007      	b.n	80005b2 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80005a2:	69bb      	ldr	r3, [r7, #24]
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d103      	bne.n	80005b2 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
  return;
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
}
 80005b4:	3728      	adds	r7, #40	@ 0x28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}

080005ba <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80005be:	f04f 30ff 	mov.w	r0, #4294967295
 80005c2:	f007 fd75 	bl	80080b0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}

080005ca <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
 80005ce:	f007 fd39 	bl	8008044 <UTIL_LPM_EnterLowPower>
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80005d2:	bf00      	nop
}
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b082      	sub	sp, #8
 80005da:	af00      	add	r7, sp, #0
 80005dc:	6078      	str	r0, [r7, #4]
 80005de:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f007 fd64 	bl	80080b0 <UTIL_SEQ_Run>
  return;
 80005e8:	bf00      	nop
}
 80005ea:	3708      	adds	r7, #8
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80005f8:	2100      	movs	r1, #0
 80005fa:	2008      	movs	r0, #8
 80005fc:	f007 fe76 	bl	80082ec <UTIL_SEQ_SetTask>
  return;
 8000600:	bf00      	nop
}
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000610:	2002      	movs	r0, #2
 8000612:	f007 fed7 	bl	80083c4 <UTIL_SEQ_SetEvt>
  return;
 8000616:	bf00      	nop
}
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}

0800061e <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800061e:	b580      	push	{r7, lr}
 8000620:	b082      	sub	sp, #8
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000626:	2002      	movs	r0, #2
 8000628:	f007 feec 	bl	8008404 <UTIL_SEQ_WaitEvt>
  return;
 800062c:	bf00      	nop
}
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <LL_EXTI_EnableIT_0_31>:
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <LL_EXTI_EnableIT_0_31+0x24>)
 800063e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8000642:	4905      	ldr	r1, [pc, #20]	@ (8000658 <LL_EXTI_EnableIT_0_31+0x24>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4313      	orrs	r3, r2
 8000648:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800064c:	bf00      	nop
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	58000800 	.word	0x58000800

0800065c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000664:	4b05      	ldr	r3, [pc, #20]	@ (800067c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4904      	ldr	r1, [pc, #16]	@ (800067c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4313      	orrs	r3, r2
 800066e:	600b      	str	r3, [r1, #0]

}
 8000670:	bf00      	nop
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	58000800 	.word	0x58000800

08000680 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000686:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <ReadRtcSsrValue+0x3c>)
 8000688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800068a:	b29b      	uxth	r3, r3
 800068c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <ReadRtcSsrValue+0x3c>)
 8000690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000692:	b29b      	uxth	r3, r3
 8000694:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000696:	e005      	b.n	80006a4 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <ReadRtcSsrValue+0x3c>)
 800069e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	429a      	cmp	r2, r3
 80006aa:	d1f5      	bne.n	8000698 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80006ac:	683b      	ldr	r3, [r7, #0]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	370c      	adds	r7, #12
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	40002800 	.word	0x40002800

080006c0 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	460a      	mov	r2, r1
 80006ca:	71fb      	strb	r3, [r7, #7]
 80006cc:	4613      	mov	r3, r2
 80006ce:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80006d0:	79ba      	ldrb	r2, [r7, #6]
 80006d2:	491d      	ldr	r1, [pc, #116]	@ (8000748 <LinkTimerAfter+0x88>)
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	00db      	lsls	r3, r3, #3
 80006dc:	440b      	add	r3, r1
 80006de:	3315      	adds	r3, #21
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80006e4:	7bfb      	ldrb	r3, [r7, #15]
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d009      	beq.n	80006fe <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80006ea:	7bfa      	ldrb	r2, [r7, #15]
 80006ec:	4916      	ldr	r1, [pc, #88]	@ (8000748 <LinkTimerAfter+0x88>)
 80006ee:	4613      	mov	r3, r2
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	4413      	add	r3, r2
 80006f4:	00db      	lsls	r3, r3, #3
 80006f6:	440b      	add	r3, r1
 80006f8:	3314      	adds	r3, #20
 80006fa:	79fa      	ldrb	r2, [r7, #7]
 80006fc:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80006fe:	79fa      	ldrb	r2, [r7, #7]
 8000700:	4911      	ldr	r1, [pc, #68]	@ (8000748 <LinkTimerAfter+0x88>)
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	440b      	add	r3, r1
 800070c:	3315      	adds	r3, #21
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	490c      	ldr	r1, [pc, #48]	@ (8000748 <LinkTimerAfter+0x88>)
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	440b      	add	r3, r1
 8000720:	3314      	adds	r3, #20
 8000722:	79ba      	ldrb	r2, [r7, #6]
 8000724:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000726:	79ba      	ldrb	r2, [r7, #6]
 8000728:	4907      	ldr	r1, [pc, #28]	@ (8000748 <LinkTimerAfter+0x88>)
 800072a:	4613      	mov	r3, r2
 800072c:	005b      	lsls	r3, r3, #1
 800072e:	4413      	add	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	440b      	add	r3, r1
 8000734:	3315      	adds	r3, #21
 8000736:	79fa      	ldrb	r2, [r7, #7]
 8000738:	701a      	strb	r2, [r3, #0]

  return;
 800073a:	bf00      	nop
}
 800073c:	3714      	adds	r7, #20
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	200000a8 	.word	0x200000a8

0800074c <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <LinkTimerBefore+0xb8>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	429a      	cmp	r2, r3
 8000766:	d032      	beq.n	80007ce <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000768:	79ba      	ldrb	r2, [r7, #6]
 800076a:	4927      	ldr	r1, [pc, #156]	@ (8000808 <LinkTimerBefore+0xbc>)
 800076c:	4613      	mov	r3, r2
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	440b      	add	r3, r1
 8000776:	3314      	adds	r3, #20
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	4922      	ldr	r1, [pc, #136]	@ (8000808 <LinkTimerBefore+0xbc>)
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	00db      	lsls	r3, r3, #3
 8000788:	440b      	add	r3, r1
 800078a:	3315      	adds	r3, #21
 800078c:	79fa      	ldrb	r2, [r7, #7]
 800078e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000790:	79fa      	ldrb	r2, [r7, #7]
 8000792:	491d      	ldr	r1, [pc, #116]	@ (8000808 <LinkTimerBefore+0xbc>)
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	440b      	add	r3, r1
 800079e:	3315      	adds	r3, #21
 80007a0:	79ba      	ldrb	r2, [r7, #6]
 80007a2:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80007a4:	79fa      	ldrb	r2, [r7, #7]
 80007a6:	4918      	ldr	r1, [pc, #96]	@ (8000808 <LinkTimerBefore+0xbc>)
 80007a8:	4613      	mov	r3, r2
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	4413      	add	r3, r2
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	440b      	add	r3, r1
 80007b2:	3314      	adds	r3, #20
 80007b4:	7bfa      	ldrb	r2, [r7, #15]
 80007b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007b8:	79ba      	ldrb	r2, [r7, #6]
 80007ba:	4913      	ldr	r1, [pc, #76]	@ (8000808 <LinkTimerBefore+0xbc>)
 80007bc:	4613      	mov	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4413      	add	r3, r2
 80007c2:	00db      	lsls	r3, r3, #3
 80007c4:	440b      	add	r3, r1
 80007c6:	3314      	adds	r3, #20
 80007c8:	79fa      	ldrb	r2, [r7, #7]
 80007ca:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80007cc:	e014      	b.n	80007f8 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	490d      	ldr	r1, [pc, #52]	@ (8000808 <LinkTimerBefore+0xbc>)
 80007d2:	4613      	mov	r3, r2
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	4413      	add	r3, r2
 80007d8:	00db      	lsls	r3, r3, #3
 80007da:	440b      	add	r3, r1
 80007dc:	3315      	adds	r3, #21
 80007de:	79ba      	ldrb	r2, [r7, #6]
 80007e0:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80007e2:	79ba      	ldrb	r2, [r7, #6]
 80007e4:	4908      	ldr	r1, [pc, #32]	@ (8000808 <LinkTimerBefore+0xbc>)
 80007e6:	4613      	mov	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	4413      	add	r3, r2
 80007ec:	00db      	lsls	r3, r3, #3
 80007ee:	440b      	add	r3, r1
 80007f0:	3314      	adds	r3, #20
 80007f2:	79fa      	ldrb	r2, [r7, #7]
 80007f4:	701a      	strb	r2, [r3, #0]
  return;
 80007f6:	bf00      	nop
}
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000138 	.word	0x20000138
 8000808:	200000a8 	.word	0x200000a8

0800080c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000816:	4b4e      	ldr	r3, [pc, #312]	@ (8000950 <linkTimer+0x144>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b06      	cmp	r3, #6
 800081e:	d118      	bne.n	8000852 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000820:	4b4b      	ldr	r3, [pc, #300]	@ (8000950 <linkTimer+0x144>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4b4b      	ldr	r3, [pc, #300]	@ (8000954 <linkTimer+0x148>)
 8000828:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 800082a:	4a49      	ldr	r2, [pc, #292]	@ (8000950 <linkTimer+0x144>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000830:	79fa      	ldrb	r2, [r7, #7]
 8000832:	4949      	ldr	r1, [pc, #292]	@ (8000958 <linkTimer+0x14c>)
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	440b      	add	r3, r1
 800083e:	3315      	adds	r3, #21
 8000840:	2206      	movs	r2, #6
 8000842:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000844:	4b45      	ldr	r3, [pc, #276]	@ (800095c <linkTimer+0x150>)
 8000846:	f04f 32ff 	mov.w	r2, #4294967295
 800084a:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 800084c:	2300      	movs	r3, #0
 800084e:	81fb      	strh	r3, [r7, #14]
 8000850:	e078      	b.n	8000944 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000852:	f000 f909 	bl	8000a68 <ReturnTimeElapsed>
 8000856:	4603      	mov	r3, r0
 8000858:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	493e      	ldr	r1, [pc, #248]	@ (8000958 <linkTimer+0x14c>)
 800085e:	4613      	mov	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	4413      	add	r3, r2
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	440b      	add	r3, r1
 8000868:	3308      	adds	r3, #8
 800086a:	6819      	ldr	r1, [r3, #0]
 800086c:	89fb      	ldrh	r3, [r7, #14]
 800086e:	79fa      	ldrb	r2, [r7, #7]
 8000870:	4419      	add	r1, r3
 8000872:	4839      	ldr	r0, [pc, #228]	@ (8000958 <linkTimer+0x14c>)
 8000874:	4613      	mov	r3, r2
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	4413      	add	r3, r2
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	4403      	add	r3, r0
 800087e:	3308      	adds	r3, #8
 8000880:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000882:	79fa      	ldrb	r2, [r7, #7]
 8000884:	4934      	ldr	r1, [pc, #208]	@ (8000958 <linkTimer+0x14c>)
 8000886:	4613      	mov	r3, r2
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	440b      	add	r3, r1
 8000890:	3308      	adds	r3, #8
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000896:	4b2e      	ldr	r3, [pc, #184]	@ (8000950 <linkTimer+0x144>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4619      	mov	r1, r3
 800089e:	4a2e      	ldr	r2, [pc, #184]	@ (8000958 <linkTimer+0x14c>)
 80008a0:	460b      	mov	r3, r1
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	440b      	add	r3, r1
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	4413      	add	r3, r2
 80008aa:	3308      	adds	r3, #8
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	d337      	bcc.n	8000924 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80008b4:	4b26      	ldr	r3, [pc, #152]	@ (8000950 <linkTimer+0x144>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80008ba:	7b7a      	ldrb	r2, [r7, #13]
 80008bc:	4926      	ldr	r1, [pc, #152]	@ (8000958 <linkTimer+0x14c>)
 80008be:	4613      	mov	r3, r2
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	4413      	add	r3, r2
 80008c4:	00db      	lsls	r3, r3, #3
 80008c6:	440b      	add	r3, r1
 80008c8:	3315      	adds	r3, #21
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008ce:	e013      	b.n	80008f8 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80008d0:	7b7a      	ldrb	r2, [r7, #13]
 80008d2:	4921      	ldr	r1, [pc, #132]	@ (8000958 <linkTimer+0x14c>)
 80008d4:	4613      	mov	r3, r2
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	4413      	add	r3, r2
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	440b      	add	r3, r1
 80008de:	3315      	adds	r3, #21
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80008e4:	7b7a      	ldrb	r2, [r7, #13]
 80008e6:	491c      	ldr	r1, [pc, #112]	@ (8000958 <linkTimer+0x14c>)
 80008e8:	4613      	mov	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	4413      	add	r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	440b      	add	r3, r1
 80008f2:	3315      	adds	r3, #21
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80008f8:	7b3b      	ldrb	r3, [r7, #12]
 80008fa:	2b06      	cmp	r3, #6
 80008fc:	d00b      	beq.n	8000916 <linkTimer+0x10a>
 80008fe:	7b3a      	ldrb	r2, [r7, #12]
 8000900:	4915      	ldr	r1, [pc, #84]	@ (8000958 <linkTimer+0x14c>)
 8000902:	4613      	mov	r3, r2
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	4413      	add	r3, r2
 8000908:	00db      	lsls	r3, r3, #3
 800090a:	440b      	add	r3, r1
 800090c:	3308      	adds	r3, #8
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	68ba      	ldr	r2, [r7, #8]
 8000912:	429a      	cmp	r2, r3
 8000914:	d2dc      	bcs.n	80008d0 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000916:	7b7a      	ldrb	r2, [r7, #13]
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4611      	mov	r1, r2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fecf 	bl	80006c0 <LinkTimerAfter>
 8000922:	e00f      	b.n	8000944 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <linkTimer+0x144>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f7ff ff0c 	bl	800074c <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <linkTimer+0x144>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <linkTimer+0x148>)
 800093c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800093e:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <linkTimer+0x144>)
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000944:	89fb      	ldrh	r3, [r7, #14]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000138 	.word	0x20000138
 8000954:	20000139 	.word	0x20000139
 8000958:	200000a8 	.word	0x200000a8
 800095c:	2000013c 	.word	0x2000013c

08000960 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	460a      	mov	r2, r1
 800096a:	71fb      	strb	r3, [r7, #7]
 800096c:	4613      	mov	r3, r2
 800096e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000970:	4b39      	ldr	r3, [pc, #228]	@ (8000a58 <UnlinkTimer+0xf8>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	79fa      	ldrb	r2, [r7, #7]
 8000978:	429a      	cmp	r2, r3
 800097a:	d111      	bne.n	80009a0 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800097c:	4b36      	ldr	r3, [pc, #216]	@ (8000a58 <UnlinkTimer+0xf8>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4b36      	ldr	r3, [pc, #216]	@ (8000a5c <UnlinkTimer+0xfc>)
 8000984:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000986:	79fa      	ldrb	r2, [r7, #7]
 8000988:	4935      	ldr	r1, [pc, #212]	@ (8000a60 <UnlinkTimer+0x100>)
 800098a:	4613      	mov	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	4413      	add	r3, r2
 8000990:	00db      	lsls	r3, r3, #3
 8000992:	440b      	add	r3, r1
 8000994:	3315      	adds	r3, #21
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <UnlinkTimer+0xf8>)
 800099c:	701a      	strb	r2, [r3, #0]
 800099e:	e03e      	b.n	8000a1e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80009a0:	79fa      	ldrb	r2, [r7, #7]
 80009a2:	492f      	ldr	r1, [pc, #188]	@ (8000a60 <UnlinkTimer+0x100>)
 80009a4:	4613      	mov	r3, r2
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	4413      	add	r3, r2
 80009aa:	00db      	lsls	r3, r3, #3
 80009ac:	440b      	add	r3, r1
 80009ae:	3314      	adds	r3, #20
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80009b4:	79fa      	ldrb	r2, [r7, #7]
 80009b6:	492a      	ldr	r1, [pc, #168]	@ (8000a60 <UnlinkTimer+0x100>)
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	440b      	add	r3, r1
 80009c2:	3315      	adds	r3, #21
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80009c8:	79f9      	ldrb	r1, [r7, #7]
 80009ca:	7bfa      	ldrb	r2, [r7, #15]
 80009cc:	4824      	ldr	r0, [pc, #144]	@ (8000a60 <UnlinkTimer+0x100>)
 80009ce:	460b      	mov	r3, r1
 80009d0:	005b      	lsls	r3, r3, #1
 80009d2:	440b      	add	r3, r1
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	4403      	add	r3, r0
 80009d8:	3315      	adds	r3, #21
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2d8      	uxtb	r0, r3
 80009de:	4920      	ldr	r1, [pc, #128]	@ (8000a60 <UnlinkTimer+0x100>)
 80009e0:	4613      	mov	r3, r2
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4413      	add	r3, r2
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	440b      	add	r3, r1
 80009ea:	3315      	adds	r3, #21
 80009ec:	4602      	mov	r2, r0
 80009ee:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80009f0:	7bbb      	ldrb	r3, [r7, #14]
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d013      	beq.n	8000a1e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80009f6:	79f9      	ldrb	r1, [r7, #7]
 80009f8:	7bba      	ldrb	r2, [r7, #14]
 80009fa:	4819      	ldr	r0, [pc, #100]	@ (8000a60 <UnlinkTimer+0x100>)
 80009fc:	460b      	mov	r3, r1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	440b      	add	r3, r1
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	4403      	add	r3, r0
 8000a06:	3314      	adds	r3, #20
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	b2d8      	uxtb	r0, r3
 8000a0c:	4914      	ldr	r1, [pc, #80]	@ (8000a60 <UnlinkTimer+0x100>)
 8000a0e:	4613      	mov	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4413      	add	r3, r2
 8000a14:	00db      	lsls	r3, r3, #3
 8000a16:	440b      	add	r3, r1
 8000a18:	3314      	adds	r3, #20
 8000a1a:	4602      	mov	r2, r0
 8000a1c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	490f      	ldr	r1, [pc, #60]	@ (8000a60 <UnlinkTimer+0x100>)
 8000a22:	4613      	mov	r3, r2
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	4413      	add	r3, r2
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	440b      	add	r3, r1
 8000a2c:	330c      	adds	r3, #12
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000a32:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <UnlinkTimer+0xf8>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b06      	cmp	r3, #6
 8000a3a:	d107      	bne.n	8000a4c <UnlinkTimer+0xec>
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d104      	bne.n	8000a4c <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <UnlinkTimer+0x104>)
 8000a44:	f04f 32ff 	mov.w	r2, #4294967295
 8000a48:	601a      	str	r2, [r3, #0]
  }

  return;
 8000a4a:	bf00      	nop
 8000a4c:	bf00      	nop
}
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	20000138 	.word	0x20000138
 8000a5c:	20000139 	.word	0x20000139
 8000a60:	200000a8 	.word	0x200000a8
 8000a64:	2000013c 	.word	0x2000013c

08000a68 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <ReturnTimeElapsed+0x70>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a76:	d026      	beq.n	8000ac6 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000a78:	f7ff fe02 	bl	8000680 <ReadRtcSsrValue>
 8000a7c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000a7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <ReturnTimeElapsed+0x70>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	687a      	ldr	r2, [r7, #4]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d805      	bhi.n	8000a94 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <ReturnTimeElapsed+0x70>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1ad3      	subs	r3, r2, r3
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	e00a      	b.n	8000aaa <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <ReturnTimeElapsed+0x74>)
 8000a96:	881b      	ldrh	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <ReturnTimeElapsed+0x70>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae0 <ReturnTimeElapsed+0x78>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	fb02 f303 	mul.w	r3, r2, r3
 8000ab6:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae4 <ReturnTimeElapsed+0x7c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	40d3      	lsrs	r3, r2
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	e001      	b.n	8000aca <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	b29b      	uxth	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000013c 	.word	0x2000013c
 8000adc:	20000144 	.word	0x20000144
 8000ae0:	20000142 	.word	0x20000142
 8000ae4:	20000141 	.word	0x20000141

08000ae8 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d108      	bne.n	8000b0a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000af8:	f7ff fdc2 	bl	8000680 <ReadRtcSsrValue>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a21      	ldr	r2, [pc, #132]	@ (8000b84 <RestartWakeupCounter+0x9c>)
 8000b00:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000b02:	2003      	movs	r0, #3
 8000b04:	f001 fd37 	bl	8002576 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000b08:	e039      	b.n	8000b7e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000b0a:	88fb      	ldrh	r3, [r7, #6]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d803      	bhi.n	8000b18 <RestartWakeupCounter+0x30>
 8000b10:	4b1d      	ldr	r3, [pc, #116]	@ (8000b88 <RestartWakeupCounter+0xa0>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d002      	beq.n	8000b1e <RestartWakeupCounter+0x36>
      Value -= 1;
 8000b18:	88fb      	ldrh	r3, [r7, #6]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000b1e:	bf00      	nop
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <RestartWakeupCounter+0xa4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f8      	beq.n	8000b20 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000b2e:	4b17      	ldr	r3, [pc, #92]	@ (8000b8c <RestartWakeupCounter+0xa4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b15      	ldr	r3, [pc, #84]	@ (8000b8c <RestartWakeupCounter+0xa4>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000b3e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000b40:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <RestartWakeupCounter+0xa8>)
 8000b42:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b46:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000b48:	2003      	movs	r0, #3
 8000b4a:	f001 fd22 	bl	8002592 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <RestartWakeupCounter+0xac>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	0c1b      	lsrs	r3, r3, #16
 8000b54:	041b      	lsls	r3, r3, #16
 8000b56:	88fa      	ldrh	r2, [r7, #6]
 8000b58:	490e      	ldr	r1, [pc, #56]	@ (8000b94 <RestartWakeupCounter+0xac>)
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000b5e:	f7ff fd8f 	bl	8000680 <ReadRtcSsrValue>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a07      	ldr	r2, [pc, #28]	@ (8000b84 <RestartWakeupCounter+0x9c>)
 8000b66:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <RestartWakeupCounter+0xa4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	4b07      	ldr	r3, [pc, #28]	@ (8000b8c <RestartWakeupCounter+0xa4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b76:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000b78:	f3af 8000 	nop.w
  return ;
 8000b7c:	bf00      	nop
}
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	2000013c 	.word	0x2000013c
 8000b88:	20000141 	.word	0x20000141
 8000b8c:	200001d8 	.word	0x200001d8
 8000b90:	58000800 	.word	0x58000800
 8000b94:	40002800 	.word	0x40002800

08000b98 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000b9e:	4b45      	ldr	r3, [pc, #276]	@ (8000cb4 <RescheduleTimerList+0x11c>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000baa:	d107      	bne.n	8000bbc <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000bac:	bf00      	nop
 8000bae:	4b42      	ldr	r3, [pc, #264]	@ (8000cb8 <RescheduleTimerList+0x120>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	68db      	ldr	r3, [r3, #12]
 8000bb4:	f003 0304 	and.w	r3, r3, #4
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d1f8      	bne.n	8000bae <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cb8 <RescheduleTimerList+0x120>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb8 <RescheduleTimerList+0x120>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000bca:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8000cbc <RescheduleTimerList+0x124>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000bd2:	7bfa      	ldrb	r2, [r7, #15]
 8000bd4:	493a      	ldr	r1, [pc, #232]	@ (8000cc0 <RescheduleTimerList+0x128>)
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	4413      	add	r3, r2
 8000bdc:	00db      	lsls	r3, r3, #3
 8000bde:	440b      	add	r3, r1
 8000be0:	3308      	adds	r3, #8
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000be6:	f7ff ff3f 	bl	8000a68 <ReturnTimeElapsed>
 8000bea:	4603      	mov	r3, r0
 8000bec:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000bee:	88fb      	ldrh	r3, [r7, #6]
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d205      	bcs.n	8000c02 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000bfa:	4b32      	ldr	r3, [pc, #200]	@ (8000cc4 <RescheduleTimerList+0x12c>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e04d      	b.n	8000c9e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	4a30      	ldr	r2, [pc, #192]	@ (8000cc8 <RescheduleTimerList+0x130>)
 8000c06:	8812      	ldrh	r2, [r2, #0]
 8000c08:	b292      	uxth	r2, r2
 8000c0a:	4413      	add	r3, r2
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d906      	bls.n	8000c22 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000c14:	4b2c      	ldr	r3, [pc, #176]	@ (8000cc8 <RescheduleTimerList+0x130>)
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000cc4 <RescheduleTimerList+0x12c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e03d      	b.n	8000c9e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <RescheduleTimerList+0x12c>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c32:	e034      	b.n	8000c9e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000c34:	7bfa      	ldrb	r2, [r7, #15]
 8000c36:	4922      	ldr	r1, [pc, #136]	@ (8000cc0 <RescheduleTimerList+0x128>)
 8000c38:	4613      	mov	r3, r2
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	440b      	add	r3, r1
 8000c42:	3308      	adds	r3, #8
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d20a      	bcs.n	8000c62 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000c4c:	7bfa      	ldrb	r2, [r7, #15]
 8000c4e:	491c      	ldr	r1, [pc, #112]	@ (8000cc0 <RescheduleTimerList+0x128>)
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	00db      	lsls	r3, r3, #3
 8000c58:	440b      	add	r3, r1
 8000c5a:	3308      	adds	r3, #8
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	e013      	b.n	8000c8a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000c62:	7bfa      	ldrb	r2, [r7, #15]
 8000c64:	4916      	ldr	r1, [pc, #88]	@ (8000cc0 <RescheduleTimerList+0x128>)
 8000c66:	4613      	mov	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	3308      	adds	r3, #8
 8000c72:	6819      	ldr	r1, [r3, #0]
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	7bfa      	ldrb	r2, [r7, #15]
 8000c78:	1ac9      	subs	r1, r1, r3
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <RescheduleTimerList+0x128>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	4413      	add	r3, r2
 8000c82:	00db      	lsls	r3, r3, #3
 8000c84:	4403      	add	r3, r0
 8000c86:	3308      	adds	r3, #8
 8000c88:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000c8a:	7bfa      	ldrb	r2, [r7, #15]
 8000c8c:	490c      	ldr	r1, [pc, #48]	@ (8000cc0 <RescheduleTimerList+0x128>)
 8000c8e:	4613      	mov	r3, r2
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	4413      	add	r3, r2
 8000c94:	00db      	lsls	r3, r3, #3
 8000c96:	440b      	add	r3, r1
 8000c98:	3315      	adds	r3, #21
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ca0:	2b06      	cmp	r3, #6
 8000ca2:	d1c7      	bne.n	8000c34 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000ca4:	89bb      	ldrh	r3, [r7, #12]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff ff1e 	bl	8000ae8 <RestartWakeupCounter>

  return ;
 8000cac:	bf00      	nop
}
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40002800 	.word	0x40002800
 8000cb8:	200001d8 	.word	0x200001d8
 8000cbc:	20000138 	.word	0x20000138
 8000cc0:	200000a8 	.word	0x200000a8
 8000cc4:	20000140 	.word	0x20000140
 8000cc8:	20000146 	.word	0x20000146

08000ccc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	@ 0x28
 8000cd0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8000cd6:	617b      	str	r3, [r7, #20]
  return(result);
 8000cd8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000ce0:	4b59      	ldr	r3, [pc, #356]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	22ca      	movs	r2, #202	@ 0xca
 8000ce6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ce8:	4b57      	ldr	r3, [pc, #348]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2253      	movs	r2, #83	@ 0x53
 8000cee:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000cf0:	4b55      	ldr	r3, [pc, #340]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	4b54      	ldr	r3, [pc, #336]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000cfe:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000d00:	4b52      	ldr	r3, [pc, #328]	@ (8000e4c <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000d08:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d0c:	4950      	ldr	r1, [pc, #320]	@ (8000e50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	330c      	adds	r3, #12
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	d16e      	bne.n	8000e00 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000d22:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d26:	494a      	ldr	r1, [pc, #296]	@ (8000e50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	440b      	add	r3, r1
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000d36:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d3a:	4945      	ldr	r1, [pc, #276]	@ (8000e50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	440b      	add	r3, r1
 8000d46:	3310      	adds	r3, #16
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8000d4c:	4b41      	ldr	r3, [pc, #260]	@ (8000e54 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d04c      	beq.n	8000df0 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8000d56:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d5a:	493d      	ldr	r1, [pc, #244]	@ (8000e50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	4413      	add	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	440b      	add	r3, r1
 8000d66:	330d      	adds	r3, #13
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d124      	bne.n	8000dba <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8000d70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000d74:	2101      	movs	r1, #1
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fdf2 	bl	8000960 <UnlinkTimer>
 8000d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	f383 8810 	msr	PRIMASK, r3
}
 8000d86:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8000d88:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000d8c:	4930      	ldr	r1, [pc, #192]	@ (8000e50 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	440b      	add	r3, r1
 8000d98:	3304      	adds	r3, #4
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000da0:	4611      	mov	r1, r2
 8000da2:	4618      	mov	r0, r3
 8000da4:	f000 fa32 	bl	800120c <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000da8:	4b27      	ldr	r3, [pc, #156]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	22ca      	movs	r2, #202	@ 0xca
 8000dae:	625a      	str	r2, [r3, #36]	@ 0x24
 8000db0:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2253      	movs	r2, #83	@ 0x53
 8000db6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000db8:	e012      	b.n	8000de0 <HW_TS_RTC_Wakeup_Handler+0x114>
 8000dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f383 8810 	msr	PRIMASK, r3
}
 8000dc4:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8000dc6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f99a 	bl	8001104 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	22ca      	movs	r2, #202	@ 0xca
 8000dd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2253      	movs	r2, #83	@ 0x53
 8000dde:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8000de0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	4619      	mov	r1, r3
 8000de8:	69b8      	ldr	r0, [r7, #24]
 8000dea:	f000 fa95 	bl	8001318 <HW_TS_RTC_Int_AppNot>
 8000dee:	e022      	b.n	8000e36 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8000df0:	f7ff fed2 	bl	8000b98 <RescheduleTimerList>
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	f383 8810 	msr	PRIMASK, r3
}
 8000dfe:	e01a      	b.n	8000e36 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000e00:	bf00      	nop
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f8      	beq.n	8000e02 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000e10:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000e20:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8000e24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f383 8810 	msr	PRIMASK, r3
}
 8000e34:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000e36:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	22ff      	movs	r2, #255	@ 0xff
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8000e3e:	bf00      	nop
}
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	200001d8 	.word	0x200001d8
 8000e4c:	20000138 	.word	0x20000138
 8000e50:	200000a8 	.word	0x200000a8
 8000e54:	20000140 	.word	0x20000140
 8000e58:	58000800 	.word	0x58000800

08000e5c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b088      	sub	sp, #32
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000e68:	4b5e      	ldr	r3, [pc, #376]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	22ca      	movs	r2, #202	@ 0xca
 8000e6e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000e70:	4b5c      	ldr	r3, [pc, #368]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2253      	movs	r2, #83	@ 0x53
 8000e76:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8000e78:	4b5b      	ldr	r3, [pc, #364]	@ (8000fe8 <HW_TS_Init+0x18c>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	4a5a      	ldr	r2, [pc, #360]	@ (8000fe8 <HW_TS_Init+0x18c>)
 8000e7e:	f043 0320 	orr.w	r3, r3, #32
 8000e82:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8000e84:	4b58      	ldr	r3, [pc, #352]	@ (8000fe8 <HW_TS_Init+0x18c>)
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	f1c3 0304 	rsb	r3, r3, #4
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4b55      	ldr	r3, [pc, #340]	@ (8000fec <HW_TS_Init+0x190>)
 8000e98:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000e9a:	4b53      	ldr	r3, [pc, #332]	@ (8000fe8 <HW_TS_Init+0x18c>)
 8000e9c:	691b      	ldr	r3, [r3, #16]
 8000e9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8000ea2:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8000ea6:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	fa92 f2a2 	rbit	r2, r2
 8000eae:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000eb4:	697a      	ldr	r2, [r7, #20]
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	d101      	bne.n	8000ebe <HW_TS_Init+0x62>
  {
    return 32U;
 8000eba:	2220      	movs	r2, #32
 8000ebc:	e003      	b.n	8000ec6 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	fab2 f282 	clz	r2, r2
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	40d3      	lsrs	r3, r2
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	3301      	adds	r3, #1
 8000ecc:	b2da      	uxtb	r2, r3
 8000ece:	4b48      	ldr	r3, [pc, #288]	@ (8000ff0 <HW_TS_Init+0x194>)
 8000ed0:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8000ed2:	4b45      	ldr	r3, [pc, #276]	@ (8000fe8 <HW_TS_Init+0x18c>)
 8000ed4:	691b      	ldr	r3, [r3, #16]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	3301      	adds	r3, #1
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	4b44      	ldr	r3, [pc, #272]	@ (8000ff4 <HW_TS_Init+0x198>)
 8000ee4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8000ee6:	4b43      	ldr	r3, [pc, #268]	@ (8000ff4 <HW_TS_Init+0x198>)
 8000ee8:	881b      	ldrh	r3, [r3, #0]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	4a40      	ldr	r2, [pc, #256]	@ (8000ff0 <HW_TS_Init+0x194>)
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	fb02 f303 	mul.w	r3, r2, r3
 8000ef4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8000ef8:	4a3c      	ldr	r2, [pc, #240]	@ (8000fec <HW_TS_Init+0x190>)
 8000efa:	7812      	ldrb	r2, [r2, #0]
 8000efc:	40d3      	lsrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d904      	bls.n	8000f14 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8000f0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff8 <HW_TS_Init+0x19c>)
 8000f0c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f10:	801a      	strh	r2, [r3, #0]
 8000f12:	e003      	b.n	8000f1c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b37      	ldr	r3, [pc, #220]	@ (8000ff8 <HW_TS_Init+0x19c>)
 8000f1a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f1c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f20:	f7ff fb9c 	bl	800065c <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000f24:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8000f28:	f7ff fb84 	bl	8000634 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d13d      	bne.n	8000fae <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f32:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <HW_TS_Init+0x1a0>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000f38:	4b31      	ldr	r3, [pc, #196]	@ (8001000 <HW_TS_Init+0x1a4>)
 8000f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	77fb      	strb	r3, [r7, #31]
 8000f44:	e00c      	b.n	8000f60 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000f46:	7ffa      	ldrb	r2, [r7, #31]
 8000f48:	492e      	ldr	r1, [pc, #184]	@ (8001004 <HW_TS_Init+0x1a8>)
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	330c      	adds	r3, #12
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8000f5a:	7ffb      	ldrb	r3, [r7, #31]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	77fb      	strb	r3, [r7, #31]
 8000f60:	7ffb      	ldrb	r3, [r7, #31]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d9ef      	bls.n	8000f46 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8000f66:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <HW_TS_Init+0x1ac>)
 8000f68:	2206      	movs	r2, #6
 8000f6a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000f7a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000f8c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <HW_TS_Init+0x1b0>)
 8000f90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000f94:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8000f96:	2003      	movs	r0, #3
 8000f98:	f001 fafb 	bl	8002592 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	e009      	b.n	8000fc2 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8000fae:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f001 fada 	bl	8002576 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HW_TS_Init+0x188>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	22ff      	movs	r2, #255	@ 0xff
 8000fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2103      	movs	r1, #3
 8000fce:	2003      	movs	r0, #3
 8000fd0:	f001 fa8f 	bl	80024f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f001 faa6 	bl	8002526 <HAL_NVIC_EnableIRQ>

  return;
 8000fda:	bf00      	nop
}
 8000fdc:	3720      	adds	r7, #32
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200001d8 	.word	0x200001d8
 8000fe8:	40002800 	.word	0x40002800
 8000fec:	20000141 	.word	0x20000141
 8000ff0:	20000142 	.word	0x20000142
 8000ff4:	20000144 	.word	0x20000144
 8000ff8:	20000146 	.word	0x20000146
 8000ffc:	20000140 	.word	0x20000140
 8001000:	2000013c 	.word	0x2000013c
 8001004:	200000a8 	.word	0x200000a8
 8001008:	20000138 	.word	0x20000138
 800100c:	58000800 	.word	0x58000800

08001010 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8001010:	b480      	push	{r7}
 8001012:	b08b      	sub	sp, #44	@ 0x2c
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4613      	mov	r3, r2
 800101e:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8001020:	2300      	movs	r3, #0
 8001022:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001026:	f3ef 8310 	mrs	r3, PRIMASK
 800102a:	61fb      	str	r3, [r7, #28]
  return(result);
 800102c:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800102e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001030:	b672      	cpsid	i
}
 8001032:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001034:	e004      	b.n	8001040 <HW_TS_Create+0x30>
  {
    loop++;
 8001036:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800103a:	3301      	adds	r3, #1
 800103c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8001040:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001044:	2b05      	cmp	r3, #5
 8001046:	d80c      	bhi.n	8001062 <HW_TS_Create+0x52>
 8001048:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800104c:	492c      	ldr	r1, [pc, #176]	@ (8001100 <HW_TS_Create+0xf0>)
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	440b      	add	r3, r1
 8001058:	330c      	adds	r3, #12
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	2b00      	cmp	r3, #0
 8001060:	d1e9      	bne.n	8001036 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001066:	2b06      	cmp	r3, #6
 8001068:	d038      	beq.n	80010dc <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 800106a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800106e:	4924      	ldr	r1, [pc, #144]	@ (8001100 <HW_TS_Create+0xf0>)
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	330c      	adds	r3, #12
 800107c:	2201      	movs	r2, #1
 800107e:	701a      	strb	r2, [r3, #0]
 8001080:	6a3b      	ldr	r3, [r7, #32]
 8001082:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	f383 8810 	msr	PRIMASK, r3
}
 800108a:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 800108c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001090:	491b      	ldr	r1, [pc, #108]	@ (8001100 <HW_TS_Create+0xf0>)
 8001092:	4613      	mov	r3, r2
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4413      	add	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	440b      	add	r3, r1
 800109c:	3310      	adds	r3, #16
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80010a2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010a6:	4916      	ldr	r1, [pc, #88]	@ (8001100 <HW_TS_Create+0xf0>)
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	440b      	add	r3, r1
 80010b2:	330d      	adds	r3, #13
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80010b8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010bc:	4910      	ldr	r1, [pc, #64]	@ (8001100 <HW_TS_Create+0xf0>)
 80010be:	4613      	mov	r3, r2
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	4413      	add	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	440b      	add	r3, r1
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80010d2:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010da:	e008      	b.n	80010ee <HW_TS_Create+0xde>
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f383 8810 	msr	PRIMASK, r3
}
 80010e6:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80010e8:	2301      	movs	r3, #1
 80010ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return(localreturnstatus);
 80010ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	372c      	adds	r7, #44	@ 0x2c
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	200000a8 	.word	0x200000a8

08001104 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800110e:	f3ef 8310 	mrs	r3, PRIMASK
 8001112:	60fb      	str	r3, [r7, #12]
  return(result);
 8001114:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001116:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800111c:	2003      	movs	r0, #3
 800111e:	f001 fa10 	bl	8002542 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001122:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <HW_TS_Stop+0xf0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	22ca      	movs	r2, #202	@ 0xca
 8001128:	625a      	str	r2, [r3, #36]	@ 0x24
 800112a:	4b32      	ldr	r3, [pc, #200]	@ (80011f4 <HW_TS_Stop+0xf0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2253      	movs	r2, #83	@ 0x53
 8001130:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001132:	79fa      	ldrb	r2, [r7, #7]
 8001134:	4930      	ldr	r1, [pc, #192]	@ (80011f8 <HW_TS_Stop+0xf4>)
 8001136:	4613      	mov	r3, r2
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	4413      	add	r3, r2
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	440b      	add	r3, r1
 8001140:	330c      	adds	r3, #12
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d142      	bne.n	80011d0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fc06 	bl	8000960 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001154:	4b29      	ldr	r3, [pc, #164]	@ (80011fc <HW_TS_Stop+0xf8>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800115a:	7cfb      	ldrb	r3, [r7, #19]
 800115c:	2b06      	cmp	r3, #6
 800115e:	d12f      	bne.n	80011c0 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001160:	4b27      	ldr	r3, [pc, #156]	@ (8001200 <HW_TS_Stop+0xfc>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001168:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800116c:	d107      	bne.n	800117e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800116e:	bf00      	nop
 8001170:	4b20      	ldr	r3, [pc, #128]	@ (80011f4 <HW_TS_Stop+0xf0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f003 0304 	and.w	r3, r3, #4
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f8      	bne.n	8001170 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800117e:	4b1d      	ldr	r3, [pc, #116]	@ (80011f4 <HW_TS_Stop+0xf0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	4b1b      	ldr	r3, [pc, #108]	@ (80011f4 <HW_TS_Stop+0xf0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800118c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800118e:	bf00      	nop
 8001190:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <HW_TS_Stop+0xf0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f8      	beq.n	8001190 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <HW_TS_Stop+0xf0>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	b2da      	uxtb	r2, r3
 80011a6:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <HW_TS_Stop+0xf0>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80011ae:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011b0:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <HW_TS_Stop+0x100>)
 80011b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80011b6:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80011b8:	2003      	movs	r0, #3
 80011ba:	f001 f9ea 	bl	8002592 <HAL_NVIC_ClearPendingIRQ>
 80011be:	e007      	b.n	80011d0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <HW_TS_Stop+0x104>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	7cfa      	ldrb	r2, [r7, #19]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d001      	beq.n	80011d0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80011cc:	f7ff fce4 	bl	8000b98 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80011d0:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HW_TS_Stop+0xf0>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	22ff      	movs	r2, #255	@ 0xff
 80011d6:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80011d8:	2003      	movs	r0, #3
 80011da:	f001 f9a4 	bl	8002526 <HAL_NVIC_EnableIRQ>
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	f383 8810 	msr	PRIMASK, r3
}
 80011e8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80011ea:	bf00      	nop
}
 80011ec:	3718      	adds	r7, #24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001d8 	.word	0x200001d8
 80011f8:	200000a8 	.word	0x200000a8
 80011fc:	20000138 	.word	0x20000138
 8001200:	40002800 	.word	0x40002800
 8001204:	58000800 	.word	0x58000800
 8001208:	20000139 	.word	0x20000139

0800120c <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8001218:	79fa      	ldrb	r2, [r7, #7]
 800121a:	493b      	ldr	r1, [pc, #236]	@ (8001308 <HW_TS_Start+0xfc>)
 800121c:	4613      	mov	r3, r2
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4413      	add	r3, r2
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	330c      	adds	r3, #12
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d103      	bne.n	8001238 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff66 	bl	8001104 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001238:	f3ef 8310 	mrs	r3, PRIMASK
 800123c:	60fb      	str	r3, [r7, #12]
  return(result);
 800123e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001240:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001242:	b672      	cpsid	i
}
 8001244:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001246:	2003      	movs	r0, #3
 8001248:	f001 f97b 	bl	8002542 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800124c:	4b2f      	ldr	r3, [pc, #188]	@ (800130c <HW_TS_Start+0x100>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	22ca      	movs	r2, #202	@ 0xca
 8001252:	625a      	str	r2, [r3, #36]	@ 0x24
 8001254:	4b2d      	ldr	r3, [pc, #180]	@ (800130c <HW_TS_Start+0x100>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2253      	movs	r2, #83	@ 0x53
 800125a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800125c:	79fa      	ldrb	r2, [r7, #7]
 800125e:	492a      	ldr	r1, [pc, #168]	@ (8001308 <HW_TS_Start+0xfc>)
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	440b      	add	r3, r1
 800126a:	330c      	adds	r3, #12
 800126c:	2202      	movs	r2, #2
 800126e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001270:	79fa      	ldrb	r2, [r7, #7]
 8001272:	4925      	ldr	r1, [pc, #148]	@ (8001308 <HW_TS_Start+0xfc>)
 8001274:	4613      	mov	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	4413      	add	r3, r2
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	440b      	add	r3, r1
 800127e:	3308      	adds	r3, #8
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	4920      	ldr	r1, [pc, #128]	@ (8001308 <HW_TS_Start+0xfc>)
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	440b      	add	r3, r1
 8001292:	3304      	adds	r3, #4
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fab6 	bl	800080c <linkTimer>
 80012a0:	4603      	mov	r3, r0
 80012a2:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <HW_TS_Start+0x104>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HW_TS_Start+0x108>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	7c7a      	ldrb	r2, [r7, #17]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d002      	beq.n	80012bc <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80012b6:	f7ff fc6f 	bl	8000b98 <RescheduleTimerList>
 80012ba:	e013      	b.n	80012e4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80012bc:	79fa      	ldrb	r2, [r7, #7]
 80012be:	4912      	ldr	r1, [pc, #72]	@ (8001308 <HW_TS_Start+0xfc>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	3308      	adds	r3, #8
 80012cc:	6819      	ldr	r1, [r3, #0]
 80012ce:	8a7b      	ldrh	r3, [r7, #18]
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	1ac9      	subs	r1, r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	@ (8001308 <HW_TS_Start+0xfc>)
 80012d6:	4613      	mov	r3, r2
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4403      	add	r3, r0
 80012e0:	3308      	adds	r3, #8
 80012e2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HW_TS_Start+0x100>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	22ff      	movs	r2, #255	@ 0xff
 80012ea:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80012ec:	2003      	movs	r0, #3
 80012ee:	f001 f91a 	bl	8002526 <HAL_NVIC_EnableIRQ>
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f383 8810 	msr	PRIMASK, r3
}
 80012fc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80012fe:	bf00      	nop
}
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000a8 	.word	0x200000a8
 800130c:	200001d8 	.word	0x200001d8
 8001310:	20000138 	.word	0x20000138
 8001314:	20000139 	.word	0x20000139

08001318 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	460b      	mov	r3, r1
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4798      	blx	r3

  return;
 800132a:	bf00      	nop
}
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <LL_RCC_LSE_SetDriveCapability>:
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800133a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001342:	f023 0218 	bic.w	r2, r3, #24
 8001346:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4313      	orrs	r3, r2
 800134e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800135e:	b480      	push	{r7}
 8001360:	b085      	sub	sp, #20
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001366:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800136a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800136c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800137a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4013      	ands	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001394:	f000 fecc 	bl	8002130 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001398:	f7fe ffdc 	bl	8000354 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139c:	f000 f815 	bl	80013ca <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013a0:	f000 f86e 	bl	8001480 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80013a4:	f000 f8c8 	bl	8001538 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f000 f9da 	bl	8001760 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013ac:	f000 f884 	bl	80014b8 <MX_I2C1_Init>
  MX_RTC_Init();
 80013b0:	f000 f8de 	bl	8001570 <MX_RTC_Init>
  MX_SPI1_Init();
 80013b4:	f000 f902 	bl	80015bc <MX_SPI1_Init>
  MX_TIM1_Init();
 80013b8:	f000 f93e 	bl	8001638 <MX_TIM1_Init>
  MX_RF_Init();
 80013bc:	f000 f8d0 	bl	8001560 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
//  ltHWInit();
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80013c0:	f7fe ffd6 	bl	8000370 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80013c4:	f7ff f8f9 	bl	80005ba <MX_APPE_Process>
 80013c8:	e7fc      	b.n	80013c4 <main+0x34>

080013ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b098      	sub	sp, #96	@ 0x60
 80013ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	2244      	movs	r2, #68	@ 0x44
 80013d6:	2100      	movs	r1, #0
 80013d8:	4618      	mov	r0, r3
 80013da:	f007 f8a3 	bl	8008524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013de:	463b      	mov	r3, r7
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013f0:	f001 fc78 	bl	8002ce4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80013f4:	2010      	movs	r0, #16
 80013f6:	f7ff ff9c 	bl	8001332 <LL_RCC_LSE_SetDriveCapability>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80013fa:	2307      	movs	r3, #7
 80013fc:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001402:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001404:	2301      	movs	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001408:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140e:	2340      	movs	r3, #64	@ 0x40
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001412:	2302      	movs	r3, #2
 8001414:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001416:	2303      	movs	r3, #3
 8001418:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800141a:	2310      	movs	r3, #16
 800141c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800141e:	2308      	movs	r3, #8
 8001420:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001422:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001426:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001428:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800142c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800142e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001432:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4618      	mov	r0, r3
 800143a:	f001 ffa3 	bl	8003384 <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001444:	f000 f9fe 	bl	8001844 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001448:	236f      	movs	r3, #111	@ 0x6f
 800144a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800144c:	2303      	movs	r3, #3
 800144e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800145c:	2380      	movs	r3, #128	@ 0x80
 800145e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	2103      	movs	r1, #3
 8001468:	4618      	mov	r0, r3
 800146a:	f002 fac1 	bl	80039f0 <HAL_RCC_ClockConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001474:	f000 f9e6 	bl	8001844 <Error_Handler>
  }
}
 8001478:	bf00      	nop
 800147a:	3760      	adds	r7, #96	@ 0x60
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08a      	sub	sp, #40	@ 0x28
 8001484:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2224      	movs	r2, #36	@ 0x24
 800148a:	2100      	movs	r1, #0
 800148c:	4618      	mov	r0, r3
 800148e:	f007 f849 	bl	8008524 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RFWAKEUP;
 8001492:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001496:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001498:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800149c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 fdfd 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 80014ac:	f000 f9ca 	bl	8001844 <Error_Handler>
  }
}
 80014b0:	bf00      	nop
 80014b2:	3728      	adds	r7, #40	@ 0x28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <MX_I2C1_Init+0x74>)
 80014be:	4a1c      	ldr	r2, [pc, #112]	@ (8001530 <MX_I2C1_Init+0x78>)
 80014c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	@ (800152c <MX_I2C1_Init+0x74>)
 80014c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001534 <MX_I2C1_Init+0x7c>)
 80014c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c8:	4b18      	ldr	r3, [pc, #96]	@ (800152c <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ce:	4b17      	ldr	r3, [pc, #92]	@ (800152c <MX_I2C1_Init+0x74>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d4:	4b15      	ldr	r3, [pc, #84]	@ (800152c <MX_I2C1_Init+0x74>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014da:	4b14      	ldr	r3, [pc, #80]	@ (800152c <MX_I2C1_Init+0x74>)
 80014dc:	2200      	movs	r2, #0
 80014de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014e0:	4b12      	ldr	r3, [pc, #72]	@ (800152c <MX_I2C1_Init+0x74>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_I2C1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <MX_I2C1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014f2:	480e      	ldr	r0, [pc, #56]	@ (800152c <MX_I2C1_Init+0x74>)
 80014f4:	f001 fa3e 	bl	8002974 <HAL_I2C_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014fe:	f000 f9a1 	bl	8001844 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	4809      	ldr	r0, [pc, #36]	@ (800152c <MX_I2C1_Init+0x74>)
 8001506:	f001 fad0 	bl	8002aaa <HAL_I2CEx_ConfigAnalogFilter>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 f998 	bl	8001844 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001514:	2100      	movs	r1, #0
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_I2C1_Init+0x74>)
 8001518:	f001 fb12 	bl	8002b40 <HAL_I2CEx_ConfigDigitalFilter>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001522:	f000 f98f 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000148 	.word	0x20000148
 8001530:	40005400 	.word	0x40005400
 8001534:	10707dbc 	.word	0x10707dbc

08001538 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800153c:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_IPCC_Init+0x20>)
 800153e:	4a07      	ldr	r2, [pc, #28]	@ (800155c <MX_IPCC_Init+0x24>)
 8001540:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	@ (8001558 <MX_IPCC_Init+0x20>)
 8001544:	f001 fb48 	bl	8002bd8 <HAL_IPCC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800154e:	f000 f979 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000019c 	.word	0x2000019c
 800155c:	58000c00 	.word	0x58000c00

08001560 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
	...

08001570 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001574:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <MX_RTC_Init+0x44>)
 8001576:	4a10      	ldr	r2, [pc, #64]	@ (80015b8 <MX_RTC_Init+0x48>)
 8001578:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_RTC_Init+0x44>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <MX_RTC_Init+0x44>)
 8001582:	220f      	movs	r2, #15
 8001584:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <MX_RTC_Init+0x44>)
 8001588:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800158c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800158e:	4b09      	ldr	r3, [pc, #36]	@ (80015b4 <MX_RTC_Init+0x44>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <MX_RTC_Init+0x44>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_RTC_Init+0x44>)
 800159c:	2200      	movs	r2, #0
 800159e:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	@ (80015b4 <MX_RTC_Init+0x44>)
 80015a2:	f002 fe59 	bl	8004258 <HAL_RTC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_RTC_Init+0x40>
  {
    Error_Handler();
 80015ac:	f000 f94a 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200001d8 	.word	0x200001d8
 80015b8:	40002800 	.word	0x40002800

080015bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001634 <MX_SPI1_Init+0x78>)
 80015c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ce:	4b18      	ldr	r3, [pc, #96]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015d4:	4b16      	ldr	r3, [pc, #88]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015d6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001630 <MX_SPI1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001602:	4b0b      	ldr	r3, [pc, #44]	@ (8001630 <MX_SPI1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001608:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <MX_SPI1_Init+0x74>)
 800160a:	2207      	movs	r2, #7
 800160c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800160e:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <MX_SPI1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001614:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <MX_SPI1_Init+0x74>)
 8001616:	2208      	movs	r2, #8
 8001618:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800161a:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_SPI1_Init+0x74>)
 800161c:	f002 ff1c 	bl	8004458 <HAL_SPI_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001626:	f000 f90d 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200001fc 	.word	0x200001fc
 8001634:	40013000 	.word	0x40013000

08001638 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b098      	sub	sp, #96	@ 0x60
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
 8001658:	611a      	str	r2, [r3, #16]
 800165a:	615a      	str	r2, [r3, #20]
 800165c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2234      	movs	r2, #52	@ 0x34
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f006 ff5d 	bl	8008524 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800166a:	4b3b      	ldr	r3, [pc, #236]	@ (8001758 <MX_TIM1_Init+0x120>)
 800166c:	4a3b      	ldr	r2, [pc, #236]	@ (800175c <MX_TIM1_Init+0x124>)
 800166e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001670:	4b39      	ldr	r3, [pc, #228]	@ (8001758 <MX_TIM1_Init+0x120>)
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <MX_TIM1_Init+0x120>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800167c:	4b36      	ldr	r3, [pc, #216]	@ (8001758 <MX_TIM1_Init+0x120>)
 800167e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001682:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001684:	4b34      	ldr	r3, [pc, #208]	@ (8001758 <MX_TIM1_Init+0x120>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800168a:	4b33      	ldr	r3, [pc, #204]	@ (8001758 <MX_TIM1_Init+0x120>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001690:	4b31      	ldr	r3, [pc, #196]	@ (8001758 <MX_TIM1_Init+0x120>)
 8001692:	2200      	movs	r2, #0
 8001694:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001696:	4830      	ldr	r0, [pc, #192]	@ (8001758 <MX_TIM1_Init+0x120>)
 8001698:	f002 ff81 	bl	800459e <HAL_TIM_PWM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80016a2:	f000 f8cf 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016b6:	4619      	mov	r1, r3
 80016b8:	4827      	ldr	r0, [pc, #156]	@ (8001758 <MX_TIM1_Init+0x120>)
 80016ba:	f003 fb65 	bl	8004d88 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80016c4:	f000 f8be 	bl	8001844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016c8:	2360      	movs	r3, #96	@ 0x60
 80016ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d0:	2300      	movs	r3, #0
 80016d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016d4:	2300      	movs	r3, #0
 80016d6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016e0:	2300      	movs	r3, #0
 80016e2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80016e8:	2200      	movs	r2, #0
 80016ea:	4619      	mov	r1, r3
 80016ec:	481a      	ldr	r0, [pc, #104]	@ (8001758 <MX_TIM1_Init+0x120>)
 80016ee:	f002 ffad 	bl	800464c <HAL_TIM_PWM_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80016f8:	f000 f8a4 	bl	8001844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001710:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001714:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800171e:	2300      	movs	r3, #0
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001722:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001726:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800172c:	2300      	movs	r3, #0
 800172e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	@ (8001758 <MX_TIM1_Init+0x120>)
 800173a:	f003 fb85 	bl	8004e48 <HAL_TIMEx_ConfigBreakDeadTime>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001744:	f000 f87e 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001748:	4803      	ldr	r0, [pc, #12]	@ (8001758 <MX_TIM1_Init+0x120>)
 800174a:	f000 fbd5 	bl	8001ef8 <HAL_TIM_MspPostInit>

}
 800174e:	bf00      	nop
 8001750:	3760      	adds	r7, #96	@ 0x60
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000260 	.word	0x20000260
 800175c:	40012c00 	.word	0x40012c00

08001760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001774:	2004      	movs	r0, #4
 8001776:	f7ff fdf2 	bl	800135e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff fdef 	bl	800135e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff fdec 	bl	800135e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_SPI_CS_GPIO_Port, FLASH_SPI_CS_Pin, GPIO_PIN_SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2110      	movs	r1, #16
 800178a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178e:	f001 f877 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFPA_CSD_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 8001792:	2200      	movs	r2, #0
 8001794:	21f2      	movs	r1, #242	@ 0xf2
 8001796:	482a      	ldr	r0, [pc, #168]	@ (8001840 <MX_GPIO_Init+0xe0>)
 8001798:	f001 f872 	bl	8002880 <HAL_GPIO_WritePin>
                          |LED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PMIC_IRQ_Pin ACC_IRQ1_Pin ACC_IRQ2_Pin */
  GPIO_InitStruct.Pin = PMIC_IRQ_Pin|ACC_IRQ1_Pin|ACC_IRQ2_Pin;
 800179c:	f640 4304 	movw	r3, #3076	@ 0xc04
 80017a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80017a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017b4:	f000 fefc 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLASH_SPI_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_SPI_CS_Pin;
 80017b8:	2310      	movs	r3, #16
 80017ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80017bc:	2311      	movs	r3, #17
 80017be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(FLASH_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017d0:	f000 feee 	bl	80025b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFPA_CSD_Pin LED1_Pin LED2_Pin LED3_Pin
                           LED4_Pin */
  GPIO_InitStruct.Pin = RFPA_CSD_Pin|LED1_Pin|LED2_Pin|LED3_Pin
 80017d4:	23f2      	movs	r3, #242	@ 0xf2
 80017d6:	607b      	str	r3, [r7, #4]
                          |LED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	4619      	mov	r1, r3
 80017e8:	4815      	ldr	r0, [pc, #84]	@ (8001840 <MX_GPIO_Init+0xe0>)
 80017ea:	f000 fee1 	bl	80025b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2028      	movs	r0, #40	@ 0x28
 80017f4:	f000 fe7d 	bl	80024f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017f8:	2028      	movs	r0, #40	@ 0x28
 80017fa:	f000 fe94 	bl	8002526 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  // Initialize PB0 as RF Power Amplifier CTX
  GPIO_InitStruct.Pin = RFPA_CTX_Pin;
 80017fe:	2301      	movs	r3, #1
 8001800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180a:	2302      	movs	r3, #2
 800180c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF6_RF_DTB0;
 800180e:	2306      	movs	r3, #6
 8001810:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RFPA_CTX_GPIO_Port, &GPIO_InitStruct);
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	4619      	mov	r1, r3
 8001816:	480a      	ldr	r0, [pc, #40]	@ (8001840 <MX_GPIO_Init+0xe0>)
 8001818:	f000 feca 	bl	80025b0 <HAL_GPIO_Init>

  // Initialize PB1 as RF Power Amplifier CSD
  GPIO_InitStruct.Pin = RFPA_CSD_Pin;
 800181c:	2302      	movs	r3, #2
 800181e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001828:	2302      	movs	r3, #2
 800182a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RFPA_CSD_GPIO_Port, &GPIO_InitStruct);
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4619      	mov	r1, r3
 8001830:	4803      	ldr	r0, [pc, #12]	@ (8001840 <MX_GPIO_Init+0xe0>)
 8001832:	f000 febd 	bl	80025b0 <HAL_GPIO_Init>

/* USER CODE END MX_GPIO_Init_2 */
}
 8001836:	bf00      	nop
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	48000400 	.word	0x48000400

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  HAL_GPIO_WritePin(GPIOB, LED4_Pin, 1);
 800184c:	2201      	movs	r2, #1
 800184e:	2180      	movs	r1, #128	@ 0x80
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <Error_Handler+0x18>)
 8001852:	f001 f815 	bl	8002880 <HAL_GPIO_WritePin>

  while (1)
 8001856:	bf00      	nop
 8001858:	e7fd      	b.n	8001856 <Error_Handler+0x12>
 800185a:	bf00      	nop
 800185c:	48000400 	.word	0x48000400

08001860 <STBY_BootManager>:

  return;
}

uint32_t STBY_BootManager(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
    STBY_BootStatus = 0;
    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_C2SB);
    LL_HSEM_ReleaseLock( HSEM, CFG_HW_PWR_STANDBY_SEMID, 0 );
  }
#else
  STBY_BootStatus = 0;
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <STBY_BootManager+0x18>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
#endif

  return STBY_BootStatus;
 800186a:	4b03      	ldr	r3, [pc, #12]	@ (8001878 <STBY_BootManager+0x18>)
 800186c:	681b      	ldr	r3, [r3, #0]
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	200002b0 	.word	0x200002b0

0800187c <LL_PWR_SetPowerMode>:
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <LL_PWR_SetPowerMode+0x24>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f023 0207 	bic.w	r2, r3, #7
 800188c:	4904      	ldr	r1, [pc, #16]	@ (80018a0 <LL_PWR_SetPowerMode+0x24>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4313      	orrs	r3, r2
 8001892:	600b      	str	r3, [r1, #0]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	58000400 	.word	0x58000400

080018a4 <LL_PWR_ClearFlag_WU>:
  * @brief  Clear Wake-up Flags
  * @rmtoll SCR          CWUF          LL_PWR_ClearFlag_WU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_WU(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWUF);
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <LL_PWR_ClearFlag_WU+0x14>)
 80018aa:	2209      	movs	r2, #9
 80018ac:	619a      	str	r2, [r3, #24]
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	58000400 	.word	0x58000400

080018bc <LL_PWR_IsActiveFlag_C2SB>:
  * @brief  System standby flag for CPU2
  * @rmtoll EXTSCR       C2SBF         LL_PWR_IsActiveFlag_C2SB
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2SB(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 80018c0:	4b07      	ldr	r3, [pc, #28]	@ (80018e0 <LL_PWR_IsActiveFlag_C2SB+0x24>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80018ce:	d101      	bne.n	80018d4 <LL_PWR_IsActiveFlag_C2SB+0x18>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	58000400 	.word	0x58000400

080018e4 <LL_PWR_IsActiveFlag_C2DS>:
  * @brief  Get deepsleep mode for CPU2
  * @rmtoll EXTSCR       C2DS          LL_PWR_IsActiveFlag_C2DS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_C2DS(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2DS) == (PWR_EXTSCR_C2DS)) ? 1UL : 0UL);
 80018e8:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <LL_PWR_IsActiveFlag_C2DS+0x24>)
 80018ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80018f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80018f6:	d101      	bne.n	80018fc <LL_PWR_IsActiveFlag_C2DS+0x18>
 80018f8:	2301      	movs	r3, #1
 80018fa:	e000      	b.n	80018fe <LL_PWR_IsActiveFlag_C2DS+0x1a>
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	58000400 	.word	0x58000400

0800190c <LL_RCC_HSE_Enable>:
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800191a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800191e:	6013      	str	r3, [r2, #0]
}
 8001920:	bf00      	nop
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_RCC_HSE_IsReady>:
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800193c:	d101      	bne.n	8001942 <LL_RCC_HSE_IsReady+0x18>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <LL_RCC_HSE_IsReady+0x1a>
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_RCC_HSI_Enable>:
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800195c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001960:	6013      	str	r3, [r2, #0]
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_RCC_HSI_IsReady>:
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800197e:	d101      	bne.n	8001984 <LL_RCC_HSI_IsReady+0x18>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <LL_RCC_HSI_IsReady+0x1a>
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_RCC_SetSysClkSource>:
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f023 0203 	bic.w	r2, r3, #3
 80019a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_RCC_GetSysClkSource>:
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80019e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
	...

080019f4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <LL_LPM_EnableSleep+0x1c>)
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <LL_LPM_EnableSleep+0x1c>)
 80019fe:	f023 0304 	bic.w	r3, r3, #4
 8001a02:	6113      	str	r3, [r2, #16]
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a18:	4b05      	ldr	r3, [pc, #20]	@ (8001a30 <LL_LPM_EnableDeepSleep+0x1c>)
 8001a1a:	691b      	ldr	r3, [r3, #16]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <LL_LPM_EnableDeepSleep+0x1c>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6113      	str	r3, [r2, #16]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	3220      	adds	r2, #32
 8001a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a48:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <LL_HSEM_1StepLock+0x2c>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d001      	beq.n	8001a52 <LL_HSEM_1StepLock+0x1e>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <LL_HSEM_1StepLock+0x20>
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	80000400 	.word	0x80000400

08001a64 <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f443 6180 	orr.w	r1, r3, #1024	@ 0x400
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <PWR_EnterOffMode>:
  * @brief Enters Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_EnterOffMode(void)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	af00      	add	r7, sp, #0
/* USER CODE END PWR_EnterOffMode_1 */
  /**
   * The systick should be disabled for the same reason than when the device enters stop mode because
   * at this time, the device may enter either OffMode or StopMode.
   */
  HAL_SuspendTick();
 8001a8e:	f000 fbd5 	bl	800223c <HAL_SuspendTick>
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001a92:	f7ff ff9d 	bl	80019d0 <LL_RCC_ClearResetFlags>

  EnterLowPower();
 8001a96:	f000 f835 	bl	8001b04 <EnterLowPower>
   * in critical section. If an interrupt occurs while in that critical section before that point,
   * the flag is set and will be cleared here but the system will not enter Off Mode
   * because an interrupt is pending in the NVIC. The ISR will be executed when moving out
   * of this critical section
   */
  LL_PWR_ClearFlag_WU();
 8001a9a:	f7ff ff03 	bl	80018a4 <LL_PWR_ClearFlag_WU>

  LL_PWR_SetPowerMode(LL_PWR_MODE_STANDBY);
 8001a9e:	2003      	movs	r0, #3
 8001aa0:	f7ff feec 	bl	800187c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001aa4:	f7ff ffb6 	bl	8001a14 <LL_LPM_EnableDeepSleep>
#endif

/* USER CODE BEGIN PWR_EnterOffMode_2 */

/* USER CODE END PWR_EnterOffMode_2 */
  return;
 8001aa8:	bf00      	nop
}
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <PWR_ExitOffMode>:
  * @brief Exits Low Power Off Mode
  * @param none
  * @retval none
  */
void PWR_ExitOffMode(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  }
#endif
/* USER CODE BEGIN PWR_ExitOffMode_2 */

/* USER CODE END PWR_ExitOffMode_2 */
  return;
 8001ab0:	bf00      	nop
}
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <PWR_EnterStopMode>:
  * @note ARM exists the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterStopMode(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
   *
   * When in production, the HAL_DBGMCU_EnableDBGStopMode() is not called so that the device can reach best power consumption
   * However, the systick should be disabled anyway to avoid the case when it is about to expire at the same time the device enters
   * stop mode (this will abort the Stop Mode entry).
   */
  HAL_SuspendTick();
 8001abe:	f000 fbbd 	bl	800223c <HAL_SuspendTick>

  /**
   * This function is called from CRITICAL SECTION
   */
  EnterLowPower();
 8001ac2:	f000 f81f 	bl	8001b04 <EnterLowPower>

  /************************************************************************************
   * ENTER STOP MODE
   ***********************************************************************************/
  LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f7ff fed8 	bl	800187c <LL_PWR_SetPowerMode>

  LL_LPM_EnableDeepSleep(); /**< Set SLEEPDEEP bit of Cortex System Control Register */
 8001acc:	f7ff ffa2 	bl	8001a14 <LL_LPM_EnableDeepSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001ad0:	bf30      	wfi

/* USER CODE BEGIN PWR_EnterStopMode_2 */

/* USER CODE END PWR_EnterStopMode_2 */
  return;
 8001ad2:	bf00      	nop
}
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <PWR_ExitStopMode>:
  * @note Enable the pll at 32MHz
  * @param none
  * @retval none
  */
void PWR_ExitStopMode(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0

/* USER CODE END PWR_ExitStopMode_1 */
  /**
   * This function is called from CRITICAL SECTION
   */
  ExitLowPower();
 8001ada:	f000 f84f 	bl	8001b7c <ExitLowPower>

  HAL_ResumeTick();
 8001ade:	f000 fbbd 	bl	800225c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitStopMode_2 */

/* USER CODE END PWR_ExitStopMode_2 */
  return;
 8001ae2:	bf00      	nop
}
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <PWR_EnterSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_EnterSleepMode(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_EnterSleepMode_1 */

/* USER CODE END PWR_EnterSleepMode_1 */

  HAL_SuspendTick();
 8001aea:	f000 fba7 	bl	800223c <HAL_SuspendTick>

  /************************************************************************************
   * ENTER SLEEP MODE
   ***********************************************************************************/
  LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001aee:	f7ff ff81 	bl	80019f4 <LL_LPM_EnableSleep>
   */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
  __force_stores();
#endif

  __WFI();
 8001af2:	bf30      	wfi
/* USER CODE BEGIN PWR_EnterSleepMode_2 */

/* USER CODE END PWR_EnterSleepMode_2 */
  return;
 8001af4:	bf00      	nop
}
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <PWR_ExitSleepMode>:
  * @note ARM exits the function when waking up
  * @param none
  * @retval none
  */
void PWR_ExitSleepMode(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
/* USER CODE BEGIN PWR_ExitSleepMode_1 */

/* USER CODE END PWR_ExitSleepMode_1 */
  HAL_ResumeTick();
 8001afc:	f000 fbae 	bl	800225c <HAL_ResumeTick>
/* USER CODE BEGIN PWR_ExitSleepMode_2 */

/* USER CODE END PWR_ExitSleepMode_2 */
  return;
 8001b00:	bf00      	nop
}
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <EnterLowPower>:
  * @brief Setup the system to enter either stop or off mode
  * @param none
  * @retval none
  */
static void EnterLowPower(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /**
   * This function is called from CRITICAL SECTION
   */

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001b08:	bf00      	nop
 8001b0a:	2103      	movs	r1, #3
 8001b0c:	4819      	ldr	r0, [pc, #100]	@ (8001b74 <EnterLowPower+0x70>)
 8001b0e:	f7ff ff91 	bl	8001a34 <LL_HSEM_1StepLock>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f8      	bne.n	8001b0a <EnterLowPower+0x6>

  if (! LL_HSEM_1StepLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID))
 8001b18:	2104      	movs	r1, #4
 8001b1a:	4816      	ldr	r0, [pc, #88]	@ (8001b74 <EnterLowPower+0x70>)
 8001b1c:	f7ff ff8a 	bl	8001a34 <LL_HSEM_1StepLock>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d117      	bne.n	8001b56 <EnterLowPower+0x52>
  {
    if(LL_PWR_IsActiveFlag_C2DS() || LL_PWR_IsActiveFlag_C2SB())
 8001b26:	f7ff fedd 	bl	80018e4 <LL_PWR_IsActiveFlag_C2DS>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d104      	bne.n	8001b3a <EnterLowPower+0x36>
 8001b30:	f7ff fec4 	bl	80018bc <LL_PWR_IsActiveFlag_C2SB>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d015      	beq.n	8001b66 <EnterLowPower+0x62>
    {
      /* Release ENTRY_STOP_MODE semaphore */
      LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <EnterLowPower+0x70>)
 8001b40:	f7ff ff90 	bl	8001a64 <LL_HSEM_ReleaseLock>

      Switch_On_HSI();
 8001b44:	f000 f852 	bl	8001bec <Switch_On_HSI>
      __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <EnterLowPower+0x74>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <EnterLowPower+0x74>)
 8001b4e:	f023 0307 	bic.w	r3, r3, #7
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e007      	b.n	8001b66 <EnterLowPower+0x62>
    }
  }
  else
  {
    Switch_On_HSI();
 8001b56:	f000 f849 	bl	8001bec <Switch_On_HSI>
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_0);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <EnterLowPower+0x74>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a06      	ldr	r2, [pc, #24]	@ (8001b78 <EnterLowPower+0x74>)
 8001b60:	f023 0307 	bic.w	r3, r3, #7
 8001b64:	6013      	str	r3, [r2, #0]
  }

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2103      	movs	r1, #3
 8001b6a:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <EnterLowPower+0x70>)
 8001b6c:	f7ff ff7a 	bl	8001a64 <LL_HSEM_ReleaseLock>

  return;
 8001b70:	bf00      	nop
}
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	58001400 	.word	0x58001400
 8001b78:	58004000 	.word	0x58004000

08001b7c <ExitLowPower>:
  * @brief Restore the system to exit stop mode
  * @param none
  * @retval none
  */
static void ExitLowPower(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Release ENTRY_STOP_MODE semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_ENTRY_STOP_MODE_SEMID, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2104      	movs	r1, #4
 8001b84:	4817      	ldr	r0, [pc, #92]	@ (8001be4 <ExitLowPower+0x68>)
 8001b86:	f7ff ff6d 	bl	8001a64 <LL_HSEM_ReleaseLock>

  while(LL_HSEM_1StepLock(HSEM, CFG_HW_RCC_SEMID));
 8001b8a:	bf00      	nop
 8001b8c:	2103      	movs	r1, #3
 8001b8e:	4815      	ldr	r0, [pc, #84]	@ (8001be4 <ExitLowPower+0x68>)
 8001b90:	f7ff ff50 	bl	8001a34 <LL_HSEM_1StepLock>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1f8      	bne.n	8001b8c <ExitLowPower+0x10>

  if(LL_RCC_GetSysClkSource() == LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001b9a:	f7ff ff0d 	bl	80019b8 <LL_RCC_GetSysClkSource>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d118      	bne.n	8001bd6 <ExitLowPower+0x5a>
  {
/* Restore the clock configuration of the application in this user section */
/* USER CODE BEGIN ExitLowPower_1 */
	  LL_RCC_HSE_Enable( );
 8001ba4:	f7ff feb2 	bl	800190c <LL_RCC_HSE_Enable>
	  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <ExitLowPower+0x6c>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f023 0307 	bic.w	r3, r3, #7
 8001bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001be8 <ExitLowPower+0x6c>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6013      	str	r3, [r2, #0]
	  while(!LL_RCC_HSE_IsReady( ));
 8001bb8:	bf00      	nop
 8001bba:	f7ff feb6 	bl	800192a <LL_RCC_HSE_IsReady>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0fa      	beq.n	8001bba <ExitLowPower+0x3e>
	  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f7ff fee3 	bl	8001990 <LL_RCC_SetSysClkSource>
	  while (LL_RCC_GetSysClkSource( ) != LL_RCC_SYS_CLKSOURCE_STATUS_HSE);
 8001bca:	bf00      	nop
 8001bcc:	f7ff fef4 	bl	80019b8 <LL_RCC_GetSysClkSource>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b08      	cmp	r3, #8
 8001bd4:	d1fa      	bne.n	8001bcc <ExitLowPower+0x50>

  __HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
#endif

  /* Release RCC semaphore */
  LL_HSEM_ReleaseLock(HSEM, CFG_HW_RCC_SEMID, 0);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2103      	movs	r1, #3
 8001bda:	4802      	ldr	r0, [pc, #8]	@ (8001be4 <ExitLowPower+0x68>)
 8001bdc:	f7ff ff42 	bl	8001a64 <LL_HSEM_ReleaseLock>

  return;
 8001be0:	bf00      	nop
}
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	58001400 	.word	0x58001400
 8001be8:	58004000 	.word	0x58004000

08001bec <Switch_On_HSI>:
  * @brief Switch the system clock on HSI
  * @param none
  * @retval none
  */
static void Switch_On_HSI(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  LL_RCC_HSI_Enable();
 8001bf0:	f7ff fead 	bl	800194e <LL_RCC_HSI_Enable>
  while(!LL_RCC_HSI_IsReady());
 8001bf4:	bf00      	nop
 8001bf6:	f7ff feb9 	bl	800196c <LL_RCC_HSI_IsReady>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0fa      	beq.n	8001bf6 <Switch_On_HSI+0xa>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001c00:	2001      	movs	r0, #1
 8001c02:	f7ff fec5 	bl	8001990 <LL_RCC_SetSysClkSource>
  while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);
 8001c06:	bf00      	nop
 8001c08:	f7ff fed6 	bl	80019b8 <LL_RCC_GetSysClkSource>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d1fa      	bne.n	8001c08 <Switch_On_HSI+0x1c>
  return;
 8001c12:	bf00      	nop
}
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <LL_RCC_EnableRTC>:
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c2e:	bf00      	nop
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_AHB2_GRP1_EnableClock>:
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001c40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c46:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
}
 8001c5e:	bf00      	nop
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b085      	sub	sp, #20
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001ca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ca8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001caa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b085      	sub	sp, #20
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ce6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	bf00      	nop
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8001d04:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001d08:	f7ff ffaf 	bl	8001c6a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	202e      	movs	r0, #46	@ 0x2e
 8001d12:	f000 fbee 	bl	80024f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8001d16:	202e      	movs	r0, #46	@ 0x2e
 8001d18:	f000 fc05 	bl	8002526 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b090      	sub	sp, #64	@ 0x40
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d38:	f107 0308 	add.w	r3, r7, #8
 8001d3c:	2224      	movs	r2, #36	@ 0x24
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f006 fbef 	bl	8008524 <memset>
  if(hi2c->Instance==I2C1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a17      	ldr	r2, [pc, #92]	@ (8001da8 <HAL_I2C_MspInit+0x88>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d126      	bne.n	8001d9e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d50:	2304      	movs	r3, #4
 8001d52:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d54:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001d58:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d5a:	f107 0308 	add.w	r3, r7, #8
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 f99e 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d6a:	f7ff fd6b 	bl	8001844 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2002      	movs	r0, #2
 8001d70:	f7ff ff62 	bl	8001c38 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SENSOR_I2C_SCL_Pin|SENSOR_I2C_SDA_Pin;
 8001d74:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7a:	2312      	movs	r3, #18
 8001d7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d82:	2300      	movs	r3, #0
 8001d84:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d86:	2304      	movs	r3, #4
 8001d88:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4806      	ldr	r0, [pc, #24]	@ (8001dac <HAL_I2C_MspInit+0x8c>)
 8001d92:	f000 fc0d 	bl	80025b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d96:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001d9a:	f7ff ff7f 	bl	8001c9c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3740      	adds	r7, #64	@ 0x40
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40005400 	.word	0x40005400
 8001dac:	48000400 	.word	0x48000400

08001db0 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001df4 <HAL_IPCC_MspInit+0x44>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d113      	bne.n	8001dea <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001dc2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001dc6:	f7ff ff50 	bl	8001c6a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	202c      	movs	r0, #44	@ 0x2c
 8001dd0:	f000 fb8f 	bl	80024f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001dd4:	202c      	movs	r0, #44	@ 0x2c
 8001dd6:	f000 fba6 	bl	8002526 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	202d      	movs	r0, #45	@ 0x2d
 8001de0:	f000 fb87 	bl	80024f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001de4:	202d      	movs	r0, #45	@ 0x2d
 8001de6:	f000 fb9e 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	58000c00 	.word	0x58000c00

08001df8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08c      	sub	sp, #48	@ 0x30
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2224      	movs	r2, #36	@ 0x24
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f006 fb8b 	bl	8008524 <memset>
  if(hrtc->Instance==RTC)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a0e      	ldr	r2, [pc, #56]	@ (8001e4c <HAL_RTC_MspInit+0x54>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d115      	bne.n	8001e44 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001e18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001e1e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 f939 	bl	80040a0 <HAL_RCCEx_PeriphCLKConfig>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001e34:	f7ff fd06 	bl	8001844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001e38:	f7ff feed 	bl	8001c16 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001e3c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e40:	f7ff ff2c 	bl	8001c9c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	3730      	adds	r7, #48	@ 0x30
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40002800 	.word	0x40002800

08001e50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a17      	ldr	r2, [pc, #92]	@ (8001ecc <HAL_SPI_MspInit+0x7c>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d128      	bne.n	8001ec4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e72:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e76:	f7ff ff2a 	bl	8001cce <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7ff fedc 	bl	8001c38 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA5     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = FLASH_SPI_SCK_Pin|FLASH_SPI_MISO_Pin;
 8001e80:	2342      	movs	r3, #66	@ 0x42
 8001e82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e90:	2305      	movs	r3, #5
 8001e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e9e:	f000 fb87 	bl	80025b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = FLASH_SPI_MOSI_Pin;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_SPI1;
 8001eb2:	2304      	movs	r3, #4
 8001eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FLASH_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001eb6:	f107 030c 	add.w	r3, r7, #12
 8001eba:	4619      	mov	r1, r3
 8001ebc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ec0:	f000 fb76 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40013000 	.word	0x40013000

08001ed0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a05      	ldr	r2, [pc, #20]	@ (8001ef4 <HAL_TIM_PWM_MspInit+0x24>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d103      	bne.n	8001eea <HAL_TIM_PWM_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ee2:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001ee6:	f7ff fef2 	bl	8001cce <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40012c00 	.word	0x40012c00

08001ef8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <HAL_TIM_MspPostInit+0x54>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d114      	bne.n	8001f44 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f7ff fe8c 	bl	8001c38 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SPKR_ALARM_Pin;
 8001f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f26:	2302      	movs	r3, #2
 8001f28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f32:	2301      	movs	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SPKR_ALARM_GPIO_Port, &GPIO_InitStruct);
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f40:	f000 fb36 	bl	80025b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40012c00 	.word	0x40012c00

08001f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <NMI_Handler+0x4>

08001f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <MemManage_Handler+0x4>

08001f68 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <BusFault_Handler+0x4>

08001f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <UsageFault_Handler+0x4>

08001f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr

08001fa2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fa6:	f000 f91d 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}

08001fae <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ACC_IRQ1_Pin);
 8001fb2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001fb6:	f000 fc95 	bl	80028e4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ACC_IRQ2_Pin);
 8001fba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001fbe:	f000 fc91 	bl	80028e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001fca:	f005 febb 	bl	8007d44 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001fd6:	f005 feeb 	bl	8007db0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001fe2:	f000 fca3 	bl	800292c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
	HW_TS_RTC_Wakeup_Handler();
 8001fee:	f7fe fe6d 	bl	8000ccc <HW_TS_RTC_Wakeup_Handler>
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001ffc:	4b22      	ldr	r3, [pc, #136]	@ (8002088 <SystemInit+0x90>)
 8001ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002002:	4a21      	ldr	r2, [pc, #132]	@ (8002088 <SystemInit+0x90>)
 8002004:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002008:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800201c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002020:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8002024:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8002026:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002030:	4b16      	ldr	r3, [pc, #88]	@ (800208c <SystemInit+0x94>)
 8002032:	4013      	ands	r3, r2
 8002034:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8002036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002042:	f023 0305 	bic.w	r3, r3, #5
 8002046:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800204a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800204e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002052:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800205e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002062:	4a0b      	ldr	r2, [pc, #44]	@ (8002090 <SystemInit+0x98>)
 8002064:	60da      	str	r2, [r3, #12]
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002066:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002070:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002074:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00
 800208c:	faf6fefb 	.word	0xfaf6fefb
 8002090:	22041000 	.word	0x22041000

08002094 <CopyDataInit>:
 8002094:	58d4      	ldr	r4, [r2, r3]
 8002096:	50c4      	str	r4, [r0, r3]
 8002098:	3304      	adds	r3, #4

0800209a <LoopCopyDataInit>:
 800209a:	18c4      	adds	r4, r0, r3
 800209c:	428c      	cmp	r4, r1
 800209e:	d3f9      	bcc.n	8002094 <CopyDataInit>
 80020a0:	4770      	bx	lr

080020a2 <FillZerobss>:
 80020a2:	6003      	str	r3, [r0, #0]
 80020a4:	3004      	adds	r0, #4

080020a6 <LoopFillZerobss>:
 80020a6:	4288      	cmp	r0, r1
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>
 80020aa:	4770      	bx	lr

080020ac <Reset_Handler>:
 80020ac:	4815      	ldr	r0, [pc, #84]	@ (8002104 <CPUcontextRestore+0xa>)
 80020ae:	4685      	mov	sp, r0
 80020b0:	f7ff fbd6 	bl	8001860 <STBY_BootManager>
 80020b4:	2801      	cmp	r0, #1
 80020b6:	d020      	beq.n	80020fa <CPUcontextRestore>
 80020b8:	b08a      	sub	sp, #40	@ 0x28
 80020ba:	f7ff ff9d 	bl	8001ff8 <SystemInit>
 80020be:	4812      	ldr	r0, [pc, #72]	@ (8002108 <CPUcontextRestore+0xe>)
 80020c0:	4912      	ldr	r1, [pc, #72]	@ (800210c <CPUcontextRestore+0x12>)
 80020c2:	4a13      	ldr	r2, [pc, #76]	@ (8002110 <CPUcontextRestore+0x16>)
 80020c4:	2300      	movs	r3, #0
 80020c6:	f7ff ffe8 	bl	800209a <LoopCopyDataInit>
 80020ca:	4812      	ldr	r0, [pc, #72]	@ (8002114 <CPUcontextRestore+0x1a>)
 80020cc:	4912      	ldr	r1, [pc, #72]	@ (8002118 <CPUcontextRestore+0x1e>)
 80020ce:	4a13      	ldr	r2, [pc, #76]	@ (800211c <CPUcontextRestore+0x22>)
 80020d0:	2300      	movs	r3, #0
 80020d2:	f7ff ffe2 	bl	800209a <LoopCopyDataInit>
 80020d6:	4812      	ldr	r0, [pc, #72]	@ (8002120 <CPUcontextRestore+0x26>)
 80020d8:	4912      	ldr	r1, [pc, #72]	@ (8002124 <CPUcontextRestore+0x2a>)
 80020da:	2300      	movs	r3, #0
 80020dc:	f7ff ffe3 	bl	80020a6 <LoopFillZerobss>
 80020e0:	f006 fa28 	bl	8008534 <__libc_init_array>
 80020e4:	f7ff f954 	bl	8001390 <main>

080020e8 <LoopForever>:
 80020e8:	e7fe      	b.n	80020e8 <LoopForever>

080020ea <CPUcontextSave>:
 80020ea:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80020ee:	4c0e      	ldr	r4, [pc, #56]	@ (8002128 <CPUcontextRestore+0x2e>)
 80020f0:	466b      	mov	r3, sp
 80020f2:	6023      	str	r3, [r4, #0]
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	bf30      	wfi

080020fa <CPUcontextRestore>:
 80020fa:	4c0b      	ldr	r4, [pc, #44]	@ (8002128 <CPUcontextRestore+0x2e>)
 80020fc:	6824      	ldr	r4, [r4, #0]
 80020fe:	46a5      	mov	sp, r4
 8002100:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
 8002104:	20003000 	.word	0x20003000
 8002108:	20000008 	.word	0x20000008
 800210c:	20000038 	.word	0x20000038
 8002110:	08008848 	.word	0x08008848
 8002114:	200301e4 	.word	0x200301e4
 8002118:	20030a67 	.word	0x20030a67
 800211c:	080088c6 	.word	0x080088c6
 8002120:	2000008c 	.word	0x2000008c
 8002124:	2000046c 	.word	0x2000046c
 8002128:	200002ac 	.word	0x200002ac

0800212c <ADC1_IRQHandler>:
 800212c:	e7fe      	b.n	800212c <ADC1_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800213a:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <HAL_Init+0x3c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a0b      	ldr	r2, [pc, #44]	@ (800216c <HAL_Init+0x3c>)
 8002140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002144:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002146:	2003      	movs	r0, #3
 8002148:	f000 f9c8 	bl	80024dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800214c:	200f      	movs	r0, #15
 800214e:	f000 f80f 	bl	8002170 <HAL_InitTick>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	71fb      	strb	r3, [r7, #7]
 800215c:	e001      	b.n	8002162 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800215e:	f7ff fdcf 	bl	8001d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002162:	79fb      	ldrb	r3, [r7, #7]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	58004000 	.word	0x58004000

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800217c:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <HAL_InitTick+0x6c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d024      	beq.n	80021ce <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002184:	f001 fde0 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <HAL_InitTick+0x6c>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	4619      	mov	r1, r3
 8002190:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002194:	fbb3 f3f1 	udiv	r3, r3, r1
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	4618      	mov	r0, r3
 800219e:	f000 f9de 	bl	800255e <HAL_SYSTICK_Config>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10f      	bne.n	80021c8 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b0f      	cmp	r3, #15
 80021ac:	d809      	bhi.n	80021c2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ae:	2200      	movs	r2, #0
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	f04f 30ff 	mov.w	r0, #4294967295
 80021b6:	f000 f99c 	bl	80024f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ba:	4a09      	ldr	r2, [pc, #36]	@ (80021e0 <HAL_InitTick+0x70>)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	e007      	b.n	80021d2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	73fb      	strb	r3, [r7, #15]
 80021c6:	e004      	b.n	80021d2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	73fb      	strb	r3, [r7, #15]
 80021cc:	e001      	b.n	80021d2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2000001c 	.word	0x2000001c
 80021e0:	20000018 	.word	0x20000018

080021e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_IncTick+0x20>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	4b06      	ldr	r3, [pc, #24]	@ (8002208 <HAL_IncTick+0x24>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	4a04      	ldr	r2, [pc, #16]	@ (8002208 <HAL_IncTick+0x24>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	2000001c 	.word	0x2000001c
 8002208:	200002b4 	.word	0x200002b4

0800220c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return uwTick;
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <HAL_GetTick+0x14>)
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	200002b4 	.word	0x200002b4

08002224 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_GetTickPrio+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000018 	.word	0x20000018

0800223c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_SuspendTick+0x1c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <HAL_SuspendTick+0x1c>)
 8002246:	f023 0302 	bic.w	r3, r3, #2
 800224a:	6013      	str	r3, [r2, #0]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002260:	4b05      	ldr	r3, [pc, #20]	@ (8002278 <HAL_ResumeTick+0x1c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <HAL_ResumeTick+0x1c>)
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	6013      	str	r3, [r2, #0]
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800228c:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002298:	4013      	ands	r3, r2
 800229a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ae:	4a04      	ldr	r2, [pc, #16]	@ (80022c0 <__NVIC_SetPriorityGrouping+0x44>)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	60d3      	str	r3, [r2, #12]
}
 80022b4:	bf00      	nop
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c8:	4b04      	ldr	r3, [pc, #16]	@ (80022dc <__NVIC_GetPriorityGrouping+0x18>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	f003 0307 	and.w	r3, r3, #7
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	4603      	mov	r3, r0
 80022e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	db0b      	blt.n	800230a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f2:	79fb      	ldrb	r3, [r7, #7]
 80022f4:	f003 021f 	and.w	r2, r3, #31
 80022f8:	4907      	ldr	r1, [pc, #28]	@ (8002318 <__NVIC_EnableIRQ+0x38>)
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	2001      	movs	r0, #1
 8002302:	fa00 f202 	lsl.w	r2, r0, r2
 8002306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db12      	blt.n	8002354 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	490a      	ldr	r1, [pc, #40]	@ (8002360 <__NVIC_DisableIRQ+0x44>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	3320      	adds	r3, #32
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002348:	f3bf 8f4f 	dsb	sy
}
 800234c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800234e:	f3bf 8f6f 	isb	sy
}
 8002352:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100

08002364 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002372:	2b00      	cmp	r3, #0
 8002374:	db0c      	blt.n	8002390 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	f003 021f 	and.w	r2, r3, #31
 800237c:	4907      	ldr	r1, [pc, #28]	@ (800239c <__NVIC_SetPendingIRQ+0x38>)
 800237e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2001      	movs	r0, #1
 8002386:	fa00 f202 	lsl.w	r2, r0, r2
 800238a:	3340      	adds	r3, #64	@ 0x40
 800238c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	db0c      	blt.n	80023cc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b2:	79fb      	ldrb	r3, [r7, #7]
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4907      	ldr	r1, [pc, #28]	@ (80023d8 <__NVIC_ClearPendingIRQ+0x38>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	095b      	lsrs	r3, r3, #5
 80023c0:	2001      	movs	r0, #1
 80023c2:	fa00 f202 	lsl.w	r2, r0, r2
 80023c6:	3360      	adds	r3, #96	@ 0x60
 80023c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	@ (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	@ (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	@ 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
         );
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	@ 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024a8:	d301      	bcc.n	80024ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00f      	b.n	80024ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ae:	4a0a      	ldr	r2, [pc, #40]	@ (80024d8 <SysTick_Config+0x40>)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b6:	210f      	movs	r1, #15
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f7ff ff8e 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c0:	4b05      	ldr	r3, [pc, #20]	@ (80024d8 <SysTick_Config+0x40>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c6:	4b04      	ldr	r3, [pc, #16]	@ (80024d8 <SysTick_Config+0x40>)
 80024c8:	2207      	movs	r2, #7
 80024ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	e000e010 	.word	0xe000e010

080024dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f7ff fec9 	bl	800227c <__NVIC_SetPriorityGrouping>
}
 80024ea:	bf00      	nop
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b086      	sub	sp, #24
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	4603      	mov	r3, r0
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff fee0 	bl	80022c4 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff90 	bl	8002430 <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5f 	bl	80023dc <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fed3 	bl	80022e0 <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff fee3 	bl	800231c <__NVIC_DisableIRQ>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ff96 	bl	8002498 <SysTick_Config>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff feed 	bl	8002364 <__NVIC_SetPendingIRQ>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fefd 	bl	80023a0 <__NVIC_ClearPendingIRQ>
}
 80025a6:	bf00      	nop
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b087      	sub	sp, #28
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025ba:	2300      	movs	r3, #0
 80025bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025be:	e146      	b.n	800284e <HAL_GPIO_Init+0x29e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2101      	movs	r1, #1
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	4013      	ands	r3, r2
 80025ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 8138 	beq.w	8002848 <HAL_GPIO_Init+0x298>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d005      	beq.n	80025f0 <HAL_GPIO_Init+0x40>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d130      	bne.n	8002652 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	2203      	movs	r2, #3
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	43db      	mvns	r3, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002626:	2201      	movs	r2, #1
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f003 0201 	and.w	r2, r3, #1
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b03      	cmp	r3, #3
 800265c:	d017      	beq.n	800268e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	2203      	movs	r2, #3
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	689a      	ldr	r2, [r3, #8]
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d123      	bne.n	80026e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	08da      	lsrs	r2, r3, #3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	3208      	adds	r2, #8
 80026a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	691a      	ldr	r2, [r3, #16]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	08da      	lsrs	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3208      	adds	r2, #8
 80026dc:	6939      	ldr	r1, [r7, #16]
 80026de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	2203      	movs	r2, #3
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	4013      	ands	r3, r2
 80026f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f003 0203 	and.w	r2, r3, #3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800271e:	2b00      	cmp	r3, #0
 8002720:	f000 8092 	beq.w	8002848 <HAL_GPIO_Init+0x298>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002724:	4a51      	ldr	r2, [pc, #324]	@ (800286c <HAL_GPIO_Init+0x2bc>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	089b      	lsrs	r3, r3, #2
 800272a:	3302      	adds	r3, #2
 800272c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002730:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	220f      	movs	r2, #15
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800274e:	d013      	beq.n	8002778 <HAL_GPIO_Init+0x1c8>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a47      	ldr	r2, [pc, #284]	@ (8002870 <HAL_GPIO_Init+0x2c0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d00d      	beq.n	8002774 <HAL_GPIO_Init+0x1c4>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a46      	ldr	r2, [pc, #280]	@ (8002874 <HAL_GPIO_Init+0x2c4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d007      	beq.n	8002770 <HAL_GPIO_Init+0x1c0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a45      	ldr	r2, [pc, #276]	@ (8002878 <HAL_GPIO_Init+0x2c8>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_GPIO_Init+0x1bc>
 8002768:	2304      	movs	r3, #4
 800276a:	e006      	b.n	800277a <HAL_GPIO_Init+0x1ca>
 800276c:	2307      	movs	r3, #7
 800276e:	e004      	b.n	800277a <HAL_GPIO_Init+0x1ca>
 8002770:	2302      	movs	r3, #2
 8002772:	e002      	b.n	800277a <HAL_GPIO_Init+0x1ca>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_GPIO_Init+0x1ca>
 8002778:	2300      	movs	r3, #0
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	f002 0203 	and.w	r2, r2, #3
 8002780:	0092      	lsls	r2, r2, #2
 8002782:	4093      	lsls	r3, r2
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800278a:	4938      	ldr	r1, [pc, #224]	@ (800286c <HAL_GPIO_Init+0x2bc>)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	089b      	lsrs	r3, r3, #2
 8002790:	3302      	adds	r3, #2
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002798:	4b38      	ldr	r3, [pc, #224]	@ (800287c <HAL_GPIO_Init+0x2cc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	43db      	mvns	r3, r3
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	4013      	ands	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <HAL_GPIO_Init+0x20c>
        {
          temp |= iocurrent;
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027bc:	4a2f      	ldr	r2, [pc, #188]	@ (800287c <HAL_GPIO_Init+0x2cc>)
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027c2:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <HAL_GPIO_Init+0x2cc>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	4013      	ands	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_GPIO_Init+0x236>
        {
          temp |= iocurrent;
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027e6:	4a25      	ldr	r2, [pc, #148]	@ (800287c <HAL_GPIO_Init+0x2cc>)
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027ec:	4b23      	ldr	r3, [pc, #140]	@ (800287c <HAL_GPIO_Init+0x2cc>)
 80027ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4013      	ands	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x262>
        {
          temp |= iocurrent;
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002812:	4a1a      	ldr	r2, [pc, #104]	@ (800287c <HAL_GPIO_Init+0x2cc>)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800281a:	4b18      	ldr	r3, [pc, #96]	@ (800287c <HAL_GPIO_Init+0x2cc>)
 800281c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002840:	4a0e      	ldr	r2, [pc, #56]	@ (800287c <HAL_GPIO_Init+0x2cc>)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	fa22 f303 	lsr.w	r3, r2, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	f47f aeb1 	bne.w	80025c0 <HAL_GPIO_Init+0x10>
  }
}
 800285e:	bf00      	nop
 8002860:	bf00      	nop
 8002862:	371c      	adds	r7, #28
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	40010000 	.word	0x40010000
 8002870:	48000400 	.word	0x48000400
 8002874:	48000800 	.word	0x48000800
 8002878:	48001000 	.word	0x48001000
 800287c:	58000800 	.word	0x58000800

08002880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
 800288c:	4613      	mov	r3, r2
 800288e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002890:	787b      	ldrb	r3, [r7, #1]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800289c:	e002      	b.n	80028a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800289e:	887a      	ldrh	r2, [r7, #2]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4013      	ands	r3, r2
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	43d9      	mvns	r1, r3
 80028ce:	887b      	ldrh	r3, [r7, #2]
 80028d0:	400b      	ands	r3, r1
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
}
 80028d8:	bf00      	nop
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028ee:	4b08      	ldr	r3, [pc, #32]	@ (8002910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	88fb      	ldrh	r3, [r7, #6]
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028fa:	4a05      	ldr	r2, [pc, #20]	@ (8002910 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002900:	88fb      	ldrh	r3, [r7, #6]
 8002902:	4618      	mov	r0, r3
 8002904:	f000 f806 	bl	8002914 <HAL_GPIO_EXTI_Callback>
  }
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	58000800 	.word	0x58000800

08002914 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	4603      	mov	r3, r0
 800291c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8002932:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <HAL_HSEM_IRQHandler+0x30>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8002938:	4b08      	ldr	r3, [pc, #32]	@ (800295c <HAL_HSEM_IRQHandler+0x30>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	43db      	mvns	r3, r3
 8002940:	4906      	ldr	r1, [pc, #24]	@ (800295c <HAL_HSEM_IRQHandler+0x30>)
 8002942:	4013      	ands	r3, r2
 8002944:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8002946:	4a05      	ldr	r2, [pc, #20]	@ (800295c <HAL_HSEM_IRQHandler+0x30>)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f807 	bl	8002960 <HAL_HSEM_FreeCallback>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	58001500 	.word	0x58001500

08002960 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e08d      	b.n	8002aa2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff f9c0 	bl	8001d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2224      	movs	r2, #36	@ 0x24
 80029a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0201 	bic.w	r2, r2, #1
 80029b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d107      	bne.n	80029ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689a      	ldr	r2, [r3, #8]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	e006      	b.n	80029fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d108      	bne.n	8002a16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685a      	ldr	r2, [r3, #4]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a12:	605a      	str	r2, [r3, #4]
 8002a14:	e007      	b.n	8002a26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695b      	ldr	r3, [r3, #20]
 8002a52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69d9      	ldr	r1, [r3, #28]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1a      	ldr	r2, [r3, #32]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d138      	bne.n	8002b32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d101      	bne.n	8002ace <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e032      	b.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2224      	movs	r2, #36	@ 0x24
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0201 	bic.w	r2, r2, #1
 8002aec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002afc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f042 0201 	orr.w	r2, r2, #1
 8002b1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2220      	movs	r2, #32
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	e000      	b.n	8002b34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b32:	2302      	movs	r3, #2
  }
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d139      	bne.n	8002bca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e033      	b.n	8002bcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2224      	movs	r2, #36	@ 0x24
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bca:	2302      	movs	r3, #2
  }
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr

08002bd8 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01e      	beq.n	8002c28 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8002bea:	4b13      	ldr	r3, [pc, #76]	@ (8002c38 <HAL_IPCC_Init+0x60>)
 8002bec:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff f8d8 	bl	8001db0 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8002c00:	68b8      	ldr	r0, [r7, #8]
 8002c02:	f000 f85b 	bl	8002cbc <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f82c 	bl	8002c70 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8002c26:	e001      	b.n	8002c2c <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	58000c00 	.word	0x58000c00

08002c3c <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	4613      	mov	r3, r2
 8002c48:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	4613      	mov	r3, r2
 8002c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e00f      	b.n	8002c9e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb4 <IPCC_SetDefaultCallbacks+0x44>)
 8002c88:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	3306      	adds	r3, #6
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	4a08      	ldr	r2, [pc, #32]	@ (8002cb8 <IPCC_SetDefaultCallbacks+0x48>)
 8002c96:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	d9ec      	bls.n	8002c7e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8002ca4:	bf00      	nop
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	08002c3d 	.word	0x08002c3d
 8002cb8:	08002c57 	.word	0x08002c57

08002cbc <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	223f      	movs	r2, #63	@ 0x3f
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a04      	ldr	r2, [pc, #16]	@ (8002d00 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	58000400 	.word	0x58000400

08002d04 <LL_PWR_EnableSRAM2Retention>:
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8002d08:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a04      	ldr	r2, [pc, #16]	@ (8002d20 <LL_PWR_EnableSRAM2Retention+0x1c>)
 8002d0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d12:	6093      	str	r3, [r2, #8]
}
 8002d14:	bf00      	nop
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	58000400 	.word	0x58000400

08002d24 <HAL_PWREx_EnableSRAMRetention>:
  * @note   On devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx retention is extended
  *         to SRAM1, SRAM2a and SRAM2b.
  * @retval None
  */
void HAL_PWREx_EnableSRAMRetention(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  LL_PWR_EnableSRAM2Retention();
 8002d28:	f7ff ffec 	bl	8002d04 <LL_PWR_EnableSRAM2Retention>
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d42:	d101      	bne.n	8002d48 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_RCC_HSE_Enable>:
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bf00      	nop
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <LL_RCC_HSE_Disable>:
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
}
 8002d86:	bf00      	nop
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_RCC_HSE_IsReady>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002da2:	d101      	bne.n	8002da8 <LL_RCC_HSE_IsReady+0x18>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <LL_RCC_HSE_IsReady+0x1a>
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_RCC_HSI_Enable>:
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002db8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_RCC_HSI_Disable>:
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002dd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002de0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002de4:	6013      	str	r3, [r2, #0]
}
 8002de6:	bf00      	nop
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_RCC_HSI_IsReady>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e02:	d101      	bne.n	8002e08 <LL_RCC_HSI_IsReady+0x18>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <LL_RCC_HSI_IsReady+0x1a>
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	604b      	str	r3, [r1, #4]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_LSE_Enable>:
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <LL_RCC_LSE_Disable>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr

08002e82 <LL_RCC_LSE_EnableBypass>:
{
 8002e82:	b480      	push	{r7}
 8002e84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_RCC_LSE_DisableBypass>:
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002eb4:	f023 0304 	bic.w	r3, r3, #4
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ebc:	bf00      	nop
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_RCC_LSE_IsReady>:
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d101      	bne.n	8002ede <LL_RCC_LSE_IsReady+0x18>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <LL_RCC_LSE_IsReady+0x1a>
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <LL_RCC_LSI1_Enable>:
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ef6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002efa:	f043 0301 	orr.w	r3, r3, #1
 8002efe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <LL_RCC_LSI1_Disable>:
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f1c:	f023 0301 	bic.w	r3, r3, #1
 8002f20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_RCC_LSI1_IsReady>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002f32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d101      	bne.n	8002f46 <LL_RCC_LSI1_IsReady+0x18>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <LL_RCC_LSI1_IsReady+0x1a>
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_LSI2_Enable>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f6a:	bf00      	nop
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_RCC_LSI2_Disable>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002f84:	f023 0304 	bic.w	r3, r3, #4
 8002f88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <LL_RCC_LSI2_IsReady>:
{
 8002f96:	b480      	push	{r7}
 8002f98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d101      	bne.n	8002fae <LL_RCC_LSI2_IsReady+0x18>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <LL_RCC_LSI2_IsReady+0x1a>
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_RCC_LSI2_SetTrimming>:
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	021b      	lsls	r3, r3, #8
 8002fd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_RCC_MSI_Enable>:
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	6013      	str	r3, [r2, #0]
}
 8002ffc:	bf00      	nop
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_RCC_MSI_Disable>:
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800300a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003014:	f023 0301 	bic.w	r3, r3, #1
 8003018:	6013      	str	r3, [r2, #0]
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <LL_RCC_MSI_IsReady>:
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003028:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d101      	bne.n	800303a <LL_RCC_MSI_IsReady+0x16>
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <LL_RCC_MSI_IsReady+0x18>
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_RCC_MSI_SetRange>:
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800304e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003058:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <LL_RCC_MSI_GetRange>:
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800307e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2bb0      	cmp	r3, #176	@ 0xb0
 8003084:	d901      	bls.n	800308a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003086:	23b0      	movs	r3, #176	@ 0xb0
 8003088:	607b      	str	r3, [r7, #4]
  return msiRange;
 800308a:	687b      	ldr	r3, [r7, #4]
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_RCC_MSI_SetCalibTrimming>:
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80030a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <LL_RCC_SetSysClkSource>:
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f023 0203 	bic.w	r2, r3, #3
 80030d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4313      	orrs	r3, r2
 80030dc:	608b      	str	r3, [r1, #8]
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <LL_RCC_GetSysClkSource>:
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80030ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 030c 	and.w	r3, r3, #12
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <LL_RCC_SetAHBPrescaler>:
{
 8003102:	b480      	push	{r7}
 8003104:	b083      	sub	sp, #12
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800310a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003114:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr

0800312a <LL_C2_RCC_SetAHBPrescaler>:
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003132:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003136:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800313a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800313e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_RCC_SetAHB4Prescaler>:
{
 8003156:	b480      	push	{r7}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800315e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003162:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003166:	f023 020f 	bic.w	r2, r3, #15
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	091b      	lsrs	r3, r3, #4
 800316e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_RCC_SetAPB1Prescaler>:
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003196:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_RCC_SetAPB2Prescaler>:
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80031b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	608b      	str	r3, [r1, #8]
}
 80031c8:	bf00      	nop
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <LL_RCC_GetAHBPrescaler>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80031d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <LL_RCC_GetAHB4Prescaler>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <LL_RCC_PLL_Enable>:
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800320c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800321a:	6013      	str	r3, [r2, #0]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_RCC_PLL_Disable>:
{
 8003226:	b480      	push	{r7}
 8003228:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800322a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003234:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003238:	6013      	str	r3, [r2, #0]
}
 800323a:	bf00      	nop
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <LL_RCC_PLL_IsReady>:
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003252:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003256:	d101      	bne.n	800325c <LL_RCC_PLL_IsReady+0x18>
 8003258:	2301      	movs	r3, #1
 800325a:	e000      	b.n	800325e <LL_RCC_PLL_IsReady+0x1a>
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_RCC_PLL_GetN>:
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800326c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <LL_RCC_PLL_GetR>:
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr

0800329a <LL_RCC_PLL_GetDivider>:
{
 800329a:	b480      	push	{r7}
 800329c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800329e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <LL_RCC_PLL_GetMainSource>:
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0303 	and.w	r3, r3, #3
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_RCC_IsActiveFlag_HPRE>:
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032dc:	d101      	bne.n	80032e2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80032f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003302:	d101      	bne.n	8003308 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800331c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003320:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003328:	d101      	bne.n	800332e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800333a:	b480      	push	{r7}
 800333c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800333e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800334c:	d101      	bne.n	8003352 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800334e:	2301      	movs	r3, #1
 8003350:	e000      	b.n	8003354 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800335e:	b480      	push	{r7}
 8003360:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800336c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003370:	d101      	bne.n	8003376 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b08d      	sub	sp, #52	@ 0x34
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e324      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	f000 808d 	beq.w	80034be <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a4:	f7ff fea1 	bl	80030ea <LL_RCC_GetSysClkSource>
 80033a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033aa:	f7ff ff82 	bl	80032b2 <LL_RCC_PLL_GetMainSource>
 80033ae:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80033b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_RCC_OscConfig+0x3e>
 80033b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b8:	2b0c      	cmp	r3, #12
 80033ba:	d147      	bne.n	800344c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80033bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d144      	bne.n	800344c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e308      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80033d2:	f7ff fe4c 	bl	800306e <LL_RCC_MSI_GetRange>
 80033d6:	4603      	mov	r3, r0
 80033d8:	429c      	cmp	r4, r3
 80033da:	d914      	bls.n	8003406 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fcc5 	bl	8003d70 <RCC_SetFlashLatencyFromMSIRange>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e2f7      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fe26 	bl	8003046 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff fe4a 	bl	8003098 <LL_RCC_MSI_SetCalibTrimming>
 8003404:	e013      	b.n	800342e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fe1b 	bl	8003046 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4618      	mov	r0, r3
 8003416:	f7ff fe3f 	bl	8003098 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fca6 	bl	8003d70 <RCC_SetFlashLatencyFromMSIRange>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e2d8      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800342e:	f000 fc8b 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003432:	4603      	mov	r3, r0
 8003434:	4aa4      	ldr	r2, [pc, #656]	@ (80036c8 <HAL_RCC_OscConfig+0x344>)
 8003436:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003438:	4ba4      	ldr	r3, [pc, #656]	@ (80036cc <HAL_RCC_OscConfig+0x348>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe fe97 	bl	8002170 <HAL_InitTick>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d039      	beq.n	80034bc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e2c9      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d01e      	beq.n	8003492 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003454:	f7ff fdc8 	bl	8002fe8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003458:	f7fe fed8 	bl	800220c <HAL_GetTick>
 800345c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003460:	f7fe fed4 	bl	800220c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e2b6      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003472:	f7ff fdd7 	bl	8003024 <LL_RCC_MSI_IsReady>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f1      	beq.n	8003460 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fde0 	bl	8003046 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff fe04 	bl	8003098 <LL_RCC_MSI_SetCalibTrimming>
 8003490:	e015      	b.n	80034be <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003492:	f7ff fdb8 	bl	8003006 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003496:	f7fe feb9 	bl	800220c <HAL_GetTick>
 800349a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800349c:	e008      	b.n	80034b0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800349e:	f7fe feb5 	bl	800220c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e297      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_MSI_IsReady() != 0U)
 80034b0:	f7ff fdb8 	bl	8003024 <LL_RCC_MSI_IsReady>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f1      	bne.n	800349e <HAL_RCC_OscConfig+0x11a>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80034bc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d047      	beq.n	800355a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ca:	f7ff fe0e 	bl	80030ea <LL_RCC_GetSysClkSource>
 80034ce:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034d0:	f7ff feef 	bl	80032b2 <LL_RCC_PLL_GetMainSource>
 80034d4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d005      	beq.n	80034e8 <HAL_RCC_OscConfig+0x164>
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	2b0c      	cmp	r3, #12
 80034e0:	d108      	bne.n	80034f4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b03      	cmp	r3, #3
 80034e6:	d105      	bne.n	80034f4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d134      	bne.n	800355a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e275      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fc:	d102      	bne.n	8003504 <HAL_RCC_OscConfig+0x180>
 80034fe:	f7ff fc29 	bl	8002d54 <LL_RCC_HSE_Enable>
 8003502:	e001      	b.n	8003508 <HAL_RCC_OscConfig+0x184>
 8003504:	f7ff fc35 	bl	8002d72 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d012      	beq.n	8003536 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fe7c 	bl	800220c <HAL_GetTick>
 8003514:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7fe fe78 	bl	800220c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	@ 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e25a      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() == 0U)
 800352a:	f7ff fc31 	bl	8002d90 <LL_RCC_HSE_IsReady>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f1      	beq.n	8003518 <HAL_RCC_OscConfig+0x194>
 8003534:	e011      	b.n	800355a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7fe fe69 	bl	800220c <HAL_GetTick>
 800353a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353e:	f7fe fe65 	bl	800220c <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b64      	cmp	r3, #100	@ 0x64
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e247      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003550:	f7ff fc1e 	bl	8002d90 <LL_RCC_HSE_IsReady>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f1      	bne.n	800353e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d04c      	beq.n	8003600 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003566:	f7ff fdc0 	bl	80030ea <LL_RCC_GetSysClkSource>
 800356a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800356c:	f7ff fea1 	bl	80032b2 <LL_RCC_PLL_GetMainSource>
 8003570:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b04      	cmp	r3, #4
 8003576:	d005      	beq.n	8003584 <HAL_RCC_OscConfig+0x200>
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d10e      	bne.n	800359c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d10b      	bne.n	800359c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e227      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fc3d 	bl	8002e14 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800359a:	e031      	b.n	8003600 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d019      	beq.n	80035d8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a4:	f7ff fc06 	bl	8002db4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a8:	f7fe fe30 	bl	800220c <HAL_GetTick>
 80035ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b0:	f7fe fe2c 	bl	800220c <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e20e      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() == 0U)
 80035c2:	f7ff fc15 	bl	8002df0 <LL_RCC_HSI_IsReady>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f1      	beq.n	80035b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fc1f 	bl	8002e14 <LL_RCC_HSI_SetCalibTrimming>
 80035d6:	e013      	b.n	8003600 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035d8:	f7ff fbfb 	bl	8002dd2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe fe16 	bl	800220c <HAL_GetTick>
 80035e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e4:	f7fe fe12 	bl	800220c <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1f4      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_HSI_IsReady() != 0U)
 80035f6:	f7ff fbfb 	bl	8002df0 <LL_RCC_HSI_IsReady>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1f1      	bne.n	80035e4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d106      	bne.n	800361a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80a3 	beq.w	8003760 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d076      	beq.n	8003710 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0310 	and.w	r3, r3, #16
 800362a:	2b00      	cmp	r3, #0
 800362c:	d046      	beq.n	80036bc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800362e:	f7ff fc7e 	bl	8002f2e <LL_RCC_LSI1_IsReady>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d113      	bne.n	8003660 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003638:	f7ff fc57 	bl	8002eea <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800363c:	f7fe fde6 	bl	800220c <HAL_GetTick>
 8003640:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003644:	f7fe fde2 	bl	800220c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e1c4      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003656:	f7ff fc6a 	bl	8002f2e <LL_RCC_LSI1_IsReady>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f1      	beq.n	8003644 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003660:	f7ff fc77 	bl	8002f52 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe fdd2 	bl	800220c <HAL_GetTick>
 8003668:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800366c:	f7fe fdce 	bl	800220c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b03      	cmp	r3, #3
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e1b0      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800367e:	f7ff fc8a 	bl	8002f96 <LL_RCC_LSI2_IsReady>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f1      	beq.n	800366c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fc94 	bl	8002fba <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003692:	f7ff fc3b 	bl	8002f0c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003696:	f7fe fdb9 	bl	800220c <HAL_GetTick>
 800369a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800369c:	e008      	b.n	80036b0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800369e:	f7fe fdb5 	bl	800220c <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e197      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80036b0:	f7ff fc3d 	bl	8002f2e <LL_RCC_LSI1_IsReady>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f1      	bne.n	800369e <HAL_RCC_OscConfig+0x31a>
 80036ba:	e051      	b.n	8003760 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80036bc:	f7ff fc15 	bl	8002eea <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe fda4 	bl	800220c <HAL_GetTick>
 80036c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036c6:	e00c      	b.n	80036e2 <HAL_RCC_OscConfig+0x35e>
 80036c8:	20000014 	.word	0x20000014
 80036cc:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036d0:	f7fe fd9c 	bl	800220c <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e17e      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80036e2:	f7ff fc24 	bl	8002f2e <LL_RCC_LSI1_IsReady>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f1      	beq.n	80036d0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80036ec:	f7ff fc42 	bl	8002f74 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036f2:	f7fe fd8b 	bl	800220c <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b03      	cmp	r3, #3
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e16d      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003704:	f7ff fc47 	bl	8002f96 <LL_RCC_LSI2_IsReady>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d1f1      	bne.n	80036f2 <HAL_RCC_OscConfig+0x36e>
 800370e:	e027      	b.n	8003760 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003710:	f7ff fc30 	bl	8002f74 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003714:	f7fe fd7a 	bl	800220c <HAL_GetTick>
 8003718:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800371c:	f7fe fd76 	bl	800220c <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b03      	cmp	r3, #3
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e158      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800372e:	f7ff fc32 	bl	8002f96 <LL_RCC_LSI2_IsReady>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d1f1      	bne.n	800371c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003738:	f7ff fbe8 	bl	8002f0c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fe fd66 	bl	800220c <HAL_GetTick>
 8003740:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003744:	f7fe fd62 	bl	800220c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e144      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003756:	f7ff fbea 	bl	8002f2e <LL_RCC_LSI1_IsReady>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f1      	bne.n	8003744 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d05b      	beq.n	8003824 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376c:	4b9e      	ldr	r3, [pc, #632]	@ (80039e8 <HAL_RCC_OscConfig+0x664>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d114      	bne.n	80037a2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003778:	f7ff fab4 	bl	8002ce4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377c:	f7fe fd46 	bl	800220c <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003784:	f7fe fd42 	bl	800220c <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e124      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003796:	4b94      	ldr	r3, [pc, #592]	@ (80039e8 <HAL_RCC_OscConfig+0x664>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0f0      	beq.n	8003784 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d102      	bne.n	80037b0 <HAL_RCC_OscConfig+0x42c>
 80037aa:	f7ff fb48 	bl	8002e3e <LL_RCC_LSE_Enable>
 80037ae:	e00c      	b.n	80037ca <HAL_RCC_OscConfig+0x446>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b05      	cmp	r3, #5
 80037b6:	d104      	bne.n	80037c2 <HAL_RCC_OscConfig+0x43e>
 80037b8:	f7ff fb63 	bl	8002e82 <LL_RCC_LSE_EnableBypass>
 80037bc:	f7ff fb3f 	bl	8002e3e <LL_RCC_LSE_Enable>
 80037c0:	e003      	b.n	80037ca <HAL_RCC_OscConfig+0x446>
 80037c2:	f7ff fb4d 	bl	8002e60 <LL_RCC_LSE_Disable>
 80037c6:	f7ff fb6d 	bl	8002ea4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d014      	beq.n	80037fc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fe fd1b 	bl	800220c <HAL_GetTick>
 80037d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fe fd17 	bl	800220c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0f7      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037f0:	f7ff fb69 	bl	8002ec6 <LL_RCC_LSE_IsReady>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d0ef      	beq.n	80037da <HAL_RCC_OscConfig+0x456>
 80037fa:	e013      	b.n	8003824 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fc:	f7fe fd06 	bl	800220c <HAL_GetTick>
 8003800:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003802:	e00a      	b.n	800381a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003804:	f7fe fd02 	bl	800220c <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003812:	4293      	cmp	r3, r2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0e2      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      while (LL_RCC_LSE_IsReady() != 0U)
 800381a:	f7ff fb54 	bl	8002ec6 <LL_RCC_LSE_IsReady>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ef      	bne.n	8003804 <HAL_RCC_OscConfig+0x480>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80d8 	beq.w	80039de <HAL_RCC_OscConfig+0x65a>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800382e:	f7ff fc5c 	bl	80030ea <LL_RCC_GetSysClkSource>
 8003832:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	2b02      	cmp	r3, #2
 8003842:	f040 80a6 	bne.w	8003992 <HAL_RCC_OscConfig+0x60e>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0203 	and.w	r2, r3, #3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003850:	429a      	cmp	r2, r3
 8003852:	d123      	bne.n	800389c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d11c      	bne.n	800389c <HAL_RCC_OscConfig+0x518>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d114      	bne.n	800389c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d10d      	bne.n	800389c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d106      	bne.n	800389c <HAL_RCC_OscConfig+0x518>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d054      	beq.n	8003946 <HAL_RCC_OscConfig+0x5c2>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d04f      	beq.n	8003942 <HAL_RCC_OscConfig+0x5be>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038a2:	f7ff fcc0 	bl	8003226 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038a6:	f7fe fcb1 	bl	800220c <HAL_GetTick>
 80038aa:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x53c>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fe fcad 	bl	800220c <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x53c>
              {
                return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e08f      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1ef      	bne.n	80038ae <HAL_RCC_OscConfig+0x52a>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	4b45      	ldr	r3, [pc, #276]	@ (80039ec <HAL_RCC_OscConfig+0x668>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038e0:	4311      	orrs	r1, r2
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038e6:	0212      	lsls	r2, r2, #8
 80038e8:	4311      	orrs	r1, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038ee:	4311      	orrs	r1, r2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038f4:	4311      	orrs	r1, r2
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038fa:	430a      	orrs	r2, r1
 80038fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003900:	4313      	orrs	r3, r2
 8003902:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003904:	f7ff fc80 	bl	8003208 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003912:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003918:	f7fe fc78 	bl	800220c <HAL_GetTick>
 800391c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x5ae>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe fc74 	bl	800220c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x5ae>
              {
                return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e056      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ef      	beq.n	8003920 <HAL_RCC_OscConfig+0x59c>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003940:	e04d      	b.n	80039de <HAL_RCC_OscConfig+0x65a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e04c      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d144      	bne.n	80039de <HAL_RCC_OscConfig+0x65a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003954:	f7ff fc58 	bl	8003208 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003958:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003966:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003968:	f7fe fc50 	bl	800220c <HAL_GetTick>
 800396c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x5fe>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe fc4c 	bl	800220c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x5fe>
            {
              return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e02e      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003982:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ef      	beq.n	8003970 <HAL_RCC_OscConfig+0x5ec>
 8003990:	e025      	b.n	80039de <HAL_RCC_OscConfig+0x65a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b0c      	cmp	r3, #12
 8003996:	d020      	beq.n	80039da <HAL_RCC_OscConfig+0x656>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	f7ff fc45 	bl	8003226 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399c:	f7fe fc36 	bl	800220c <HAL_GetTick>
 80039a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a2:	e008      	b.n	80039b6 <HAL_RCC_OscConfig+0x632>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a4:	f7fe fc32 	bl	800220c <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d901      	bls.n	80039b6 <HAL_RCC_OscConfig+0x632>
          {
            return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e014      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1ef      	bne.n	80039a4 <HAL_RCC_OscConfig+0x620>

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
#else
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLREN));
 80039c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	60d3      	str	r3, [r2, #12]
 80039d8:	e001      	b.n	80039de <HAL_RCC_OscConfig+0x65a>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e000      	b.n	80039e0 <HAL_RCC_OscConfig+0x65c>
      }
    }
  }
  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3734      	adds	r7, #52	@ 0x34
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd90      	pop	{r4, r7, pc}
 80039e8:	58000400 	.word	0x58000400
 80039ec:	11c1808c 	.word	0x11c1808c

080039f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e12d      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a04:	4b98      	ldr	r3, [pc, #608]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d91b      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b95      	ldr	r3, [pc, #596]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 0207 	bic.w	r2, r3, #7
 8003a1a:	4993      	ldr	r1, [pc, #588]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a22:	f7fe fbf3 	bl	800220c <HAL_GetTick>
 8003a26:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a2a:	f7fe fbef 	bl	800220c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e111      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d1ef      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d016      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff fb51 	bl	8003102 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a60:	f7fe fbd4 	bl	800220c <HAL_GetTick>
 8003a64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a68:	f7fe fbd0 	bl	800220c <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0f2      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a7a:	f7ff fc26 	bl	80032ca <LL_RCC_IsActiveFlag_HPRE>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f1      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d016      	beq.n	8003abe <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff fb48 	bl	800312a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a9a:	f7fe fbb7 	bl	800220c <HAL_GetTick>
 8003a9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003aa2:	f7fe fbb3 	bl	800220c <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e0d5      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ab4:	f7ff fc1b 	bl	80032ee <LL_RCC_IsActiveFlag_C2HPRE>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f1      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d016      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff fb41 	bl	8003156 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ad4:	f7fe fb9a 	bl	800220c <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003adc:	f7fe fb96 	bl	800220c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e0b8      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003aee:	f7ff fc11 	bl	8003314 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f1      	beq.n	8003adc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d016      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff fb3b 	bl	8003184 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b0e:	f7fe fb7d 	bl	800220c <HAL_GetTick>
 8003b12:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b16:	f7fe fb79 	bl	800220c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e09b      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b28:	f7ff fc07 	bl	800333a <LL_RCC_IsActiveFlag_PPRE1>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f1      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d017      	beq.n	8003b6e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7ff fb31 	bl	80031ac <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b4a:	f7fe fb5f 	bl	800220c <HAL_GetTick>
 8003b4e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b52:	f7fe fb5b 	bl	800220c <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e07d      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b64:	f7ff fbfb 	bl	800335e <LL_RCC_IsActiveFlag_PPRE2>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0f1      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d043      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003b82:	f7ff f905 	bl	8002d90 <LL_RCC_HSE_IsReady>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d11e      	bne.n	8003bca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e067      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b03      	cmp	r3, #3
 8003b96:	d106      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003b98:	f7ff fb54 	bl	8003244 <LL_RCC_PLL_IsReady>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d113      	bne.n	8003bca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e05c      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bae:	f7ff fa39 	bl	8003024 <LL_RCC_MSI_IsReady>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d108      	bne.n	8003bca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e051      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003bbc:	f7ff f918 	bl	8002df0 <LL_RCC_HSI_IsReady>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e04a      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fa77 	bl	80030c2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd4:	f7fe fb1a 	bl	800220c <HAL_GetTick>
 8003bd8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bda:	e00a      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bdc:	f7fe fb16 	bl	800220c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e036      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	f7ff fa7a 	bl	80030ea <LL_RCC_GetSysClkSource>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d1ec      	bne.n	8003bdc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c02:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d21b      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c10:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f023 0207 	bic.w	r2, r3, #7
 8003c18:	4913      	ldr	r1, [pc, #76]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c20:	f7fe faf4 	bl	800220c <HAL_GetTick>
 8003c24:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c26:	e008      	b.n	8003c3a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c28:	f7fe faf0 	bl	800220c <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e012      	b.n	8003c60 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_ClockConfig+0x278>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0307 	and.w	r3, r3, #7
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1ef      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c48:	f000 f87e 	bl	8003d48 <HAL_RCC_GetHCLKFreq>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a07      	ldr	r2, [pc, #28]	@ (8003c6c <HAL_RCC_ClockConfig+0x27c>)
 8003c50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003c52:	f7fe fae7 	bl	8002224 <HAL_GetTickPrio>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fe fa89 	bl	8002170 <HAL_InitTick>
 8003c5e:	4603      	mov	r3, r0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	58004000 	.word	0x58004000
 8003c6c:	20000014 	.word	0x20000014

08003c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c76:	f7ff fa38 	bl	80030ea <LL_RCC_GetSysClkSource>
 8003c7a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003c82:	f7ff f9f4 	bl	800306e <LL_RCC_MSI_GetRange>
 8003c86:	4603      	mov	r3, r0
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	f003 030f 	and.w	r3, r3, #15
 8003c8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003c90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e04b      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d102      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c9e:	4b28      	ldr	r3, [pc, #160]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e045      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b08      	cmp	r3, #8
 8003ca8:	d10a      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003caa:	f7ff f841 	bl	8002d30 <LL_RCC_HSE_IsEnabledDiv2>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d102      	bne.n	8003cba <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003cb4:	4b22      	ldr	r3, [pc, #136]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e03a      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003cba:	4b22      	ldr	r3, [pc, #136]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e037      	b.n	8003d30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003cc0:	f7ff faf7 	bl	80032b2 <LL_RCC_PLL_GetMainSource>
 8003cc4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d003      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x64>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0x6a>
 8003cd2:	e00d      	b.n	8003cf0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003cd6:	60bb      	str	r3, [r7, #8]
        break;
 8003cd8:	e015      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cda:	f7ff f829 	bl	8002d30 <LL_RCC_HSE_IsEnabledDiv2>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003ce4:	4b16      	ldr	r3, [pc, #88]	@ (8003d40 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ce6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003ce8:	e00d      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003cea:	4b16      	ldr	r3, [pc, #88]	@ (8003d44 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003cec:	60bb      	str	r3, [r7, #8]
        break;
 8003cee:	e00a      	b.n	8003d06 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003cf0:	f7ff f9bd 	bl	800306e <LL_RCC_MSI_GetRange>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	091b      	lsrs	r3, r3, #4
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8003d3c <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d02:	60bb      	str	r3, [r7, #8]
        break;
 8003d04:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003d06:	f7ff faaf 	bl	8003268 <LL_RCC_PLL_GetN>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	fb03 f402 	mul.w	r4, r3, r2
 8003d12:	f7ff fac2 	bl	800329a <LL_RCC_PLL_GetDivider>
 8003d16:	4603      	mov	r3, r0
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d20:	f7ff faaf 	bl	8003282 <LL_RCC_PLL_GetR>
 8003d24:	4603      	mov	r3, r0
 8003d26:	0f5b      	lsrs	r3, r3, #29
 8003d28:	3301      	adds	r3, #1
 8003d2a:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d2e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d30:	68fb      	ldr	r3, [r7, #12]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd90      	pop	{r4, r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	080087b8 	.word	0x080087b8
 8003d40:	00f42400 	.word	0x00f42400
 8003d44:	01e84800 	.word	0x01e84800

08003d48 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d48:	b598      	push	{r3, r4, r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d4c:	f7ff ff90 	bl	8003c70 <HAL_RCC_GetSysClockFreq>
 8003d50:	4604      	mov	r4, r0
 8003d52:	f7ff fa3f 	bl	80031d4 <LL_RCC_GetAHBPrescaler>
 8003d56:	4603      	mov	r3, r0
 8003d58:	091b      	lsrs	r3, r3, #4
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	4a03      	ldr	r2, [pc, #12]	@ (8003d6c <HAL_RCC_GetHCLKFreq+0x24>)
 8003d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d64:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	bd98      	pop	{r3, r4, r7, pc}
 8003d6c:	08008778 	.word	0x08008778

08003d70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2bb0      	cmp	r3, #176	@ 0xb0
 8003d7c:	d903      	bls.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003d7e:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	e007      	b.n	8003d96 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	4a10      	ldr	r2, [pc, #64]	@ (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0x60>)
 8003d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d94:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003d96:	f7ff fa29 	bl	80031ec <LL_RCC_GetAHB4Prescaler>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	091b      	lsrs	r3, r3, #4
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	4a0c      	ldr	r2, [pc, #48]	@ (8003dd4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dae:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	4a09      	ldr	r2, [pc, #36]	@ (8003dd8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003db4:	fba2 2303 	umull	r2, r3, r2, r3
 8003db8:	0c9b      	lsrs	r3, r3, #18
 8003dba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f000 f80c 	bl	8003ddc <RCC_SetFlashLatency>
 8003dc4:	4603      	mov	r3, r0
#endif /* PWR_CR1_VOS */
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	080087b8 	.word	0x080087b8
 8003dd4:	08008778 	.word	0x08008778
 8003dd8:	431bde83 	.word	0x431bde83

08003ddc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003ddc:	b590      	push	{r4, r7, lr}
 8003dde:	b08f      	sub	sp, #60	@ 0x3c
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003de6:	4b24      	ldr	r3, [pc, #144]	@ (8003e78 <RCC_SetFlashLatency+0x9c>)
 8003de8:	f107 041c 	add.w	r4, r7, #28
 8003dec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003df2:	4b22      	ldr	r3, [pc, #136]	@ (8003e7c <RCC_SetFlashLatency+0xa0>)
 8003df4:	f107 040c 	add.w	r4, r7, #12
 8003df8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003dfe:	2300      	movs	r3, #0
 8003e00:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
      }
    }
  }
#else
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e06:	e013      	b.n	8003e30 <RCC_SetFlashLatency+0x54>
  {
    if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	3338      	adds	r3, #56	@ 0x38
 8003e0e:	443b      	add	r3, r7
 8003e10:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d807      	bhi.n	8003e2a <RCC_SetFlashLatency+0x4e>
    {
      latency = FLASH_LATENCY_RANGE[index];
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	3338      	adds	r3, #56	@ 0x38
 8003e20:	443b      	add	r3, r7
 8003e22:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003e26:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8003e28:	e005      	b.n	8003e36 <RCC_SetFlashLatency+0x5a>
  for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d9e8      	bls.n	8003e08 <RCC_SetFlashLatency+0x2c>
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003e36:	4b12      	ldr	r3, [pc, #72]	@ (8003e80 <RCC_SetFlashLatency+0xa4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 0207 	bic.w	r2, r3, #7
 8003e3e:	4910      	ldr	r1, [pc, #64]	@ (8003e80 <RCC_SetFlashLatency+0xa4>)
 8003e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e42:	4313      	orrs	r3, r2
 8003e44:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003e46:	f7fe f9e1 	bl	800220c <HAL_GetTick>
 8003e4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e4c:	e008      	b.n	8003e60 <RCC_SetFlashLatency+0x84>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003e4e:	f7fe f9dd 	bl	800220c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <RCC_SetFlashLatency+0x84>
    {
      return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e007      	b.n	8003e70 <RCC_SetFlashLatency+0x94>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003e60:	4b07      	ldr	r3, [pc, #28]	@ (8003e80 <RCC_SetFlashLatency+0xa4>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d1ef      	bne.n	8003e4e <RCC_SetFlashLatency+0x72>
    }
  }
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	373c      	adds	r7, #60	@ 0x3c
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd90      	pop	{r4, r7, pc}
 8003e78:	080085cc 	.word	0x080085cc
 8003e7c:	080085dc 	.word	0x080085dc
 8003e80:	58004000 	.word	0x58004000

08003e84 <LL_RCC_LSE_IsEnabled>:
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003e88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d101      	bne.n	8003e9c <LL_RCC_LSE_IsEnabled+0x18>
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e000      	b.n	8003e9e <LL_RCC_LSE_IsEnabled+0x1a>
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_RCC_LSE_IsReady>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003eac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb4:	f003 0302 	and.w	r3, r3, #2
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d101      	bne.n	8003ec0 <LL_RCC_LSE_IsReady+0x18>
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <LL_RCC_LSE_IsReady+0x1a>
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <LL_RCC_SetRFWKPClockSource>:
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003ed4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003edc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ee0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <LL_RCC_SetUSARTClockSource>:
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f023 0203 	bic.w	r2, r3, #3
 8003f0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <LL_RCC_SetI2CClockSource>:
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f30:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f3c:	43db      	mvns	r3, r3
 8003f3e:	401a      	ands	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	011b      	lsls	r3, r3, #4
 8003f44:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8003f48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <LL_RCC_SetLPTIMClockSource>:
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	43db      	mvns	r3, r3
 8003f76:	401a      	ands	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_RCC_SetRNGClockSource>:
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003fa6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <LL_RCC_SetCLK48ClockSource>:
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_RCC_SetADCClockSource>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ffe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <LL_RCC_SetRTCClockSource>:
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004026:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800402a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4313      	orrs	r3, r2
 8004032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004036:	bf00      	nop
 8004038:	370c      	adds	r7, #12
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <LL_RCC_GetRTCClockSource>:
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004052:	4618      	mov	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <LL_RCC_ForceBackupDomainReset>:
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004068:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800406c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004074:	bf00      	nop
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_RCC_ReleaseBackupDomainReset>:
{
 800407e:	b480      	push	{r7}
 8004080:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800408e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004092:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004096:	bf00      	nop
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80040a8:	2300      	movs	r3, #0
 80040aa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80040ac:	2300      	movs	r3, #0
 80040ae:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d046      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80040bc:	f7ff ffc1 	bl	8004042 <LL_RCC_GetRTCClockSource>
 80040c0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d03c      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80040cc:	f7fe fe0a 	bl	8002ce4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ff9b 	bl	8004016 <LL_RCC_SetRTCClockSource>
 80040e0:	e02e      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80040e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ea:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80040ec:	f7ff ffb6 	bl	800405c <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80040f0:	f7ff ffc5 	bl	800407e <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	4313      	orrs	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004102:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800410c:	f7ff feba 	bl	8003e84 <LL_RCC_LSE_IsEnabled>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	d114      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004116:	f7fe f879 	bl	800220c <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800411c:	e00b      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x96>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fe f875 	bl	800220c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d902      	bls.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x96>
            {
              ret = HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	77fb      	strb	r3, [r7, #31]
              break;
 8004134:	e004      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xa0>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004136:	f7ff feb7 	bl	8003ea8 <LL_RCC_LSE_IsReady>
 800413a:	4603      	mov	r3, r0
 800413c:	2b01      	cmp	r3, #1
 800413e:	d1ee      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004140:	7ffb      	ldrb	r3, [r7, #31]
 8004142:	77bb      	strb	r3, [r7, #30]
 8004144:	e001      	b.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004146:	7ffb      	ldrb	r3, [r7, #31]
 8004148:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d004      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4618      	mov	r0, r3
 800415c:	f7ff fecc 	bl	8003ef8 <LL_RCC_SetUSARTClockSource>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	d004      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4618      	mov	r0, r3
 8004172:	f7ff fef4 	bl	8003f5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0320 	and.w	r3, r3, #32
 800417e:	2b00      	cmp	r3, #0
 8004180:	d004      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff fee9 	bl	8003f5e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d004      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fec1 	bl	8003f24 <LL_RCC_SetI2CClockSource>
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d02b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	695b      	ldr	r3, [r3, #20]
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b6:	d008      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80041c0:	d003      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fedf 	bl	8003f92 <LL_RCC_SetRNGClockSource>
 80041d4:	e00a      	b.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	2000      	movs	r0, #0
 80041e2:	f7ff fed6 	bl	8003f92 <LL_RCC_SetRNGClockSource>
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff fee9 	bl	8003fbe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80041f4:	d107      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004200:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004204:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800420e:	2b00      	cmp	r3, #0
 8004210:	d011      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	4618      	mov	r0, r3
 8004218:	f7ff fee7 	bl	8003fea <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004224:	d107      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004226:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004230:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004234:	60d3      	str	r3, [r2, #12]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d004      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	4618      	mov	r0, r3
 8004248:	f7ff fe40 	bl	8003ecc <LL_RCC_SetRFWKPClockSource>
    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800424c:	7fbb      	ldrb	r3, [r7, #30]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3720      	adds	r7, #32
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e09f      	b.n	80043aa <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fd fdba 	bl	8001df8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800428c:	4b49      	ldr	r3, [pc, #292]	@ (80043b4 <HAL_RTC_Init+0x15c>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0310 	and.w	r3, r3, #16
 8004294:	2b10      	cmp	r3, #16
 8004296:	d07e      	beq.n	8004396 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	22ca      	movs	r2, #202	@ 0xca
 800429e:	625a      	str	r2, [r3, #36]	@ 0x24
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2253      	movs	r2, #83	@ 0x53
 80042a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f8ab 	bl	8004404 <RTC_EnterInitMode>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00a      	beq.n	80042ca <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	22ff      	movs	r2, #255	@ 0xff
 80042ba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2204      	movs	r2, #4
 80042c0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	73fb      	strb	r3, [r7, #15]
 80042c8:	e067      	b.n	800439a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80042d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042dc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6899      	ldr	r1, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	431a      	orrs	r2, r3
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	68d2      	ldr	r2, [r2, #12]
 8004304:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6919      	ldr	r1, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	041a      	lsls	r2, r3, #16
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	430a      	orrs	r2, r1
 8004318:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004328:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0202 	bic.w	r2, r2, #2
 8004338:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69da      	ldr	r2, [r3, #28]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f003 0320 	and.w	r3, r3, #32
 800435c:	2b00      	cmp	r3, #0
 800435e:	d113      	bne.n	8004388 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f829 	bl	80043b8 <HAL_RTC_WaitForSynchro>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	22ff      	movs	r2, #255	@ 0xff
 8004372:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2204      	movs	r2, #4
 8004378:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e010      	b.n	80043aa <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	22ff      	movs	r2, #255	@ 0xff
 800438e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e001      	b.n	800439a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d103      	bne.n	80043a8 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40002800 	.word	0x40002800

080043b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80043ce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80043d0:	f7fd ff1c 	bl	800220c <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043d6:	e009      	b.n	80043ec <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80043d8:	f7fd ff18 	bl	800220c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80043e6:	d901      	bls.n	80043ec <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e007      	b.n	80043fc <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0320 	and.w	r3, r3, #32
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ee      	beq.n	80043d8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d119      	bne.n	800444e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004424:	f7fd fef2 	bl	800220c <HAL_GetTick>
 8004428:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800442a:	e009      	b.n	8004440 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800442c:	f7fd feee 	bl	800220c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800443a:	d901      	bls.n	8004440 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e007      	b.n	8004450 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ee      	beq.n	800442c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e095      	b.n	8004596 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446e:	2b00      	cmp	r3, #0
 8004470:	d108      	bne.n	8004484 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800447a:	d009      	beq.n	8004490 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	61da      	str	r2, [r3, #28]
 8004482:	e005      	b.n	8004490 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fd fcd0 	bl	8001e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044d0:	d902      	bls.n	80044d8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e002      	b.n	80044de <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80044d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80044e6:	d007      	beq.n	80044f8 <HAL_SPI_Init+0xa0>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004508:	431a      	orrs	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	431a      	orrs	r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004530:	431a      	orrs	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	ea42 0103 	orr.w	r1, r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004542:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	0c1b      	lsrs	r3, r3, #16
 8004554:	f003 0204 	and.w	r2, r3, #4
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	f003 0310 	and.w	r3, r3, #16
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004566:	f003 0308 	and.w	r3, r3, #8
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004574:	ea42 0103 	orr.w	r1, r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e049      	b.n	8004644 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d106      	bne.n	80045ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7fd fc83 	bl	8001ed0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2202      	movs	r2, #2
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	3304      	adds	r3, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	4610      	mov	r0, r2
 80045de:	f000 f949 	bl	8004874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004658:	2300      	movs	r3, #0
 800465a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004666:	2302      	movs	r3, #2
 8004668:	e0ff      	b.n	800486a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2b14      	cmp	r3, #20
 8004676:	f200 80f0 	bhi.w	800485a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800467a:	a201      	add	r2, pc, #4	@ (adr r2, 8004680 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046d5 	.word	0x080046d5
 8004684:	0800485b 	.word	0x0800485b
 8004688:	0800485b 	.word	0x0800485b
 800468c:	0800485b 	.word	0x0800485b
 8004690:	08004715 	.word	0x08004715
 8004694:	0800485b 	.word	0x0800485b
 8004698:	0800485b 	.word	0x0800485b
 800469c:	0800485b 	.word	0x0800485b
 80046a0:	08004757 	.word	0x08004757
 80046a4:	0800485b 	.word	0x0800485b
 80046a8:	0800485b 	.word	0x0800485b
 80046ac:	0800485b 	.word	0x0800485b
 80046b0:	08004797 	.word	0x08004797
 80046b4:	0800485b 	.word	0x0800485b
 80046b8:	0800485b 	.word	0x0800485b
 80046bc:	0800485b 	.word	0x0800485b
 80046c0:	080047d9 	.word	0x080047d9
 80046c4:	0800485b 	.word	0x0800485b
 80046c8:	0800485b 	.word	0x0800485b
 80046cc:	0800485b 	.word	0x0800485b
 80046d0:	08004819 	.word	0x08004819
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 f926 	bl	800492c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0208 	orr.w	r2, r2, #8
 80046ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	699a      	ldr	r2, [r3, #24]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0204 	bic.w	r2, r2, #4
 80046fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6999      	ldr	r1, [r3, #24]
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691a      	ldr	r2, [r3, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	619a      	str	r2, [r3, #24]
      break;
 8004712:	e0a5      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68b9      	ldr	r1, [r7, #8]
 800471a:	4618      	mov	r0, r3
 800471c:	f000 f96e 	bl	80049fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800472e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699a      	ldr	r2, [r3, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800473e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6999      	ldr	r1, [r3, #24]
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	021a      	lsls	r2, r3, #8
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	619a      	str	r2, [r3, #24]
      break;
 8004754:	e084      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 f9bb 	bl	8004ad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	69da      	ldr	r2, [r3, #28]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0208 	orr.w	r2, r2, #8
 8004770:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	69da      	ldr	r2, [r3, #28]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0204 	bic.w	r2, r2, #4
 8004780:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	69d9      	ldr	r1, [r3, #28]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	61da      	str	r2, [r3, #28]
      break;
 8004794:	e064      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fa07 	bl	8004bb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	69da      	ldr	r2, [r3, #28]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69da      	ldr	r2, [r3, #28]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69d9      	ldr	r1, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	021a      	lsls	r2, r3, #8
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	430a      	orrs	r2, r1
 80047d4:	61da      	str	r2, [r3, #28]
      break;
 80047d6:	e043      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fa38 	bl	8004c54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0208 	orr.w	r2, r2, #8
 80047f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0204 	bic.w	r2, r2, #4
 8004802:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004816:	e023      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fa64 	bl	8004cec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004832:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004842:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	021a      	lsls	r2, r3, #8
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004858:	e002      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	75fb      	strb	r3, [r7, #23]
      break;
 800485e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004868:	7dfb      	ldrb	r3, [r7, #23]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3718      	adds	r7, #24
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop

08004874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a28      	ldr	r2, [pc, #160]	@ (8004928 <TIM_Base_SetConfig+0xb4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_Base_SetConfig+0x20>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004892:	d108      	bne.n	80048a6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800489a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	68fa      	ldr	r2, [r7, #12]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004928 <TIM_Base_SetConfig+0xb4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d003      	beq.n	80048b6 <TIM_Base_SetConfig+0x42>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b4:	d108      	bne.n	80048c8 <TIM_Base_SetConfig+0x54>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68fa      	ldr	r2, [r7, #12]
 80048da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004928 <TIM_Base_SetConfig+0xb4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d103      	bne.n	80048fc <TIM_Base_SetConfig+0x88>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	691a      	ldr	r2, [r3, #16]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b01      	cmp	r3, #1
 800490c:	d105      	bne.n	800491a <TIM_Base_SetConfig+0xa6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f023 0201 	bic.w	r2, r3, #1
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	611a      	str	r2, [r3, #16]
  }
}
 800491a:	bf00      	nop
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	40012c00 	.word	0x40012c00

0800492c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a1b      	ldr	r3, [r3, #32]
 8004940:	f023 0201 	bic.w	r2, r3, #1
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800495a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800495e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0303 	bic.w	r3, r3, #3
 8004966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	4313      	orrs	r3, r2
 8004970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	f023 0302 	bic.w	r3, r3, #2
 8004978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4313      	orrs	r3, r2
 8004982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a1c      	ldr	r2, [pc, #112]	@ (80049f8 <TIM_OC1_SetConfig+0xcc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10c      	bne.n	80049a6 <TIM_OC1_SetConfig+0x7a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f023 0308 	bic.w	r3, r3, #8
 8004992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	697a      	ldr	r2, [r7, #20]
 800499a:	4313      	orrs	r3, r2
 800499c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f023 0304 	bic.w	r3, r3, #4
 80049a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a13      	ldr	r2, [pc, #76]	@ (80049f8 <TIM_OC1_SetConfig+0xcc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d111      	bne.n	80049d2 <TIM_OC1_SetConfig+0xa6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80049b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685a      	ldr	r2, [r3, #4]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	697a      	ldr	r2, [r7, #20]
 80049ea:	621a      	str	r2, [r3, #32]
}
 80049ec:	bf00      	nop
 80049ee:	371c      	adds	r7, #28
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr
 80049f8:	40012c00 	.word	0x40012c00

080049fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a1b      	ldr	r3, [r3, #32]
 8004a10:	f023 0210 	bic.w	r2, r3, #16
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f023 0320 	bic.w	r3, r3, #32
 8004a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad4 <TIM_OC2_SetConfig+0xd8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d10d      	bne.n	8004a7c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	011b      	lsls	r3, r3, #4
 8004a6e:	697a      	ldr	r2, [r7, #20]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	@ (8004ad4 <TIM_OC2_SetConfig+0xd8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d113      	bne.n	8004aac <TIM_OC2_SetConfig+0xb0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40012c00 	.word	0x40012c00

08004ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f023 0303 	bic.w	r3, r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004b24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	021b      	lsls	r3, r3, #8
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a1d      	ldr	r2, [pc, #116]	@ (8004bac <TIM_OC3_SetConfig+0xd4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10d      	bne.n	8004b56 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a14      	ldr	r2, [pc, #80]	@ (8004bac <TIM_OC3_SetConfig+0xd4>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <TIM_OC3_SetConfig+0xae>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	40012c00 	.word	0x40012c00

08004bb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b087      	sub	sp, #28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	021b      	lsls	r3, r3, #8
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	031b      	lsls	r3, r3, #12
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a10      	ldr	r2, [pc, #64]	@ (8004c50 <TIM_OC4_SetConfig+0xa0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d109      	bne.n	8004c28 <TIM_OC4_SetConfig+0x78>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	019b      	lsls	r3, r3, #6
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68fa      	ldr	r2, [r7, #12]
 8004c32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	693a      	ldr	r2, [r7, #16]
 8004c40:	621a      	str	r2, [r3, #32]
}
 8004c42:	bf00      	nop
 8004c44:	371c      	adds	r7, #28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	40012c00 	.word	0x40012c00

08004c54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b087      	sub	sp, #28
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004c98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	041b      	lsls	r3, r3, #16
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce8 <TIM_OC5_SetConfig+0x94>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d109      	bne.n	8004cc2 <TIM_OC5_SetConfig+0x6e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	621a      	str	r2, [r3, #32]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr
 8004ce8:	40012c00 	.word	0x40012c00

08004cec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b087      	sub	sp, #28
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a1b      	ldr	r3, [r3, #32]
 8004cfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	051b      	lsls	r3, r3, #20
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a10      	ldr	r2, [pc, #64]	@ (8004d84 <TIM_OC6_SetConfig+0x98>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d109      	bne.n	8004d5c <TIM_OC6_SetConfig+0x70>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	029b      	lsls	r3, r3, #10
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	621a      	str	r2, [r3, #32]
}
 8004d76:	bf00      	nop
 8004d78:	371c      	adds	r7, #28
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40012c00 	.word	0x40012c00

08004d88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	e04a      	b.n	8004e36 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d108      	bne.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004dd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a12      	ldr	r2, [pc, #72]	@ (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d004      	beq.n	8004e0a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e08:	d10c      	bne.n	8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40012c00 	.word	0x40012c00

08004e48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e06e      	b.n	8004f42 <HAL_TIMEx_ConfigBreakDeadTime+0xfa>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	041b      	lsls	r3, r3, #16
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a17      	ldr	r2, [pc, #92]	@ (8004f50 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d11c      	bne.n	8004f30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	051b      	lsls	r3, r3, #20
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3714      	adds	r7, #20
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40012c00 	.word	0x40012c00

08004f54 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8004f5e:	f107 0308 	add.w	r3, r7, #8
 8004f62:	2218      	movs	r2, #24
 8004f64:	2100      	movs	r1, #0
 8004f66:	4618      	mov	r0, r3
 8004f68:	f001 f8dd 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 8004f6c:	233f      	movs	r3, #63	@ 0x3f
 8004f6e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8004f70:	2381      	movs	r3, #129	@ 0x81
 8004f72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004f74:	1dfb      	adds	r3, r7, #7
 8004f76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8004f7c:	f107 0308 	add.w	r3, r7, #8
 8004f80:	2100      	movs	r1, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	f001 fc8c 	bl	80068a0 <hci_send_req>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	da01      	bge.n	8004f92 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004f8e:	23ff      	movs	r3, #255	@ 0xff
 8004f90:	e000      	b.n	8004f94 <aci_gap_set_non_discoverable+0x40>
  return status;
 8004f92:	79fb      	ldrb	r3, [r7, #7]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8004f9c:	b5b0      	push	{r4, r5, r7, lr}
 8004f9e:	b0ce      	sub	sp, #312	@ 0x138
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	4605      	mov	r5, r0
 8004fa4:	460c      	mov	r4, r1
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004fae:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	701a      	strb	r2, [r3, #0]
 8004fb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004fba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004fbe:	4622      	mov	r2, r4
 8004fc0:	801a      	strh	r2, [r3, #0]
 8004fc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004fc6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8004fca:	4602      	mov	r2, r0
 8004fcc:	801a      	strh	r2, [r3, #0]
 8004fce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8004fd2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8004fd6:	460a      	mov	r2, r1
 8004fd8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004fda:	f107 0310 	add.w	r3, r7, #16
 8004fde:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004fe2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	f107 0210 	add.w	r2, r7, #16
 8004fec:	4413      	add	r3, r2
 8004fee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004ff2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8004ff6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3309      	adds	r3, #9
 8004ffe:	f107 0210 	add.w	r2, r7, #16
 8005002:	4413      	add	r3, r2
 8005004:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005008:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800500c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005014:	2300      	movs	r3, #0
 8005016:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800501a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800501e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005022:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800502a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800502e:	3301      	adds	r3, #1
 8005030:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005034:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005038:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800503c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005040:	8812      	ldrh	r2, [r2, #0]
 8005042:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8005046:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800504a:	3302      	adds	r3, #2
 800504c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005050:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005054:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005058:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800505c:	8812      	ldrh	r2, [r2, #0]
 800505e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005062:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005066:	3302      	adds	r3, #2
 8005068:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800506c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005070:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005074:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005078:	7812      	ldrb	r2, [r2, #0]
 800507a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800507c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005080:	3301      	adds	r3, #1
 8005082:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8005086:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800508a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800508e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8005090:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005094:	3301      	adds	r3, #1
 8005096:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800509a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800509e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80050a2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80050a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80050a8:	3301      	adds	r3, #1
 80050aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80050ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80050b2:	3308      	adds	r3, #8
 80050b4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80050b8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80050bc:	4618      	mov	r0, r3
 80050be:	f001 f822 	bl	8006106 <Osal_MemCpy>
    index_input += Local_Name_Length;
 80050c2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80050c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80050ca:	4413      	add	r3, r2
 80050cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80050d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80050d4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80050d8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80050da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80050de:	3301      	adds	r3, #1
 80050e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80050e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80050e8:	3301      	adds	r3, #1
 80050ea:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 80050ee:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 f807 	bl	8006106 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80050f8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 80050fc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005100:	4413      	add	r3, r2
 8005102:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 8005106:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800510a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800510e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005110:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005114:	3302      	adds	r3, #2
 8005116:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800511a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800511e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005122:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005124:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005128:	3302      	adds	r3, #2
 800512a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800512e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005132:	2218      	movs	r2, #24
 8005134:	2100      	movs	r1, #0
 8005136:	4618      	mov	r0, r3
 8005138:	f000 fff5 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 800513c:	233f      	movs	r3, #63	@ 0x3f
 800513e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005142:	2383      	movs	r3, #131	@ 0x83
 8005144:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005148:	f107 0310 	add.w	r3, r7, #16
 800514c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005150:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005154:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005158:	f107 030f 	add.w	r3, r7, #15
 800515c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005160:	2301      	movs	r3, #1
 8005162:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005166:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800516a:	2100      	movs	r1, #0
 800516c:	4618      	mov	r0, r3
 800516e:	f001 fb97 	bl	80068a0 <hci_send_req>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	da01      	bge.n	800517c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8005178:	23ff      	movs	r3, #255	@ 0xff
 800517a:	e004      	b.n	8005186 <aci_gap_set_discoverable+0x1ea>
  return status;
 800517c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005180:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005184:	781b      	ldrb	r3, [r3, #0]
}
 8005186:	4618      	mov	r0, r3
 8005188:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800518c:	46bd      	mov	sp, r7
 800518e:	bdb0      	pop	{r4, r5, r7, pc}

08005190 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b0cc      	sub	sp, #304	@ 0x130
 8005194:	af00      	add	r7, sp, #0
 8005196:	4602      	mov	r2, r0
 8005198:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800519c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80051a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80051a2:	f107 0310 	add.w	r3, r7, #16
 80051a6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80051aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80051ae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80051b6:	2300      	movs	r3, #0
 80051b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80051bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80051c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80051c4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80051c8:	7812      	ldrb	r2, [r2, #0]
 80051ca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80051cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80051d0:	3301      	adds	r3, #1
 80051d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80051d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80051da:	2218      	movs	r2, #24
 80051dc:	2100      	movs	r1, #0
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 ffa1 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 80051e4:	233f      	movs	r3, #63	@ 0x3f
 80051e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 80051ea:	2385      	movs	r3, #133	@ 0x85
 80051ec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80051f0:	f107 0310 	add.w	r3, r7, #16
 80051f4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80051f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80051fc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005200:	f107 030f 	add.w	r3, r7, #15
 8005204:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005208:	2301      	movs	r3, #1
 800520a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800520e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f001 fb43 	bl	80068a0 <hci_send_req>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	da01      	bge.n	8005224 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005220:	23ff      	movs	r3, #255	@ 0xff
 8005222:	e004      	b.n	800522e <aci_gap_set_io_capability+0x9e>
  return status;
 8005224:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005228:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800522c:	781b      	ldrb	r3, [r3, #0]
}
 800522e:	4618      	mov	r0, r3
 8005230:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 8005238:	b5b0      	push	{r4, r5, r7, lr}
 800523a:	b0cc      	sub	sp, #304	@ 0x130
 800523c:	af00      	add	r7, sp, #0
 800523e:	4605      	mov	r5, r0
 8005240:	460c      	mov	r4, r1
 8005242:	4610      	mov	r0, r2
 8005244:	4619      	mov	r1, r3
 8005246:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800524a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800524e:	462a      	mov	r2, r5
 8005250:	701a      	strb	r2, [r3, #0]
 8005252:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005256:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800525a:	4622      	mov	r2, r4
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005262:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005266:	4602      	mov	r2, r0
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800526e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005272:	460a      	mov	r2, r1
 8005274:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8005276:	f107 0310 	add.w	r3, r7, #16
 800527a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800527e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005282:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8005290:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005294:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005298:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800529c:	7812      	ldrb	r2, [r2, #0]
 800529e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80052a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052a4:	3301      	adds	r3, #1
 80052a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80052aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80052ae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80052b2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80052b6:	7812      	ldrb	r2, [r2, #0]
 80052b8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80052ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052be:	3301      	adds	r3, #1
 80052c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80052c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80052c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80052cc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80052d0:	7812      	ldrb	r2, [r2, #0]
 80052d2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80052d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052d8:	3301      	adds	r3, #1
 80052da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 80052de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80052e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80052e6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80052ea:	7812      	ldrb	r2, [r2, #0]
 80052ec:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 80052ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052f2:	3301      	adds	r3, #1
 80052f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80052f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80052fc:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005300:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005302:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005306:	3301      	adds	r3, #1
 8005308:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800530c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005310:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005314:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005316:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800531a:	3301      	adds	r3, #1
 800531c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005320:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005324:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8005328:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800532a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800532e:	3301      	adds	r3, #1
 8005330:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005334:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005338:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800533c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005340:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005344:	3304      	adds	r3, #4
 8005346:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800534a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800534e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005352:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005354:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005358:	3301      	adds	r3, #1
 800535a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800535e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005362:	2218      	movs	r2, #24
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fedd 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 800536c:	233f      	movs	r3, #63	@ 0x3f
 800536e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 8005372:	2386      	movs	r3, #134	@ 0x86
 8005374:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005378:	f107 0310 	add.w	r3, r7, #16
 800537c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005380:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005384:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005388:	f107 030f 	add.w	r3, r7, #15
 800538c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005390:	2301      	movs	r3, #1
 8005392:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005396:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f001 fa7f 	bl	80068a0 <hci_send_req>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	da01      	bge.n	80053ac <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80053a8:	23ff      	movs	r3, #255	@ 0xff
 80053aa:	e004      	b.n	80053b6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80053ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053b0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80053b4:	781b      	ldrb	r3, [r3, #0]
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80053bc:	46bd      	mov	sp, r7
 80053be:	bdb0      	pop	{r4, r5, r7, pc}

080053c0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80053c0:	b590      	push	{r4, r7, lr}
 80053c2:	b0cd      	sub	sp, #308	@ 0x134
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4604      	mov	r4, r0
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80053d0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80053d4:	6013      	str	r3, [r2, #0]
 80053d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053da:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80053de:	4622      	mov	r2, r4
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053e6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80053ea:	4602      	mov	r2, r0
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053f2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80053f6:	460a      	mov	r2, r1
 80053f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80053fa:	f107 0310 	add.w	r3, r7, #16
 80053fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005402:	f107 0308 	add.w	r3, r7, #8
 8005406:	2207      	movs	r2, #7
 8005408:	2100      	movs	r1, #0
 800540a:	4618      	mov	r0, r3
 800540c:	f000 fe8b 	bl	8006126 <Osal_MemSet>
  int index_input = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005416:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800541a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800541e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005422:	7812      	ldrb	r2, [r2, #0]
 8005424:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005426:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800542a:	3301      	adds	r3, #1
 800542c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005430:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005434:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005438:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005440:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005444:	3301      	adds	r3, #1
 8005446:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800544a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800544e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005452:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800545a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800545e:	3301      	adds	r3, #1
 8005460:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005464:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005468:	2218      	movs	r2, #24
 800546a:	2100      	movs	r1, #0
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fe5a 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005472:	233f      	movs	r3, #63	@ 0x3f
 8005474:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8005478:	238a      	movs	r3, #138	@ 0x8a
 800547a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800547e:	f107 0310 	add.w	r3, r7, #16
 8005482:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005486:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800548a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800548e:	f107 0308 	add.w	r3, r7, #8
 8005492:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005496:	2307      	movs	r3, #7
 8005498:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800549c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80054a0:	2100      	movs	r1, #0
 80054a2:	4618      	mov	r0, r3
 80054a4:	f001 f9fc 	bl	80068a0 <hci_send_req>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	da01      	bge.n	80054b2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80054ae:	23ff      	movs	r3, #255	@ 0xff
 80054b0:	e02e      	b.n	8005510 <aci_gap_init+0x150>
  if ( resp.Status )
 80054b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <aci_gap_init+0x10c>
    return resp.Status;
 80054c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054c4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	e021      	b.n	8005510 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80054cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80054d4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80054d8:	b29a      	uxth	r2, r3
 80054da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80054e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80054ee:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80054f8:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80054fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005502:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005506:	b29a      	uxth	r2, r3
 8005508:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800550c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005516:	46bd      	mov	sp, r7
 8005518:	bd90      	pop	{r4, r7, pc}

0800551a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b0cc      	sub	sp, #304	@ 0x130
 800551e:	af00      	add	r7, sp, #0
 8005520:	4602      	mov	r2, r0
 8005522:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005526:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800552a:	6019      	str	r1, [r3, #0]
 800552c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005530:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005534:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005536:	f107 0310 	add.w	r3, r7, #16
 800553a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800553e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005542:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005550:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005554:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005558:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005560:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005564:	3301      	adds	r3, #1
 8005566:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800556a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800556e:	1c58      	adds	r0, r3, #1
 8005570:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005574:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800557e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	f000 fdbf 	bl	8006106 <Osal_MemCpy>
  index_input += AdvDataLen;
 8005588:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800558c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005596:	4413      	add	r3, r2
 8005598:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800559c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055a0:	2218      	movs	r2, #24
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fdbe 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 80055aa:	233f      	movs	r3, #63	@ 0x3f
 80055ac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80055b0:	238e      	movs	r3, #142	@ 0x8e
 80055b2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80055b6:	f107 0310 	add.w	r3, r7, #16
 80055ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80055be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80055c6:	f107 030f 	add.w	r3, r7, #15
 80055ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80055d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f001 f960 	bl	80068a0 <hci_send_req>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	da01      	bge.n	80055ea <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80055e6:	23ff      	movs	r3, #255	@ 0xff
 80055e8:	e004      	b.n	80055f4 <aci_gap_update_adv_data+0xda>
  return status;
 80055ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055f2:	781b      	ldrb	r3, [r3, #0]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b088      	sub	sp, #32
 8005602:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005604:	2300      	movs	r3, #0
 8005606:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005608:	f107 0308 	add.w	r3, r7, #8
 800560c:	2218      	movs	r2, #24
 800560e:	2100      	movs	r1, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fd88 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005616:	233f      	movs	r3, #63	@ 0x3f
 8005618:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800561a:	2392      	movs	r3, #146	@ 0x92
 800561c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800561e:	1dfb      	adds	r3, r7, #7
 8005620:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005622:	2301      	movs	r3, #1
 8005624:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005626:	f107 0308 	add.w	r3, r7, #8
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f001 f937 	bl	80068a0 <hci_send_req>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	da01      	bge.n	800563c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005638:	23ff      	movs	r3, #255	@ 0xff
 800563a:	e000      	b.n	800563e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800563c:	79fb      	ldrb	r3, [r7, #7]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3720      	adds	r7, #32
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b088      	sub	sp, #32
 800564a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800564c:	2300      	movs	r3, #0
 800564e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005650:	f107 0308 	add.w	r3, r7, #8
 8005654:	2218      	movs	r2, #24
 8005656:	2100      	movs	r1, #0
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fd64 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 800565e:	233f      	movs	r3, #63	@ 0x3f
 8005660:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005662:	f240 1301 	movw	r3, #257	@ 0x101
 8005666:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005668:	1dfb      	adds	r3, r7, #7
 800566a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800566c:	2301      	movs	r3, #1
 800566e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005670:	f107 0308 	add.w	r3, r7, #8
 8005674:	2100      	movs	r1, #0
 8005676:	4618      	mov	r0, r3
 8005678:	f001 f912 	bl	80068a0 <hci_send_req>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	da01      	bge.n	8005686 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005682:	23ff      	movs	r3, #255	@ 0xff
 8005684:	e000      	b.n	8005688 <aci_gatt_init+0x42>
  return status;
 8005686:	79fb      	ldrb	r3, [r7, #7]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3720      	adds	r7, #32
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005690:	b590      	push	{r4, r7, lr}
 8005692:	b0cf      	sub	sp, #316	@ 0x13c
 8005694:	af00      	add	r7, sp, #0
 8005696:	4604      	mov	r4, r0
 8005698:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800569c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80056a0:	6001      	str	r1, [r0, #0]
 80056a2:	4610      	mov	r0, r2
 80056a4:	4619      	mov	r1, r3
 80056a6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80056aa:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80056ae:	4622      	mov	r2, r4
 80056b0:	701a      	strb	r2, [r3, #0]
 80056b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80056b6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80056ba:	4602      	mov	r2, r0
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80056c2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80056c6:	460a      	mov	r2, r1
 80056c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80056ca:	f107 0310 	add.w	r3, r7, #16
 80056ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80056d2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80056d6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d00a      	beq.n	80056f6 <aci_gatt_add_service+0x66>
 80056e0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80056e4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80056e8:	781b      	ldrb	r3, [r3, #0]
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d101      	bne.n	80056f2 <aci_gatt_add_service+0x62>
 80056ee:	2311      	movs	r3, #17
 80056f0:	e002      	b.n	80056f8 <aci_gatt_add_service+0x68>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <aci_gatt_add_service+0x68>
 80056f6:	2303      	movs	r3, #3
 80056f8:	f107 0210 	add.w	r2, r7, #16
 80056fc:	4413      	add	r3, r2
 80056fe:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005702:	f107 030c 	add.w	r3, r7, #12
 8005706:	2203      	movs	r2, #3
 8005708:	2100      	movs	r1, #0
 800570a:	4618      	mov	r0, r3
 800570c:	f000 fd0b 	bl	8006126 <Osal_MemSet>
  int index_input = 0;
 8005710:	2300      	movs	r3, #0
 8005712:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005716:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800571a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800571e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005722:	7812      	ldrb	r2, [r2, #0]
 8005724:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005726:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800572a:	3301      	adds	r3, #1
 800572c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005730:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005734:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d002      	beq.n	8005744 <aci_gatt_add_service+0xb4>
 800573e:	2b02      	cmp	r3, #2
 8005740:	d004      	beq.n	800574c <aci_gatt_add_service+0xbc>
 8005742:	e007      	b.n	8005754 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005744:	2302      	movs	r3, #2
 8005746:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800574a:	e005      	b.n	8005758 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800574c:	2310      	movs	r3, #16
 800574e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005752:	e001      	b.n	8005758 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005754:	2397      	movs	r3, #151	@ 0x97
 8005756:	e06c      	b.n	8005832 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005758:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800575c:	1c58      	adds	r0, r3, #1
 800575e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005762:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005766:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800576a:	6819      	ldr	r1, [r3, #0]
 800576c:	f000 fccb 	bl	8006106 <Osal_MemCpy>
    index_input += size;
 8005770:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005774:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005778:	4413      	add	r3, r2
 800577a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800577e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005782:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005786:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800578a:	7812      	ldrb	r2, [r2, #0]
 800578c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800578e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005792:	3301      	adds	r3, #1
 8005794:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005798:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800579c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80057a0:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80057a4:	7812      	ldrb	r2, [r2, #0]
 80057a6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80057a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057ac:	3301      	adds	r3, #1
 80057ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80057b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057b6:	2218      	movs	r2, #24
 80057b8:	2100      	movs	r1, #0
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 fcb3 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 80057c0:	233f      	movs	r3, #63	@ 0x3f
 80057c2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 80057c6:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80057ca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80057ce:	f107 0310 	add.w	r3, r7, #16
 80057d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80057d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80057da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80057de:	f107 030c 	add.w	r3, r7, #12
 80057e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80057e6:	2303      	movs	r3, #3
 80057e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80057ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057f0:	2100      	movs	r1, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 f854 	bl	80068a0 <hci_send_req>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	da01      	bge.n	8005802 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80057fe:	23ff      	movs	r3, #255	@ 0xff
 8005800:	e017      	b.n	8005832 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005802:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005806:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005810:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005814:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	e00a      	b.n	8005832 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800581c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005820:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005824:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005828:	b29a      	uxth	r2, r3
 800582a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800582e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005838:	46bd      	mov	sp, r7
 800583a:	bd90      	pop	{r4, r7, pc}

0800583c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b0d1      	sub	sp, #324	@ 0x144
 8005840:	af00      	add	r7, sp, #0
 8005842:	4604      	mov	r4, r0
 8005844:	4608      	mov	r0, r1
 8005846:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800584a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800584e:	600a      	str	r2, [r1, #0]
 8005850:	4619      	mov	r1, r3
 8005852:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005856:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800585a:	4622      	mov	r2, r4
 800585c:	801a      	strh	r2, [r3, #0]
 800585e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005862:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005866:	4602      	mov	r2, r0
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800586e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005872:	460a      	mov	r2, r1
 8005874:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005876:	f107 0318 	add.w	r3, r7, #24
 800587a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800587e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005882:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d00a      	beq.n	80058a2 <aci_gatt_add_char+0x66>
 800588c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005890:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d101      	bne.n	800589e <aci_gatt_add_char+0x62>
 800589a:	2313      	movs	r3, #19
 800589c:	e002      	b.n	80058a4 <aci_gatt_add_char+0x68>
 800589e:	2303      	movs	r3, #3
 80058a0:	e000      	b.n	80058a4 <aci_gatt_add_char+0x68>
 80058a2:	2305      	movs	r3, #5
 80058a4:	f107 0218 	add.w	r2, r7, #24
 80058a8:	4413      	add	r3, r2
 80058aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80058ae:	f107 0314 	add.w	r3, r7, #20
 80058b2:	2203      	movs	r2, #3
 80058b4:	2100      	movs	r1, #0
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 fc35 	bl	8006126 <Osal_MemSet>
  int index_input = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 80058c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80058c6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80058ca:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80058ce:	8812      	ldrh	r2, [r2, #0]
 80058d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80058d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80058d6:	3302      	adds	r3, #2
 80058d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80058dc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80058e0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80058e4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80058e8:	7812      	ldrb	r2, [r2, #0]
 80058ea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80058ec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80058f0:	3301      	adds	r3, #1
 80058f2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80058f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80058fa:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d002      	beq.n	800590a <aci_gatt_add_char+0xce>
 8005904:	2b02      	cmp	r3, #2
 8005906:	d004      	beq.n	8005912 <aci_gatt_add_char+0xd6>
 8005908:	e007      	b.n	800591a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800590a:	2302      	movs	r3, #2
 800590c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005910:	e005      	b.n	800591e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005912:	2310      	movs	r3, #16
 8005914:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005918:	e001      	b.n	800591e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800591a:	2397      	movs	r3, #151	@ 0x97
 800591c:	e091      	b.n	8005a42 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800591e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005922:	1cd8      	adds	r0, r3, #3
 8005924:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005928:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800592c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005930:	6819      	ldr	r1, [r3, #0]
 8005932:	f000 fbe8 	bl	8006106 <Osal_MemCpy>
    index_input += size;
 8005936:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800593a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800593e:	4413      	add	r3, r2
 8005940:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005944:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005948:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800594c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005950:	8812      	ldrh	r2, [r2, #0]
 8005952:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005954:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005958:	3302      	adds	r3, #2
 800595a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800595e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005962:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005966:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005968:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800596c:	3301      	adds	r3, #1
 800596e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005972:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005976:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800597a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800597c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005980:	3301      	adds	r3, #1
 8005982:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005986:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800598a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800598e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005990:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005994:	3301      	adds	r3, #1
 8005996:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800599a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800599e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 80059a2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80059a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059a8:	3301      	adds	r3, #1
 80059aa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80059ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80059b2:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 80059b6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80059b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059bc:	3301      	adds	r3, #1
 80059be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80059c2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80059c6:	2218      	movs	r2, #24
 80059c8:	2100      	movs	r1, #0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fbab 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 80059d0:	233f      	movs	r3, #63	@ 0x3f
 80059d2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80059d6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80059da:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80059de:	f107 0318 	add.w	r3, r7, #24
 80059e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80059e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80059ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80059ee:	f107 0314 	add.w	r3, r7, #20
 80059f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80059f6:	2303      	movs	r3, #3
 80059f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80059fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005a00:	2100      	movs	r1, #0
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 ff4c 	bl	80068a0 <hci_send_req>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	da01      	bge.n	8005a12 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005a0e:	23ff      	movs	r3, #255	@ 0xff
 8005a10:	e017      	b.n	8005a42 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8005a12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005a16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005a20:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005a24:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	e00a      	b.n	8005a42 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8005a2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005a30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005a34:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005a3e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd90      	pop	{r4, r7, pc}

08005a4c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8005a4c:	b5b0      	push	{r4, r5, r7, lr}
 8005a4e:	b0cc      	sub	sp, #304	@ 0x130
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4605      	mov	r5, r0
 8005a54:	460c      	mov	r4, r1
 8005a56:	4610      	mov	r0, r2
 8005a58:	4619      	mov	r1, r3
 8005a5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a5e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005a62:	462a      	mov	r2, r5
 8005a64:	801a      	strh	r2, [r3, #0]
 8005a66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a6a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005a6e:	4622      	mov	r2, r4
 8005a70:	801a      	strh	r2, [r3, #0]
 8005a72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a76:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a82:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005a86:	460a      	mov	r2, r1
 8005a88:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8005a8a:	f107 0310 	add.w	r3, r7, #16
 8005a8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005a92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a96:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8005aa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005aa8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005aac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005ab0:	8812      	ldrh	r2, [r2, #0]
 8005ab2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005ab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ab8:	3302      	adds	r3, #2
 8005aba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8005abe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ac2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ac6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005aca:	8812      	ldrh	r2, [r2, #0]
 8005acc:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005ace:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8005ad8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005adc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005ae0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8005ae4:	7812      	ldrb	r2, [r2, #0]
 8005ae6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005aec:	3301      	adds	r3, #1
 8005aee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005af6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005afa:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8005afe:	7812      	ldrb	r2, [r2, #0]
 8005b00:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005b02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b06:	3301      	adds	r3, #1
 8005b08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8005b0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b10:	1d98      	adds	r0, r3, #6
 8005b12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b16:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005b22:	f000 faf0 	bl	8006106 <Osal_MemCpy>
  index_input += Char_Value_Length;
 8005b26:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b2a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005b34:	4413      	add	r3, r2
 8005b36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b3e:	2218      	movs	r2, #24
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 faef 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b48:	233f      	movs	r3, #63	@ 0x3f
 8005b4a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8005b4e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005b52:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005b56:	f107 0310 	add.w	r3, r7, #16
 8005b5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005b66:	f107 030f 	add.w	r3, r7, #15
 8005b6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005b74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b78:	2100      	movs	r1, #0
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 fe90 	bl	80068a0 <hci_send_req>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	da01      	bge.n	8005b8a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8005b86:	23ff      	movs	r3, #255	@ 0xff
 8005b88:	e004      	b.n	8005b94 <aci_gatt_update_char_value+0x148>
  return status;
 8005b8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005b8e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005b92:	781b      	ldrb	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bdb0      	pop	{r4, r5, r7, pc}

08005b9e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b0cc      	sub	sp, #304	@ 0x130
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005baa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005bae:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8005bb0:	f107 0310 	add.w	r3, r7, #16
 8005bb4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005bb8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005bbc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005bca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005bce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005bd2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005bd6:	8812      	ldrh	r2, [r2, #0]
 8005bd8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005bde:	3302      	adds	r3, #2
 8005be0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005be4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005be8:	2218      	movs	r2, #24
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 fa9a 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005bf2:	233f      	movs	r3, #63	@ 0x3f
 8005bf4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8005bf8:	f240 1325 	movw	r3, #293	@ 0x125
 8005bfc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005c00:	f107 0310 	add.w	r3, r7, #16
 8005c04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005c08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005c10:	f107 030f 	add.w	r3, r7, #15
 8005c14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005c1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005c22:	2100      	movs	r1, #0
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fe3b 	bl	80068a0 <hci_send_req>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	da01      	bge.n	8005c34 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8005c30:	23ff      	movs	r3, #255	@ 0xff
 8005c32:	e004      	b.n	8005c3e <aci_gatt_confirm_indication+0xa0>
  return status;
 8005c34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005c3c:	781b      	ldrb	r3, [r3, #0]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b0cc      	sub	sp, #304	@ 0x130
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c5c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005c60:	4602      	mov	r2, r0
 8005c62:	701a      	strb	r2, [r3, #0]
 8005c64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c68:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005c6c:	460a      	mov	r2, r1
 8005c6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8005c70:	f107 0310 	add.w	r3, r7, #16
 8005c74:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005c78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005c7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005c80:	2200      	movs	r2, #0
 8005c82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8005c8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005c8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005c92:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005c96:	7812      	ldrb	r2, [r2, #0]
 8005c98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005c9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8005ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ca8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005cac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005cb8:	3301      	adds	r3, #1
 8005cba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8005cbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005cc2:	1c98      	adds	r0, r3, #2
 8005cc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005cc8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005ccc:	781a      	ldrb	r2, [r3, #0]
 8005cce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005cd2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005cd6:	6819      	ldr	r1, [r3, #0]
 8005cd8:	f000 fa15 	bl	8006106 <Osal_MemCpy>
  index_input += Length;
 8005cdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ce0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005cea:	4413      	add	r3, r2
 8005cec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005cf0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005cf4:	2218      	movs	r2, #24
 8005cf6:	2100      	movs	r1, #0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 fa14 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005cfe:	233f      	movs	r3, #63	@ 0x3f
 8005d00:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8005d04:	230c      	movs	r3, #12
 8005d06:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005d0a:	f107 0310 	add.w	r3, r7, #16
 8005d0e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005d12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005d1a:	f107 030f 	add.w	r3, r7, #15
 8005d1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005d22:	2301      	movs	r3, #1
 8005d24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005d28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fdb6 	bl	80068a0 <hci_send_req>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	da01      	bge.n	8005d3e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8005d3a:	23ff      	movs	r3, #255	@ 0xff
 8005d3c:	e004      	b.n	8005d48 <aci_hal_write_config_data+0x100>
  return status;
 8005d3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d42:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d46:	781b      	ldrb	r3, [r3, #0]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b0cc      	sub	sp, #304	@ 0x130
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	4602      	mov	r2, r0
 8005d5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d5e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005d62:	701a      	strb	r2, [r3, #0]
 8005d64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d68:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005d6c:	460a      	mov	r2, r1
 8005d6e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8005d70:	f107 0310 	add.w	r3, r7, #16
 8005d74:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005d78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005d7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005d80:	2200      	movs	r2, #0
 8005d82:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8005d8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005d8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005d92:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005d96:	7812      	ldrb	r2, [r2, #0]
 8005d98:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005d9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005d9e:	3301      	adds	r3, #1
 8005da0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8005da4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005da8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005dac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005db0:	7812      	ldrb	r2, [r2, #0]
 8005db2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005db4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005db8:	3301      	adds	r3, #1
 8005dba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005dbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dc2:	2218      	movs	r2, #24
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 f9ad 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005dcc:	233f      	movs	r3, #63	@ 0x3f
 8005dce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8005dd2:	230f      	movs	r3, #15
 8005dd4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005dd8:	f107 0310 	add.w	r3, r7, #16
 8005ddc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005de0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005de4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005de8:	f107 030f 	add.w	r3, r7, #15
 8005dec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005df0:	2301      	movs	r3, #1
 8005df2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005df6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005dfa:	2100      	movs	r1, #0
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fd4f 	bl	80068a0 <hci_send_req>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	da01      	bge.n	8005e0c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8005e08:	23ff      	movs	r3, #255	@ 0xff
 8005e0a:	e004      	b.n	8005e16 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8005e0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e10:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005e14:	781b      	ldrb	r3, [r3, #0]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b0cc      	sub	sp, #304	@ 0x130
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4602      	mov	r2, r0
 8005e28:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e2c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005e30:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8005e32:	f107 0310 	add.w	r3, r7, #16
 8005e36:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005e3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e3e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8005e4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e54:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005e58:	8812      	ldrh	r2, [r2, #0]
 8005e5a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e60:	3302      	adds	r3, #2
 8005e62:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005e66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005e6a:	2218      	movs	r2, #24
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f959 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x3f;
 8005e74:	233f      	movs	r3, #63	@ 0x3f
 8005e76:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8005e7a:	2318      	movs	r3, #24
 8005e7c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005e80:	f107 0310 	add.w	r3, r7, #16
 8005e84:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005e88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e8c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005e90:	f107 030f 	add.w	r3, r7, #15
 8005e94:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005e9e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f000 fcfb 	bl	80068a0 <hci_send_req>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	da01      	bge.n	8005eb4 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8005eb0:	23ff      	movs	r3, #255	@ 0xff
 8005eb2:	e004      	b.n	8005ebe <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8005eb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005eb8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005ebc:	781b      	ldrb	r3, [r3, #0]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005ed2:	f107 0308 	add.w	r3, r7, #8
 8005ed6:	2218      	movs	r2, #24
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 f923 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x03;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005ee8:	1dfb      	adds	r3, r7, #7
 8005eea:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005eec:	2301      	movs	r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005ef0:	f107 0308 	add.w	r3, r7, #8
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fcd2 	bl	80068a0 <hci_send_req>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	da01      	bge.n	8005f06 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8005f02:	23ff      	movs	r3, #255	@ 0xff
 8005f04:	e000      	b.n	8005f08 <hci_reset+0x40>
  return status;
 8005f06:	79fb      	ldrb	r3, [r7, #7]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3720      	adds	r7, #32
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b0ce      	sub	sp, #312	@ 0x138
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f1a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005f1e:	6019      	str	r1, [r3, #0]
 8005f20:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005f2e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005f32:	4602      	mov	r2, r0
 8005f34:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 8005f36:	f107 0318 	add.w	r3, r7, #24
 8005f3a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005f3e:	f107 0310 	add.w	r3, r7, #16
 8005f42:	2205      	movs	r2, #5
 8005f44:	2100      	movs	r1, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 f8ed 	bl	8006126 <Osal_MemSet>
  int index_input = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Connection_Handle = Connection_Handle;
 8005f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005f56:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005f5a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005f5e:	8812      	ldrh	r2, [r2, #0]
 8005f60:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005f62:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f66:	3302      	adds	r3, #2
 8005f68:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f6c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005f70:	2218      	movs	r2, #24
 8005f72:	2100      	movs	r1, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f000 f8d6 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x08;
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x030;
 8005f80:	2330      	movs	r3, #48	@ 0x30
 8005f82:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8005f86:	f107 0318 	add.w	r3, r7, #24
 8005f8a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8005f8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005f92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8005f96:	f107 0310 	add.w	r3, r7, #16
 8005f9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8005f9e:	2305      	movs	r3, #5
 8005fa0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fa4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005fa8:	2100      	movs	r1, #0
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fc78 	bl	80068a0 <hci_send_req>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	da01      	bge.n	8005fba <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 8005fb6:	23ff      	movs	r3, #255	@ 0xff
 8005fb8:	e023      	b.n	8006002 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 8005fba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fbe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d005      	beq.n	8005fd4 <hci_le_read_phy+0xc4>
    return resp.Status;
 8005fc8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fcc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	e016      	b.n	8006002 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 8005fd4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fd8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005fdc:	78da      	ldrb	r2, [r3, #3]
 8005fde:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fe2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8005fea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005fee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005ff2:	791a      	ldrb	r2, [r3, #4]
 8005ff4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005ff8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8006000:	2300      	movs	r3, #0
}
 8006002:	4618      	mov	r0, r3
 8006004:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800600c:	b590      	push	{r4, r7, lr}
 800600e:	b0cd      	sub	sp, #308	@ 0x134
 8006010:	af00      	add	r7, sp, #0
 8006012:	4604      	mov	r4, r0
 8006014:	4608      	mov	r0, r1
 8006016:	4611      	mov	r1, r2
 8006018:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800601c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006020:	4622      	mov	r2, r4
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006028:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800602c:	4602      	mov	r2, r0
 800602e:	701a      	strb	r2, [r3, #0]
 8006030:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006034:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8006038:	460a      	mov	r2, r1
 800603a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800603c:	f107 0310 	add.w	r3, r7, #16
 8006040:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006044:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006048:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006050:	2300      	movs	r3, #0
 8006052:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8006056:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800605a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800605e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8006066:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800606a:	3301      	adds	r3, #1
 800606c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006070:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006074:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006078:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006080:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006084:	3301      	adds	r3, #1
 8006086:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800608a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800608e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006092:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8006096:	7812      	ldrb	r2, [r2, #0]
 8006098:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800609a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800609e:	3301      	adds	r3, #1
 80060a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060a8:	2218      	movs	r2, #24
 80060aa:	2100      	movs	r1, #0
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 f83a 	bl	8006126 <Osal_MemSet>
  rq.ogf = 0x08;
 80060b2:	2308      	movs	r3, #8
 80060b4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 80060b8:	2331      	movs	r3, #49	@ 0x31
 80060ba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80060be:	f107 0310 	add.w	r3, r7, #16
 80060c2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80060c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060ca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80060ce:	f107 030f 	add.w	r3, r7, #15
 80060d2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80060d6:	2301      	movs	r3, #1
 80060d8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060e0:	2100      	movs	r1, #0
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fbdc 	bl	80068a0 <hci_send_req>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	da01      	bge.n	80060f2 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80060ee:	23ff      	movs	r3, #255	@ 0xff
 80060f0:	e004      	b.n	80060fc <hci_le_set_default_phy+0xf0>
  return status;
 80060f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80060fa:	781b      	ldrb	r3, [r3, #0]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8006102:	46bd      	mov	sp, r7
 8006104:	bd90      	pop	{r4, r7, pc}

08006106 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	60f8      	str	r0, [r7, #12]
 800610e:	60b9      	str	r1, [r7, #8]
 8006110:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	68b9      	ldr	r1, [r7, #8]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f002 fa30 	bl	800857c <memcpy>
 800611c:	4603      	mov	r3, r0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8006126:	b580      	push	{r7, lr}
 8006128:	b084      	sub	sp, #16
 800612a:	af00      	add	r7, sp, #0
 800612c:	60f8      	str	r0, [r7, #12]
 800612e:	60b9      	str	r1, [r7, #8]
 8006130:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f002 f9f4 	bl	8008524 <memset>
 800613c:	4603      	mov	r3, r0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	@ 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8006150:	2300      	movs	r3, #0
 8006152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3301      	adds	r3, #1
 800615a:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2bff      	cmp	r3, #255	@ 0xff
 8006162:	d14c      	bne.n	80061fe <PeerToPeer_Event_Handler+0xb6>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	3302      	adds	r3, #2
 8006168:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	b29b      	uxth	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	f640 4301 	movw	r3, #3073	@ 0xc01
 8006176:	429a      	cmp	r2, r3
 8006178:	d13d      	bne.n	80061f6 <PeerToPeer_Event_Handler+0xae>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	3302      	adds	r3, #2
 800617e:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	885b      	ldrh	r3, [r3, #2]
 8006184:	b29b      	uxth	r3, r3
 8006186:	461a      	mov	r2, r3
 8006188:	4b20      	ldr	r3, [pc, #128]	@ (800620c <PeerToPeer_Event_Handler+0xc4>)
 800618a:	889b      	ldrh	r3, [r3, #4]
 800618c:	3302      	adds	r3, #2
 800618e:	429a      	cmp	r2, r3
 8006190:	d118      	bne.n	80061c4 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 8006192:	2301      	movs	r3, #1
 8006194:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	7a1b      	ldrb	r3, [r3, #8]
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d007      	beq.n	80061b4 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 80061a4:	2300      	movs	r3, #0
 80061a6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80061a8:	f107 0308 	add.w	r3, r7, #8
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 fc79 	bl	8007aa4 <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 80061b2:	e022      	b.n	80061fa <PeerToPeer_Event_Handler+0xb2>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 80061b4:	2301      	movs	r3, #1
 80061b6:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 80061b8:	f107 0308 	add.w	r3, r7, #8
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 fc71 	bl	8007aa4 <P2PS_STM_App_Notification>
        break;
 80061c2:	e01a      	b.n	80061fa <PeerToPeer_Event_Handler+0xb2>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	885b      	ldrh	r3, [r3, #2]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	461a      	mov	r2, r3
 80061cc:	4b0f      	ldr	r3, [pc, #60]	@ (800620c <PeerToPeer_Event_Handler+0xc4>)
 80061ce:	885b      	ldrh	r3, [r3, #2]
 80061d0:	3301      	adds	r3, #1
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d111      	bne.n	80061fa <PeerToPeer_Event_Handler+0xb2>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	88db      	ldrh	r3, [r3, #6]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	3308      	adds	r3, #8
 80061e8:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 80061ea:	f107 0308 	add.w	r3, r7, #8
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 fc58 	bl	8007aa4 <P2PS_STM_App_Notification>
        break;
 80061f4:	e001      	b.n	80061fa <PeerToPeer_Event_Handler+0xb2>

        default:
          break;
 80061f6:	bf00      	nop
 80061f8:	e002      	b.n	8006200 <PeerToPeer_Event_Handler+0xb8>
        break;
 80061fa:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80061fc:	e000      	b.n	8006200 <PeerToPeer_Event_Handler+0xb8>

    default:
      break;
 80061fe:	bf00      	nop
  }

  return(return_value);
 8006200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8006204:	4618      	mov	r0, r3
 8006206:	3728      	adds	r7, #40	@ 0x28
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000038 	.word	0x20000038

08006210 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b08a      	sub	sp, #40	@ 0x28
 8006214:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8006216:	484a      	ldr	r0, [pc, #296]	@ (8006340 <P2PS_STM_Init+0x130>)
 8006218:	f000 f94a 	bl	80064b0 <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800621c:	238f      	movs	r3, #143	@ 0x8f
 800621e:	703b      	strb	r3, [r7, #0]
 8006220:	23e5      	movs	r3, #229	@ 0xe5
 8006222:	707b      	strb	r3, [r7, #1]
 8006224:	23b3      	movs	r3, #179	@ 0xb3
 8006226:	70bb      	strb	r3, [r7, #2]
 8006228:	23d5      	movs	r3, #213	@ 0xd5
 800622a:	70fb      	strb	r3, [r7, #3]
 800622c:	232e      	movs	r3, #46	@ 0x2e
 800622e:	713b      	strb	r3, [r7, #4]
 8006230:	237f      	movs	r3, #127	@ 0x7f
 8006232:	717b      	strb	r3, [r7, #5]
 8006234:	234a      	movs	r3, #74	@ 0x4a
 8006236:	71bb      	strb	r3, [r7, #6]
 8006238:	2398      	movs	r3, #152	@ 0x98
 800623a:	71fb      	strb	r3, [r7, #7]
 800623c:	232a      	movs	r3, #42	@ 0x2a
 800623e:	723b      	strb	r3, [r7, #8]
 8006240:	2348      	movs	r3, #72	@ 0x48
 8006242:	727b      	strb	r3, [r7, #9]
 8006244:	237a      	movs	r3, #122	@ 0x7a
 8006246:	72bb      	strb	r3, [r7, #10]
 8006248:	23cc      	movs	r3, #204	@ 0xcc
 800624a:	72fb      	strb	r3, [r7, #11]
 800624c:	2340      	movs	r3, #64	@ 0x40
 800624e:	733b      	strb	r3, [r7, #12]
 8006250:	23fe      	movs	r3, #254	@ 0xfe
 8006252:	737b      	strb	r3, [r7, #13]
 8006254:	2300      	movs	r3, #0
 8006256:	73bb      	strb	r3, [r7, #14]
 8006258:	2300      	movs	r3, #0
 800625a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800625c:	4639      	mov	r1, r7
 800625e:	4b39      	ldr	r3, [pc, #228]	@ (8006344 <P2PS_STM_Init+0x134>)
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	2306      	movs	r3, #6
 8006264:	2201      	movs	r2, #1
 8006266:	2002      	movs	r0, #2
 8006268:	f7ff fa12 	bl	8005690 <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800626c:	2319      	movs	r3, #25
 800626e:	703b      	strb	r3, [r7, #0]
 8006270:	23ed      	movs	r3, #237	@ 0xed
 8006272:	707b      	strb	r3, [r7, #1]
 8006274:	2382      	movs	r3, #130	@ 0x82
 8006276:	70bb      	strb	r3, [r7, #2]
 8006278:	23ae      	movs	r3, #174	@ 0xae
 800627a:	70fb      	strb	r3, [r7, #3]
 800627c:	23ed      	movs	r3, #237	@ 0xed
 800627e:	713b      	strb	r3, [r7, #4]
 8006280:	2321      	movs	r3, #33	@ 0x21
 8006282:	717b      	strb	r3, [r7, #5]
 8006284:	234c      	movs	r3, #76	@ 0x4c
 8006286:	71bb      	strb	r3, [r7, #6]
 8006288:	239d      	movs	r3, #157	@ 0x9d
 800628a:	71fb      	strb	r3, [r7, #7]
 800628c:	2341      	movs	r3, #65	@ 0x41
 800628e:	723b      	strb	r3, [r7, #8]
 8006290:	2345      	movs	r3, #69	@ 0x45
 8006292:	727b      	strb	r3, [r7, #9]
 8006294:	2322      	movs	r3, #34	@ 0x22
 8006296:	72bb      	strb	r3, [r7, #10]
 8006298:	238e      	movs	r3, #142	@ 0x8e
 800629a:	72fb      	strb	r3, [r7, #11]
 800629c:	2341      	movs	r3, #65	@ 0x41
 800629e:	733b      	strb	r3, [r7, #12]
 80062a0:	23fe      	movs	r3, #254	@ 0xfe
 80062a2:	737b      	strb	r3, [r7, #13]
 80062a4:	2300      	movs	r3, #0
 80062a6:	73bb      	strb	r3, [r7, #14]
 80062a8:	2300      	movs	r3, #0
 80062aa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 80062ac:	4b25      	ldr	r3, [pc, #148]	@ (8006344 <P2PS_STM_Init+0x134>)
 80062ae:	8818      	ldrh	r0, [r3, #0]
 80062b0:	463a      	mov	r2, r7
 80062b2:	4b25      	ldr	r3, [pc, #148]	@ (8006348 <P2PS_STM_Init+0x138>)
 80062b4:	9305      	str	r3, [sp, #20]
 80062b6:	2301      	movs	r3, #1
 80062b8:	9304      	str	r3, [sp, #16]
 80062ba:	230a      	movs	r3, #10
 80062bc:	9303      	str	r3, [sp, #12]
 80062be:	2301      	movs	r3, #1
 80062c0:	9302      	str	r3, [sp, #8]
 80062c2:	2300      	movs	r3, #0
 80062c4:	9301      	str	r3, [sp, #4]
 80062c6:	2306      	movs	r3, #6
 80062c8:	9300      	str	r3, [sp, #0]
 80062ca:	2302      	movs	r3, #2
 80062cc:	2102      	movs	r1, #2
 80062ce:	f7ff fab5 	bl	800583c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 80062d2:	2319      	movs	r3, #25
 80062d4:	703b      	strb	r3, [r7, #0]
 80062d6:	23ed      	movs	r3, #237	@ 0xed
 80062d8:	707b      	strb	r3, [r7, #1]
 80062da:	2382      	movs	r3, #130	@ 0x82
 80062dc:	70bb      	strb	r3, [r7, #2]
 80062de:	23ae      	movs	r3, #174	@ 0xae
 80062e0:	70fb      	strb	r3, [r7, #3]
 80062e2:	23ed      	movs	r3, #237	@ 0xed
 80062e4:	713b      	strb	r3, [r7, #4]
 80062e6:	2321      	movs	r3, #33	@ 0x21
 80062e8:	717b      	strb	r3, [r7, #5]
 80062ea:	234c      	movs	r3, #76	@ 0x4c
 80062ec:	71bb      	strb	r3, [r7, #6]
 80062ee:	239d      	movs	r3, #157	@ 0x9d
 80062f0:	71fb      	strb	r3, [r7, #7]
 80062f2:	2341      	movs	r3, #65	@ 0x41
 80062f4:	723b      	strb	r3, [r7, #8]
 80062f6:	2345      	movs	r3, #69	@ 0x45
 80062f8:	727b      	strb	r3, [r7, #9]
 80062fa:	2322      	movs	r3, #34	@ 0x22
 80062fc:	72bb      	strb	r3, [r7, #10]
 80062fe:	238e      	movs	r3, #142	@ 0x8e
 8006300:	72fb      	strb	r3, [r7, #11]
 8006302:	2342      	movs	r3, #66	@ 0x42
 8006304:	733b      	strb	r3, [r7, #12]
 8006306:	23fe      	movs	r3, #254	@ 0xfe
 8006308:	737b      	strb	r3, [r7, #13]
 800630a:	2300      	movs	r3, #0
 800630c:	73bb      	strb	r3, [r7, #14]
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8006312:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <P2PS_STM_Init+0x134>)
 8006314:	8818      	ldrh	r0, [r3, #0]
 8006316:	463a      	mov	r2, r7
 8006318:	4b0c      	ldr	r3, [pc, #48]	@ (800634c <P2PS_STM_Init+0x13c>)
 800631a:	9305      	str	r3, [sp, #20]
 800631c:	2301      	movs	r3, #1
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	230a      	movs	r3, #10
 8006322:	9303      	str	r3, [sp, #12]
 8006324:	2301      	movs	r3, #1
 8006326:	9302      	str	r3, [sp, #8]
 8006328:	2300      	movs	r3, #0
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	2310      	movs	r3, #16
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	2302      	movs	r3, #2
 8006332:	2102      	movs	r1, #2
 8006334:	f7ff fa82 	bl	800583c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8006338:	bf00      	nop
}
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	08006149 	.word	0x08006149
 8006344:	20000038 	.word	0x20000038
 8006348:	2000003a 	.word	0x2000003a
 800634c:	2000003c 	.word	0x2000003c

08006350 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  return;
 8006354:	bf00      	nop
}
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800635e:	b480      	push	{r7}
 8006360:	af00      	add	r7, sp, #0
  return;
 8006362:	bf00      	nop
}
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  return;
 8006370:	bf00      	nop
}
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800637a:	b480      	push	{r7}
 800637c:	af00      	add	r7, sp, #0
  return;
 800637e:	bf00      	nop
}
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006388:	b480      	push	{r7}
 800638a:	af00      	add	r7, sp, #0
  return;
 800638c:	bf00      	nop
}
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006396:	b480      	push	{r7}
 8006398:	af00      	add	r7, sp, #0
  return;
 800639a:	bf00      	nop
}
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80063a4:	b480      	push	{r7}
 80063a6:	af00      	add	r7, sp, #0
  return;
 80063a8:	bf00      	nop
}
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr

080063b2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80063b2:	b480      	push	{r7}
 80063b4:	af00      	add	r7, sp, #0
  return;
 80063b6:	bf00      	nop
}
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  return;
 80063c4:	bf00      	nop
}
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr

080063ce <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80063ce:	b480      	push	{r7}
 80063d0:	af00      	add	r7, sp, #0
  return;
 80063d2:	bf00      	nop
}
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  return;
 80063e0:	bf00      	nop
}
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80063ea:	b480      	push	{r7}
 80063ec:	af00      	add	r7, sp, #0
  return;
 80063ee:	bf00      	nop
}
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 80063f8:	b480      	push	{r7}
 80063fa:	af00      	add	r7, sp, #0
  return;
 80063fc:	bf00      	nop
}
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8006406:	b480      	push	{r7}
 8006408:	af00      	add	r7, sp, #0
  return;
 800640a:	bf00      	nop
}
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  return;
 8006418:	bf00      	nop
}
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8006422:	b480      	push	{r7}
 8006424:	af00      	add	r7, sp, #0
  return;
 8006426:	bf00      	nop
}
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  return;
 8006434:	bf00      	nop
}
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8006444:	4b04      	ldr	r3, [pc, #16]	@ (8006458 <SVCCTL_Init+0x18>)
 8006446:	2200      	movs	r2, #0
 8006448:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800644a:	4b04      	ldr	r3, [pc, #16]	@ (800645c <SVCCTL_Init+0x1c>)
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006450:	f000 f806 	bl	8006460 <SVCCTL_SvcInit>

  return;
 8006454:	bf00      	nop
}
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20000040 	.word	0x20000040
 800645c:	20000060 	.word	0x20000060

08006460 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  BAS_Init();
 8006464:	f7ff ff74 	bl	8006350 <BAS_Init>

  BLS_Init();
 8006468:	f7ff ff79 	bl	800635e <BLS_Init>

  CRS_STM_Init();
 800646c:	f7ff ff7e 	bl	800636c <CRS_STM_Init>

  DIS_Init();
 8006470:	f7ff ff83 	bl	800637a <DIS_Init>

  EDS_STM_Init();
 8006474:	f7ff ff88 	bl	8006388 <EDS_STM_Init>

  HIDS_Init();
 8006478:	f7ff ff8d 	bl	8006396 <HIDS_Init>

  HRS_Init();
 800647c:	f7ff ff92 	bl	80063a4 <HRS_Init>

  HTS_Init();
 8006480:	f7ff ff97 	bl	80063b2 <HTS_Init>

  IAS_Init();
 8006484:	f7ff ff9c 	bl	80063c0 <IAS_Init>

  LLS_Init();
 8006488:	f7ff ffa1 	bl	80063ce <LLS_Init>

  TPS_Init();
 800648c:	f7ff ffa6 	bl	80063dc <TPS_Init>

  MOTENV_STM_Init();
 8006490:	f7ff ffab 	bl	80063ea <MOTENV_STM_Init>

  P2PS_STM_Init();
 8006494:	f7ff febc 	bl	8006210 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006498:	f7ff ffae 	bl	80063f8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800649c:	f7ff ffb3 	bl	8006406 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80064a0:	f7ff ffbf 	bl	8006422 <BVOPUS_STM_Init>

  MESH_Init();
 80064a4:	f7ff ffb6 	bl	8006414 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80064a8:	f7ff ffc2 	bl	8006430 <SVCCTL_InitCustomSvc>
  
  return;
 80064ac:	bf00      	nop
}
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80064b8:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80064ba:	7f1b      	ldrb	r3, [r3, #28]
 80064bc:	4619      	mov	r1, r3
 80064be:	4a08      	ldr	r2, [pc, #32]	@ (80064e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80064c6:	4b06      	ldr	r3, [pc, #24]	@ (80064e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80064c8:	7f1b      	ldrb	r3, [r3, #28]
 80064ca:	3301      	adds	r3, #1
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	4b04      	ldr	r3, [pc, #16]	@ (80064e0 <SVCCTL_RegisterSvcHandler+0x30>)
 80064d0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80064d2:	bf00      	nop
}
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	20000040 	.word	0x20000040

080064e4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	3301      	adds	r3, #1
 80064f0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80064f2:	2300      	movs	r3, #0
 80064f4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2bff      	cmp	r3, #255	@ 0xff
 80064fc:	d125      	bne.n	800654a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	3302      	adds	r3, #2
 8006502:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29b      	uxth	r3, r3
 800650a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800650e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006512:	d118      	bne.n	8006546 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006514:	2300      	movs	r3, #0
 8006516:	757b      	strb	r3, [r7, #21]
 8006518:	e00d      	b.n	8006536 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800651a:	7d7b      	ldrb	r3, [r7, #21]
 800651c:	4a1a      	ldr	r2, [pc, #104]	@ (8006588 <SVCCTL_UserEvtRx+0xa4>)
 800651e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	4798      	blx	r3
 8006526:	4603      	mov	r3, r0
 8006528:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800652a:	7dfb      	ldrb	r3, [r7, #23]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d108      	bne.n	8006542 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8006530:	7d7b      	ldrb	r3, [r7, #21]
 8006532:	3301      	adds	r3, #1
 8006534:	757b      	strb	r3, [r7, #21]
 8006536:	4b14      	ldr	r3, [pc, #80]	@ (8006588 <SVCCTL_UserEvtRx+0xa4>)
 8006538:	7f1b      	ldrb	r3, [r3, #28]
 800653a:	7d7a      	ldrb	r2, [r7, #21]
 800653c:	429a      	cmp	r2, r3
 800653e:	d3ec      	bcc.n	800651a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006540:	e002      	b.n	8006548 <SVCCTL_UserEvtRx+0x64>
              break;
 8006542:	bf00      	nop
          break;
 8006544:	e000      	b.n	8006548 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8006546:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006548:	e000      	b.n	800654c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800654a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800654c:	7dfb      	ldrb	r3, [r7, #23]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d00f      	beq.n	8006572 <SVCCTL_UserEvtRx+0x8e>
 8006552:	2b02      	cmp	r3, #2
 8006554:	dc10      	bgt.n	8006578 <SVCCTL_UserEvtRx+0x94>
 8006556:	2b00      	cmp	r3, #0
 8006558:	d002      	beq.n	8006560 <SVCCTL_UserEvtRx+0x7c>
 800655a:	2b01      	cmp	r3, #1
 800655c:	d006      	beq.n	800656c <SVCCTL_UserEvtRx+0x88>
 800655e:	e00b      	b.n	8006578 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 ffd9 	bl	8007518 <SVCCTL_App_Notification>
 8006566:	4603      	mov	r3, r0
 8006568:	75bb      	strb	r3, [r7, #22]
      break;
 800656a:	e008      	b.n	800657e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800656c:	2301      	movs	r3, #1
 800656e:	75bb      	strb	r3, [r7, #22]
      break;
 8006570:	e005      	b.n	800657e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8006572:	2300      	movs	r3, #0
 8006574:	75bb      	strb	r3, [r7, #22]
      break;
 8006576:	e002      	b.n	800657e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006578:	2301      	movs	r3, #1
 800657a:	75bb      	strb	r3, [r7, #22]
      break;
 800657c:	bf00      	nop
  }

  return (return_status);
 800657e:	7dbb      	ldrb	r3, [r7, #22]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000040 	.word	0x20000040

0800658c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b088      	sub	sp, #32
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006594:	f107 030c 	add.w	r3, r7, #12
 8006598:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	212e      	movs	r1, #46	@ 0x2e
 80065a4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80065a8:	f000 fb16 	bl	8006bd8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	330b      	adds	r3, #11
 80065b0:	78db      	ldrb	r3, [r3, #3]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b088      	sub	sp, #32
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80065c2:	f107 030c 	add.w	r3, r7, #12
 80065c6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	210f      	movs	r1, #15
 80065d2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80065d6:	f000 faff 	bl	8006bd8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	330b      	adds	r3, #11
 80065de:	78db      	ldrb	r3, [r3, #3]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3720      	adds	r7, #32
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <SHCI_C2_ExtpaConfig>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ExtpaConfig(uint32_t gpio_port, uint16_t gpio_pin_number, uint8_t gpio_polarity, uint8_t gpio_status)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	4608      	mov	r0, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	461a      	mov	r2, r3
 80065f6:	4603      	mov	r3, r0
 80065f8:	807b      	strh	r3, [r7, #2]
 80065fa:	460b      	mov	r3, r1
 80065fc:	707b      	strb	r3, [r7, #1]
 80065fe:	4613      	mov	r3, r2
 8006600:	703b      	strb	r3, [r7, #0]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8006602:	f107 030c 	add.w	r3, r7, #12
 8006606:	61fb      	str	r3, [r7, #28]

  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_port = gpio_port;
 8006608:	f107 030c 	add.w	r3, r7, #12
 800660c:	687a      	ldr	r2, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_pin_number = gpio_pin_number;
 8006610:	f107 030c 	add.w	r3, r7, #12
 8006614:	887a      	ldrh	r2, [r7, #2]
 8006616:	809a      	strh	r2, [r3, #4]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_polarity = gpio_polarity;
 8006618:	f107 030c 	add.w	r3, r7, #12
 800661c:	787a      	ldrb	r2, [r7, #1]
 800661e:	719a      	strb	r2, [r3, #6]
  ((SHCI_C2_EXTPA_CONFIG_Cmd_Param_t*)local_buffer)->gpio_status = gpio_status;
 8006620:	f107 030c 	add.w	r3, r7, #12
 8006624:	783a      	ldrb	r2, [r7, #0]
 8006626:	71da      	strb	r2, [r3, #7]

  shci_send( SHCI_OPCODE_C2_EXTPA_CONFIG,
 8006628:	f107 020c 	add.w	r2, r7, #12
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	2108      	movs	r1, #8
 8006630:	f64f 4072 	movw	r0, #64626	@ 0xfc72
 8006634:	f000 fad0 	bl	8006bd8 <shci_send>
             8,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	330b      	adds	r3, #11
 800663c:	78db      	ldrb	r3, [r3, #3]
}
 800663e:	4618      	mov	r0, r3
 8006640:	3720      	adds	r7, #32
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b088      	sub	sp, #32
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800664e:	f107 030c 	add.w	r3, r7, #12
 8006652:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	2110      	movs	r1, #16
 800665a:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800665e:	f000 fabb 	bl	8006bd8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006662:	69fb      	ldr	r3, [r7, #28]
 8006664:	330b      	adds	r3, #11
 8006666:	78db      	ldrb	r3, [r3, #3]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3720      	adds	r7, #32
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8006670:	b480      	push	{r7}
 8006672:	b08b      	sub	sp, #44	@ 0x2c
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8006678:	2300      	movs	r3, #0
 800667a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800668c:	2300      	movs	r3, #0
 800668e:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006698:	4b4a      	ldr	r3, [pc, #296]	@ (80067c4 <SHCI_GetWirelessFwInfo+0x154>)
 800669a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800669c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80066a0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80066aa:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a44      	ldr	r2, [pc, #272]	@ (80067c8 <SHCI_GetWirelessFwInfo+0x158>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10f      	bne.n	80066dc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	69db      	ldr	r3, [r3, #28]
 80066cc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e01a      	b.n	8006712 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80066e4:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80066e8:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	0e1b      	lsrs	r3, r3, #24
 8006716:	b2da      	uxtb	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800671c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671e:	0c1b      	lsrs	r3, r3, #16
 8006720:	b2da      	uxtb	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006728:	0a1b      	lsrs	r3, r3, #8
 800672a:	b2da      	uxtb	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	091b      	lsrs	r3, r3, #4
 8006734:	b2db      	uxtb	r3, r3
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	b2da      	uxtb	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	b2da      	uxtb	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	0e1b      	lsrs	r3, r3, #24
 8006752:	b2da      	uxtb	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	0c1b      	lsrs	r3, r3, #16
 800675c:	b2da      	uxtb	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	0a1b      	lsrs	r3, r3, #8
 8006766:	b2da      	uxtb	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	b2da      	uxtb	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	b2da      	uxtb	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	0e1b      	lsrs	r3, r3, #24
 8006780:	b2da      	uxtb	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	0c1b      	lsrs	r3, r3, #16
 800678a:	b2da      	uxtb	r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	0a1b      	lsrs	r3, r3, #8
 8006794:	b2da      	uxtb	r2, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	0e1b      	lsrs	r3, r3, #24
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	0c1b      	lsrs	r3, r3, #16
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80067b6:	2300      	movs	r3, #0
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	372c      	adds	r7, #44	@ 0x2c
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	58004000 	.word	0x58004000
 80067c8:	a94656b9 	.word	0xa94656b9

080067cc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4a08      	ldr	r2, [pc, #32]	@ (80067fc <hci_init+0x30>)
 80067dc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80067de:	4a08      	ldr	r2, [pc, #32]	@ (8006800 <hci_init+0x34>)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80067e4:	4806      	ldr	r0, [pc, #24]	@ (8006800 <hci_init+0x34>)
 80067e6:	f000 f979 	bl	8006adc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f8da 	bl	80069a8 <TlInit>

  return;
 80067f4:	bf00      	nop
}
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	200002e0 	.word	0x200002e0
 8006800:	200002b8 	.word	0x200002b8

08006804 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800680a:	4822      	ldr	r0, [pc, #136]	@ (8006894 <hci_user_evt_proc+0x90>)
 800680c:	f000 fd32 	bl	8007274 <LST_is_empty>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d12b      	bne.n	800686e <hci_user_evt_proc+0x6a>
 8006816:	4b20      	ldr	r3, [pc, #128]	@ (8006898 <hci_user_evt_proc+0x94>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d027      	beq.n	800686e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800681e:	f107 030c 	add.w	r3, r7, #12
 8006822:	4619      	mov	r1, r3
 8006824:	481b      	ldr	r0, [pc, #108]	@ (8006894 <hci_user_evt_proc+0x90>)
 8006826:	f000 fdb4 	bl	8007392 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800682a:	4b1c      	ldr	r3, [pc, #112]	@ (800689c <hci_user_evt_proc+0x98>)
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8006836:	2301      	movs	r3, #1
 8006838:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800683a:	4b18      	ldr	r3, [pc, #96]	@ (800689c <hci_user_evt_proc+0x98>)
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	1d3a      	adds	r2, r7, #4
 8006840:	4610      	mov	r0, r2
 8006842:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8006844:	793a      	ldrb	r2, [r7, #4]
 8006846:	4b14      	ldr	r3, [pc, #80]	@ (8006898 <hci_user_evt_proc+0x94>)
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	e002      	b.n	8006852 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800684c:	4b12      	ldr	r3, [pc, #72]	@ (8006898 <hci_user_evt_proc+0x94>)
 800684e:	2201      	movs	r2, #1
 8006850:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8006852:	4b11      	ldr	r3, [pc, #68]	@ (8006898 <hci_user_evt_proc+0x94>)
 8006854:	781b      	ldrb	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d004      	beq.n	8006864 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4618      	mov	r0, r3
 800685e:	f000 fc0d 	bl	800707c <TL_MM_EvtDone>
 8006862:	e004      	b.n	800686e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4619      	mov	r1, r3
 8006868:	480a      	ldr	r0, [pc, #40]	@ (8006894 <hci_user_evt_proc+0x90>)
 800686a:	f000 fd25 	bl	80072b8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800686e:	4809      	ldr	r0, [pc, #36]	@ (8006894 <hci_user_evt_proc+0x90>)
 8006870:	f000 fd00 	bl	8007274 <LST_is_empty>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d107      	bne.n	800688a <hci_user_evt_proc+0x86>
 800687a:	4b07      	ldr	r3, [pc, #28]	@ (8006898 <hci_user_evt_proc+0x94>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d003      	beq.n	800688a <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8006882:	4804      	ldr	r0, [pc, #16]	@ (8006894 <hci_user_evt_proc+0x90>)
 8006884:	f001 f8b5 	bl	80079f2 <hci_notify_asynch_evt>
  }


  return;
 8006888:	bf00      	nop
 800688a:	bf00      	nop
}
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	20000068 	.word	0x20000068
 8006898:	20000074 	.word	0x20000074
 800689c:	200002b8 	.word	0x200002b8

080068a0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	460b      	mov	r3, r1
 80068aa:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80068ac:	2000      	movs	r0, #0
 80068ae:	f000 f8d1 	bl	8006a54 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80068b2:	2300      	movs	r3, #0
 80068b4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	885b      	ldrh	r3, [r3, #2]
 80068ba:	b21b      	sxth	r3, r3
 80068bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068c0:	b21a      	sxth	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	029b      	lsls	r3, r3, #10
 80068c8:	b21b      	sxth	r3, r3
 80068ca:	4313      	orrs	r3, r2
 80068cc:	b21b      	sxth	r3, r3
 80068ce:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80068d0:	4b33      	ldr	r3, [pc, #204]	@ (80069a0 <hci_send_req+0x100>)
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	b2d9      	uxtb	r1, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	8bbb      	ldrh	r3, [r7, #28]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 f890 	bl	8006a08 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80068e8:	e04e      	b.n	8006988 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80068ea:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80068ee:	f001 f897 	bl	8007a20 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80068f2:	e043      	b.n	800697c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80068f4:	f107 030c 	add.w	r3, r7, #12
 80068f8:	4619      	mov	r1, r3
 80068fa:	482a      	ldr	r0, [pc, #168]	@ (80069a4 <hci_send_req+0x104>)
 80068fc:	f000 fd49 	bl	8007392 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	7a5b      	ldrb	r3, [r3, #9]
 8006904:	2b0f      	cmp	r3, #15
 8006906:	d114      	bne.n	8006932 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	330b      	adds	r3, #11
 800690c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	885b      	ldrh	r3, [r3, #2]
 8006912:	b29b      	uxth	r3, r3
 8006914:	8bba      	ldrh	r2, [r7, #28]
 8006916:	429a      	cmp	r2, r3
 8006918:	d104      	bne.n	8006924 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	7812      	ldrb	r2, [r2, #0]
 8006922:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	785b      	ldrb	r3, [r3, #1]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d027      	beq.n	800697c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800692c:	2301      	movs	r3, #1
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e024      	b.n	800697c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	330b      	adds	r3, #11
 8006936:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800693e:	b29b      	uxth	r3, r3
 8006940:	8bba      	ldrh	r2, [r7, #28]
 8006942:	429a      	cmp	r2, r3
 8006944:	d114      	bne.n	8006970 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	7a9b      	ldrb	r3, [r3, #10]
 800694a:	3b03      	subs	r3, #3
 800694c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	429a      	cmp	r2, r3
 8006956:	bfa8      	it	ge
 8006958:	461a      	movge	r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6918      	ldr	r0, [r3, #16]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	1cd9      	adds	r1, r3, #3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	461a      	mov	r2, r3
 800696c:	f001 fe06 	bl	800857c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006978:	2301      	movs	r3, #1
 800697a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800697c:	4809      	ldr	r0, [pc, #36]	@ (80069a4 <hci_send_req+0x104>)
 800697e:	f000 fc79 	bl	8007274 <LST_is_empty>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0b5      	beq.n	80068f4 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8006988:	7ffb      	ldrb	r3, [r7, #31]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0ad      	beq.n	80068ea <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800698e:	2001      	movs	r0, #1
 8006990:	f000 f860 	bl	8006a54 <NotifyCmdStatus>

  return 0;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3720      	adds	r7, #32
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	200002e4 	.word	0x200002e4
 80069a4:	200002d8 	.word	0x200002d8

080069a8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b086      	sub	sp, #24
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80069b0:	480f      	ldr	r0, [pc, #60]	@ (80069f0 <TlInit+0x48>)
 80069b2:	f000 fc4f 	bl	8007254 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80069b6:	4a0f      	ldr	r2, [pc, #60]	@ (80069f4 <TlInit+0x4c>)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80069bc:	480e      	ldr	r0, [pc, #56]	@ (80069f8 <TlInit+0x50>)
 80069be:	f000 fc49 	bl	8007254 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80069c2:	4b0e      	ldr	r3, [pc, #56]	@ (80069fc <TlInit+0x54>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80069c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006a00 <TlInit+0x58>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80069d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006a04 <TlInit+0x5c>)
 80069d6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80069d8:	4b09      	ldr	r3, [pc, #36]	@ (8006a00 <TlInit+0x58>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f107 0208 	add.w	r2, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
  }

  return;
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
}
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	200002d8 	.word	0x200002d8
 80069f4:	20000070 	.word	0x20000070
 80069f8:	20000068 	.word	0x20000068
 80069fc:	20000074 	.word	0x20000074
 8006a00:	200002b8 	.word	0x200002b8
 8006a04:	08006a95 	.word	0x08006a95

08006a08 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	603a      	str	r2, [r7, #0]
 8006a12:	80fb      	strh	r3, [r7, #6]
 8006a14:	460b      	mov	r3, r1
 8006a16:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006a18:	4b0c      	ldr	r3, [pc, #48]	@ (8006a4c <SendCmd+0x44>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	88fa      	ldrh	r2, [r7, #6]
 8006a1e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006a22:	4b0a      	ldr	r3, [pc, #40]	@ (8006a4c <SendCmd+0x44>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	797a      	ldrb	r2, [r7, #5]
 8006a28:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006a2a:	4b08      	ldr	r3, [pc, #32]	@ (8006a4c <SendCmd+0x44>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	330c      	adds	r3, #12
 8006a30:	797a      	ldrb	r2, [r7, #5]
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 fda1 	bl	800857c <memcpy>

  hciContext.io.Send(0,0);
 8006a3a:	4b05      	ldr	r3, [pc, #20]	@ (8006a50 <SendCmd+0x48>)
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2100      	movs	r1, #0
 8006a40:	2000      	movs	r0, #0
 8006a42:	4798      	blx	r3

  return;
 8006a44:	bf00      	nop
}
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}
 8006a4c:	20000070 	.word	0x20000070
 8006a50:	200002b8 	.word	0x200002b8

08006a54 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006a5e:	79fb      	ldrb	r3, [r7, #7]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d108      	bne.n	8006a76 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006a64:	4b0a      	ldr	r3, [pc, #40]	@ (8006a90 <NotifyCmdStatus+0x3c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00d      	beq.n	8006a88 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006a6c:	4b08      	ldr	r3, [pc, #32]	@ (8006a90 <NotifyCmdStatus+0x3c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2000      	movs	r0, #0
 8006a72:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006a74:	e008      	b.n	8006a88 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006a76:	4b06      	ldr	r3, [pc, #24]	@ (8006a90 <NotifyCmdStatus+0x3c>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006a7e:	4b04      	ldr	r3, [pc, #16]	@ (8006a90 <NotifyCmdStatus+0x3c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2001      	movs	r0, #1
 8006a84:	4798      	blx	r3
  return;
 8006a86:	bf00      	nop
 8006a88:	bf00      	nop
}
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	200002e0 	.word	0x200002e0

08006a94 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	7a5b      	ldrb	r3, [r3, #9]
 8006aa0:	2b0f      	cmp	r3, #15
 8006aa2:	d003      	beq.n	8006aac <TlEvtReceived+0x18>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	7a5b      	ldrb	r3, [r3, #9]
 8006aa8:	2b0e      	cmp	r3, #14
 8006aaa:	d107      	bne.n	8006abc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006aac:	6879      	ldr	r1, [r7, #4]
 8006aae:	4809      	ldr	r0, [pc, #36]	@ (8006ad4 <TlEvtReceived+0x40>)
 8006ab0:	f000 fc28 	bl	8007304 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006ab4:	2000      	movs	r0, #0
 8006ab6:	f000 ffa8 	bl	8007a0a <hci_cmd_resp_release>
 8006aba:	e006      	b.n	8006aca <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	4806      	ldr	r0, [pc, #24]	@ (8006ad8 <TlEvtReceived+0x44>)
 8006ac0:	f000 fc20 	bl	8007304 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006ac4:	4804      	ldr	r0, [pc, #16]	@ (8006ad8 <TlEvtReceived+0x44>)
 8006ac6:	f000 ff94 	bl	80079f2 <hci_notify_asynch_evt>
  }

  return;
 8006aca:	bf00      	nop
}
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200002d8 	.word	0x200002d8
 8006ad8:	20000068 	.word	0x20000068

08006adc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a05      	ldr	r2, [pc, #20]	@ (8006afc <hci_register_io_bus+0x20>)
 8006ae8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a04      	ldr	r2, [pc, #16]	@ (8006b00 <hci_register_io_bus+0x24>)
 8006aee:	611a      	str	r2, [r3, #16]

  return;
 8006af0:	bf00      	nop
}
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr
 8006afc:	08006df5 	.word	0x08006df5
 8006b00:	08006e5d 	.word	0x08006e5d

08006b04 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	4a08      	ldr	r2, [pc, #32]	@ (8006b34 <shci_init+0x30>)
 8006b14:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006b16:	4a08      	ldr	r2, [pc, #32]	@ (8006b38 <shci_init+0x34>)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006b1c:	4806      	ldr	r0, [pc, #24]	@ (8006b38 <shci_init+0x34>)
 8006b1e:	f000 f915 	bl	8006d4c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f898 	bl	8006c5c <TlInit>

  return;
 8006b2c:	bf00      	nop
}
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000308 	.word	0x20000308
 8006b38:	200002e8 	.word	0x200002e8

08006b3c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006b42:	4822      	ldr	r0, [pc, #136]	@ (8006bcc <shci_user_evt_proc+0x90>)
 8006b44:	f000 fb96 	bl	8007274 <LST_is_empty>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d12b      	bne.n	8006ba6 <shci_user_evt_proc+0x6a>
 8006b4e:	4b20      	ldr	r3, [pc, #128]	@ (8006bd0 <shci_user_evt_proc+0x94>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d027      	beq.n	8006ba6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006b56:	f107 030c 	add.w	r3, r7, #12
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	481b      	ldr	r0, [pc, #108]	@ (8006bcc <shci_user_evt_proc+0x90>)
 8006b5e:	f000 fc18 	bl	8007392 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006b62:	4b1c      	ldr	r3, [pc, #112]	@ (8006bd4 <shci_user_evt_proc+0x98>)
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00c      	beq.n	8006b84 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006b72:	4b18      	ldr	r3, [pc, #96]	@ (8006bd4 <shci_user_evt_proc+0x98>)
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	1d3a      	adds	r2, r7, #4
 8006b78:	4610      	mov	r0, r2
 8006b7a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006b7c:	793a      	ldrb	r2, [r7, #4]
 8006b7e:	4b14      	ldr	r3, [pc, #80]	@ (8006bd0 <shci_user_evt_proc+0x94>)
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	e002      	b.n	8006b8a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006b84:	4b12      	ldr	r3, [pc, #72]	@ (8006bd0 <shci_user_evt_proc+0x94>)
 8006b86:	2201      	movs	r2, #1
 8006b88:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006b8a:	4b11      	ldr	r3, [pc, #68]	@ (8006bd0 <shci_user_evt_proc+0x94>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fa71 	bl	800707c <TL_MM_EvtDone>
 8006b9a:	e004      	b.n	8006ba6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	480a      	ldr	r0, [pc, #40]	@ (8006bcc <shci_user_evt_proc+0x90>)
 8006ba2:	f000 fb89 	bl	80072b8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006ba6:	4809      	ldr	r0, [pc, #36]	@ (8006bcc <shci_user_evt_proc+0x90>)
 8006ba8:	f000 fb64 	bl	8007274 <LST_is_empty>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d107      	bne.n	8006bc2 <shci_user_evt_proc+0x86>
 8006bb2:	4b07      	ldr	r3, [pc, #28]	@ (8006bd0 <shci_user_evt_proc+0x94>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006bba:	4804      	ldr	r0, [pc, #16]	@ (8006bcc <shci_user_evt_proc+0x90>)
 8006bbc:	f7f9 fd18 	bl	80005f0 <shci_notify_asynch_evt>
  }


  return;
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
}
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	20000078 	.word	0x20000078
 8006bd0:	20000088 	.word	0x20000088
 8006bd4:	200002e8 	.word	0x200002e8

08006bd8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60ba      	str	r2, [r7, #8]
 8006be0:	607b      	str	r3, [r7, #4]
 8006be2:	4603      	mov	r3, r0
 8006be4:	81fb      	strh	r3, [r7, #14]
 8006be6:	460b      	mov	r3, r1
 8006be8:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006bea:	2000      	movs	r0, #0
 8006bec:	f000 f868 	bl	8006cc0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006bf0:	4b17      	ldr	r3, [pc, #92]	@ (8006c50 <shci_send+0x78>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	89fa      	ldrh	r2, [r7, #14]
 8006bf6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006bfa:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <shci_send+0x78>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	7b7a      	ldrb	r2, [r7, #13]
 8006c00:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006c02:	4b13      	ldr	r3, [pc, #76]	@ (8006c50 <shci_send+0x78>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	330c      	adds	r3, #12
 8006c08:	7b7a      	ldrb	r2, [r7, #13]
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 fcb5 	bl	800857c <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8006c12:	4b10      	ldr	r3, [pc, #64]	@ (8006c54 <shci_send+0x7c>)
 8006c14:	2201      	movs	r2, #1
 8006c16:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8006c18:	4b0f      	ldr	r3, [pc, #60]	@ (8006c58 <shci_send+0x80>)
 8006c1a:	691b      	ldr	r3, [r3, #16]
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	2000      	movs	r0, #0
 8006c20:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006c22:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006c26:	f7f9 fcfa 	bl	800061e <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f103 0008 	add.w	r0, r3, #8
 8006c30:	4b07      	ldr	r3, [pc, #28]	@ (8006c50 <shci_send+0x78>)
 8006c32:	6819      	ldr	r1, [r3, #0]
 8006c34:	4b06      	ldr	r3, [pc, #24]	@ (8006c50 <shci_send+0x78>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	789b      	ldrb	r3, [r3, #2]
 8006c3a:	3303      	adds	r3, #3
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f001 fc9d 	bl	800857c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006c42:	2001      	movs	r0, #1
 8006c44:	f000 f83c 	bl	8006cc0 <Cmd_SetStatus>

  return;
 8006c48:	bf00      	nop
}
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	20000084 	.word	0x20000084
 8006c54:	2000030c 	.word	0x2000030c
 8006c58:	200002e8 	.word	0x200002e8

08006c5c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006c64:	4a10      	ldr	r2, [pc, #64]	@ (8006ca8 <TlInit+0x4c>)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006c6a:	4810      	ldr	r0, [pc, #64]	@ (8006cac <TlInit+0x50>)
 8006c6c:	f000 faf2 	bl	8007254 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006c70:	2001      	movs	r0, #1
 8006c72:	f000 f825 	bl	8006cc0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006c76:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb0 <TlInit+0x54>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb4 <TlInit+0x58>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00c      	beq.n	8006c9e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006c88:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb8 <TlInit+0x5c>)
 8006c8a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006cbc <TlInit+0x60>)
 8006c8e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006c90:	4b08      	ldr	r3, [pc, #32]	@ (8006cb4 <TlInit+0x58>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f107 020c 	add.w	r2, r7, #12
 8006c98:	4610      	mov	r0, r2
 8006c9a:	4798      	blx	r3
  }

  return;
 8006c9c:	bf00      	nop
 8006c9e:	bf00      	nop
}
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20000084 	.word	0x20000084
 8006cac:	20000078 	.word	0x20000078
 8006cb0:	20000088 	.word	0x20000088
 8006cb4:	200002e8 	.word	0x200002e8
 8006cb8:	08006d11 	.word	0x08006d11
 8006cbc:	08006d29 	.word	0x08006d29

08006cc0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006cca:	79fb      	ldrb	r3, [r7, #7]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10b      	bne.n	8006ce8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <Cmd_SetStatus+0x48>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d003      	beq.n	8006ce0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d08 <Cmd_SetStatus+0x48>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2000      	movs	r0, #0
 8006cde:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8006d0c <Cmd_SetStatus+0x4c>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006ce6:	e00b      	b.n	8006d00 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006ce8:	4b08      	ldr	r3, [pc, #32]	@ (8006d0c <Cmd_SetStatus+0x4c>)
 8006cea:	2201      	movs	r2, #1
 8006cec:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8006cee:	4b06      	ldr	r3, [pc, #24]	@ (8006d08 <Cmd_SetStatus+0x48>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d004      	beq.n	8006d00 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006cf6:	4b04      	ldr	r3, [pc, #16]	@ (8006d08 <Cmd_SetStatus+0x48>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2001      	movs	r0, #1
 8006cfc:	4798      	blx	r3
  return;
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
}
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000308 	.word	0x20000308
 8006d0c:	20000080 	.word	0x20000080

08006d10 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006d18:	2000      	movs	r0, #0
 8006d1a:	f7f9 fc75 	bl	8000608 <shci_cmd_resp_release>

  return;
 8006d1e:	bf00      	nop
}
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	4805      	ldr	r0, [pc, #20]	@ (8006d48 <TlUserEvtReceived+0x20>)
 8006d34:	f000 fae6 	bl	8007304 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006d38:	4803      	ldr	r0, [pc, #12]	@ (8006d48 <TlUserEvtReceived+0x20>)
 8006d3a:	f7f9 fc59 	bl	80005f0 <shci_notify_asynch_evt>

  return;
 8006d3e:	bf00      	nop
}
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000078 	.word	0x20000078

08006d4c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a05      	ldr	r2, [pc, #20]	@ (8006d6c <shci_register_io_bus+0x20>)
 8006d58:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	4a04      	ldr	r2, [pc, #16]	@ (8006d70 <shci_register_io_bus+0x24>)
 8006d5e:	611a      	str	r2, [r3, #16]

  return;
 8006d60:	bf00      	nop
}
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	08006f09 	.word	0x08006f09
 8006d70:	08006f5d 	.word	0x08006f5d

08006d74 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006d78:	f001 f850 	bl	8007e1c <HW_IPCC_Enable>

  return;
 8006d7c:	bf00      	nop
}
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <TL_Init>:


void TL_Init( void )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006d84:	4b10      	ldr	r3, [pc, #64]	@ (8006dc8 <TL_Init+0x48>)
 8006d86:	4a11      	ldr	r2, [pc, #68]	@ (8006dcc <TL_Init+0x4c>)
 8006d88:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc8 <TL_Init+0x48>)
 8006d8c:	4a10      	ldr	r2, [pc, #64]	@ (8006dd0 <TL_Init+0x50>)
 8006d8e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006d90:	4b0d      	ldr	r3, [pc, #52]	@ (8006dc8 <TL_Init+0x48>)
 8006d92:	4a10      	ldr	r2, [pc, #64]	@ (8006dd4 <TL_Init+0x54>)
 8006d94:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006d96:	4b0c      	ldr	r3, [pc, #48]	@ (8006dc8 <TL_Init+0x48>)
 8006d98:	4a0f      	ldr	r2, [pc, #60]	@ (8006dd8 <TL_Init+0x58>)
 8006d9a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc8 <TL_Init+0x48>)
 8006d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8006ddc <TL_Init+0x5c>)
 8006da0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <TL_Init+0x48>)
 8006da4:	4a0e      	ldr	r2, [pc, #56]	@ (8006de0 <TL_Init+0x60>)
 8006da6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006da8:	4b07      	ldr	r3, [pc, #28]	@ (8006dc8 <TL_Init+0x48>)
 8006daa:	4a0e      	ldr	r2, [pc, #56]	@ (8006de4 <TL_Init+0x64>)
 8006dac:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006dae:	4b06      	ldr	r3, [pc, #24]	@ (8006dc8 <TL_Init+0x48>)
 8006db0:	4a0d      	ldr	r2, [pc, #52]	@ (8006de8 <TL_Init+0x68>)
 8006db2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006db4:	4b04      	ldr	r3, [pc, #16]	@ (8006dc8 <TL_Init+0x48>)
 8006db6:	4a0d      	ldr	r2, [pc, #52]	@ (8006dec <TL_Init+0x6c>)
 8006db8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8006dba:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <TL_Init+0x48>)
 8006dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8006df0 <TL_Init+0x70>)
 8006dbe:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006dc0:	f001 f840 	bl	8007e44 <HW_IPCC_Init>

  return;
 8006dc4:	bf00      	nop
}
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20030000 	.word	0x20030000
 8006dcc:	20030028 	.word	0x20030028
 8006dd0:	20030048 	.word	0x20030048
 8006dd4:	20030058 	.word	0x20030058
 8006dd8:	20030068 	.word	0x20030068
 8006ddc:	20030070 	.word	0x20030070
 8006de0:	20030078 	.word	0x20030078
 8006de4:	20030080 	.word	0x20030080
 8006de8:	2003009c 	.word	0x2003009c
 8006dec:	200300a0 	.word	0x200300a0
 8006df0:	200300ac 	.word	0x200300ac

08006df4 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8006e00:	4811      	ldr	r0, [pc, #68]	@ (8006e48 <TL_BLE_Init+0x54>)
 8006e02:	f000 fa27 	bl	8007254 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8006e06:	4b11      	ldr	r3, [pc, #68]	@ (8006e4c <TL_BLE_Init+0x58>)
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	68da      	ldr	r2, [r3, #12]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006e50 <TL_BLE_Init+0x5c>)
 8006e20:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	4a08      	ldr	r2, [pc, #32]	@ (8006e48 <TL_BLE_Init+0x54>)
 8006e26:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8006e28:	f001 f822 	bl	8007e70 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a08      	ldr	r2, [pc, #32]	@ (8006e54 <TL_BLE_Init+0x60>)
 8006e32:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	4a07      	ldr	r2, [pc, #28]	@ (8006e58 <TL_BLE_Init+0x64>)
 8006e3a:	6013      	str	r3, [r2, #0]

  return 0;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	200300c8 	.word	0x200300c8
 8006e4c:	20030000 	.word	0x20030000
 8006e50:	20030a58 	.word	0x20030a58
 8006e54:	20000318 	.word	0x20000318
 8006e58:	2000031c 	.word	0x2000031c

08006e5c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	460b      	mov	r3, r1
 8006e66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006e68:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <TL_BLE_SendCmd+0x34>)
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006e72:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <TL_BLE_SendCmd+0x34>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	2001      	movs	r0, #1
 8006e7c:	f000 f96c 	bl	8007158 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8006e80:	f001 f800 	bl	8007e84 <HW_IPCC_BLE_SendCmd>

  return 0;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20030000 	.word	0x20030000

08006e94 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006e9a:	e01c      	b.n	8006ed6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006e9c:	1d3b      	adds	r3, r7, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4812      	ldr	r0, [pc, #72]	@ (8006eec <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006ea2:	f000 fa76 	bl	8007392 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	7a5b      	ldrb	r3, [r3, #9]
 8006eaa:	2b0f      	cmp	r3, #15
 8006eac:	d003      	beq.n	8006eb6 <HW_IPCC_BLE_RxEvtNot+0x22>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7a5b      	ldrb	r3, [r3, #9]
 8006eb2:	2b0e      	cmp	r3, #14
 8006eb4:	d105      	bne.n	8006ec2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	2002      	movs	r0, #2
 8006ebc:	f000 f94c 	bl	8007158 <OutputDbgTrace>
 8006ec0:	e004      	b.n	8006ecc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	2003      	movs	r0, #3
 8006ec8:	f000 f946 	bl	8007158 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006ecc:	4b08      	ldr	r3, [pc, #32]	@ (8006ef0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006ed6:	4805      	ldr	r0, [pc, #20]	@ (8006eec <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006ed8:	f000 f9cc 	bl	8007274 <LST_is_empty>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0dc      	beq.n	8006e9c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006ee2:	bf00      	nop
}
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	200300c8 	.word	0x200300c8
 8006ef0:	20000318 	.word	0x20000318

08006ef4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006ef8:	4b02      	ldr	r3, [pc, #8]	@ (8006f04 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4798      	blx	r3

  return;
 8006efe:	bf00      	nop
}
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	2000031c 	.word	0x2000031c

08006f08 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8006f14:	480d      	ldr	r0, [pc, #52]	@ (8006f4c <TL_SYS_Init+0x44>)
 8006f16:	f000 f99d 	bl	8007254 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006f50 <TL_SYS_Init+0x48>)
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4a08      	ldr	r2, [pc, #32]	@ (8006f4c <TL_SYS_Init+0x44>)
 8006f2c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8006f2e:	f000 ffcb 	bl	8007ec8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a07      	ldr	r2, [pc, #28]	@ (8006f54 <TL_SYS_Init+0x4c>)
 8006f38:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	4a06      	ldr	r2, [pc, #24]	@ (8006f58 <TL_SYS_Init+0x50>)
 8006f40:	6013      	str	r3, [r2, #0]

  return 0;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	200300d0 	.word	0x200300d0
 8006f50:	20030000 	.word	0x20030000
 8006f54:	20000320 	.word	0x20000320
 8006f58:	20000324 	.word	0x20000324

08006f5c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	460b      	mov	r3, r1
 8006f66:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8006f68:	4b09      	ldr	r3, [pc, #36]	@ (8006f90 <TL_SYS_SendCmd+0x34>)
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2210      	movs	r2, #16
 8006f70:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8006f72:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <TL_SYS_SendCmd+0x34>)
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	2004      	movs	r0, #4
 8006f7c:	f000 f8ec 	bl	8007158 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8006f80:	f000 ffac 	bl	8007edc <HW_IPCC_SYS_SendCmd>

  return 0;
 8006f84:	2300      	movs	r3, #0
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20030000 	.word	0x20030000

08006f94 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006f98:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	2005      	movs	r0, #5
 8006fa2:	f000 f8d9 	bl	8007158 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006fa6:	4b05      	ldr	r3, [pc, #20]	@ (8006fbc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a03      	ldr	r2, [pc, #12]	@ (8006fb8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006fac:	68d2      	ldr	r2, [r2, #12]
 8006fae:	6812      	ldr	r2, [r2, #0]
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3

  return;
 8006fb4:	bf00      	nop
}
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	20030000 	.word	0x20030000
 8006fbc:	20000320 	.word	0x20000320

08006fc0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006fc6:	e00e      	b.n	8006fe6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	480b      	ldr	r0, [pc, #44]	@ (8006ffc <HW_IPCC_SYS_EvtNot+0x3c>)
 8006fce:	f000 f9e0 	bl	8007392 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	2006      	movs	r0, #6
 8006fd8:	f000 f8be 	bl	8007158 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8006fdc:	4b08      	ldr	r3, [pc, #32]	@ (8007000 <HW_IPCC_SYS_EvtNot+0x40>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006fe6:	4805      	ldr	r0, [pc, #20]	@ (8006ffc <HW_IPCC_SYS_EvtNot+0x3c>)
 8006fe8:	f000 f944 	bl	8007274 <LST_is_empty>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0ea      	beq.n	8006fc8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8006ff2:	bf00      	nop
}
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	200300d0 	.word	0x200300d0
 8007000:	20000324 	.word	0x20000324

08007004 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800700c:	4817      	ldr	r0, [pc, #92]	@ (800706c <TL_MM_Init+0x68>)
 800700e:	f000 f921 	bl	8007254 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8007012:	4817      	ldr	r0, [pc, #92]	@ (8007070 <TL_MM_Init+0x6c>)
 8007014:	f000 f91e 	bl	8007254 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007018:	4b16      	ldr	r3, [pc, #88]	@ (8007074 <TL_MM_Init+0x70>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	4a16      	ldr	r2, [pc, #88]	@ (8007078 <TL_MM_Init+0x74>)
 800701e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8007020:	4b15      	ldr	r3, [pc, #84]	@ (8007078 <TL_MM_Init+0x74>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6892      	ldr	r2, [r2, #8]
 8007028:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800702a:	4b13      	ldr	r3, [pc, #76]	@ (8007078 <TL_MM_Init+0x74>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	68d2      	ldr	r2, [r2, #12]
 8007032:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8007034:	4b10      	ldr	r3, [pc, #64]	@ (8007078 <TL_MM_Init+0x74>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a0c      	ldr	r2, [pc, #48]	@ (800706c <TL_MM_Init+0x68>)
 800703a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800703c:	4b0e      	ldr	r3, [pc, #56]	@ (8007078 <TL_MM_Init+0x74>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	6812      	ldr	r2, [r2, #0]
 8007044:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8007046:	4b0c      	ldr	r3, [pc, #48]	@ (8007078 <TL_MM_Init+0x74>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	6852      	ldr	r2, [r2, #4]
 800704e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8007050:	4b09      	ldr	r3, [pc, #36]	@ (8007078 <TL_MM_Init+0x74>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	6912      	ldr	r2, [r2, #16]
 8007058:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800705a:	4b07      	ldr	r3, [pc, #28]	@ (8007078 <TL_MM_Init+0x74>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	6952      	ldr	r2, [r2, #20]
 8007062:	619a      	str	r2, [r3, #24]

  return;
 8007064:	bf00      	nop
}
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	200300b8 	.word	0x200300b8
 8007070:	20000310 	.word	0x20000310
 8007074:	20030000 	.word	0x20030000
 8007078:	20000328 	.word	0x20000328

0800707c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8007084:	6879      	ldr	r1, [r7, #4]
 8007086:	4807      	ldr	r0, [pc, #28]	@ (80070a4 <TL_MM_EvtDone+0x28>)
 8007088:	f000 f93c 	bl	8007304 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800708c:	6879      	ldr	r1, [r7, #4]
 800708e:	2000      	movs	r0, #0
 8007090:	f000 f862 	bl	8007158 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007094:	4804      	ldr	r0, [pc, #16]	@ (80070a8 <TL_MM_EvtDone+0x2c>)
 8007096:	f000 ff47 	bl	8007f28 <HW_IPCC_MM_SendFreeBuf>

  return;
 800709a:	bf00      	nop
}
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	20000310 	.word	0x20000310
 80070a8:	080070ad 	.word	0x080070ad

080070ac <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80070b2:	e00c      	b.n	80070ce <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80070b4:	1d3b      	adds	r3, r7, #4
 80070b6:	4619      	mov	r1, r3
 80070b8:	480a      	ldr	r0, [pc, #40]	@ (80070e4 <SendFreeBuf+0x38>)
 80070ba:	f000 f96a 	bl	8007392 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80070be:	4b0a      	ldr	r3, [pc, #40]	@ (80070e8 <SendFreeBuf+0x3c>)
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	4611      	mov	r1, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f000 f91b 	bl	8007304 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80070ce:	4805      	ldr	r0, [pc, #20]	@ (80070e4 <SendFreeBuf+0x38>)
 80070d0:	f000 f8d0 	bl	8007274 <LST_is_empty>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0ec      	beq.n	80070b4 <SendFreeBuf+0x8>
  }

  return;
 80070da:	bf00      	nop
}
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	20000310 	.word	0x20000310
 80070e8:	20030000 	.word	0x20030000

080070ec <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80070f0:	4805      	ldr	r0, [pc, #20]	@ (8007108 <TL_TRACES_Init+0x1c>)
 80070f2:	f000 f8af 	bl	8007254 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80070f6:	4b05      	ldr	r3, [pc, #20]	@ (800710c <TL_TRACES_Init+0x20>)
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	4a03      	ldr	r2, [pc, #12]	@ (8007108 <TL_TRACES_Init+0x1c>)
 80070fc:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80070fe:	f000 ff49 	bl	8007f94 <HW_IPCC_TRACES_Init>

  return;
 8007102:	bf00      	nop
}
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	200300c0 	.word	0x200300c0
 800710c:	20030000 	.word	0x20030000

08007110 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007116:	e008      	b.n	800712a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007118:	1d3b      	adds	r3, r7, #4
 800711a:	4619      	mov	r1, r3
 800711c:	4808      	ldr	r0, [pc, #32]	@ (8007140 <HW_IPCC_TRACES_EvtNot+0x30>)
 800711e:	f000 f938 	bl	8007392 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4618      	mov	r0, r3
 8007126:	f000 f80d 	bl	8007144 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800712a:	4805      	ldr	r0, [pc, #20]	@ (8007140 <HW_IPCC_TRACES_EvtNot+0x30>)
 800712c:	f000 f8a2 	bl	8007274 <LST_is_empty>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d0f0      	beq.n	8007118 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8007136:	bf00      	nop
}
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	200300c0 	.word	0x200300c0

08007144 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	6039      	str	r1, [r7, #0]
 8007162:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007164:	79fb      	ldrb	r3, [r7, #7]
 8007166:	2b06      	cmp	r3, #6
 8007168:	d845      	bhi.n	80071f6 <OutputDbgTrace+0x9e>
 800716a:	a201      	add	r2, pc, #4	@ (adr r2, 8007170 <OutputDbgTrace+0x18>)
 800716c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007170:	0800718d 	.word	0x0800718d
 8007174:	080071b1 	.word	0x080071b1
 8007178:	080071b7 	.word	0x080071b7
 800717c:	080071cb 	.word	0x080071cb
 8007180:	080071d7 	.word	0x080071d7
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071eb 	.word	0x080071eb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	7a5b      	ldrb	r3, [r3, #9]
 8007194:	2bff      	cmp	r3, #255	@ 0xff
 8007196:	d005      	beq.n	80071a4 <OutputDbgTrace+0x4c>
 8007198:	2bff      	cmp	r3, #255	@ 0xff
 800719a:	dc05      	bgt.n	80071a8 <OutputDbgTrace+0x50>
 800719c:	2b0e      	cmp	r3, #14
 800719e:	d005      	beq.n	80071ac <OutputDbgTrace+0x54>
 80071a0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80071a2:	e001      	b.n	80071a8 <OutputDbgTrace+0x50>
          break;
 80071a4:	bf00      	nop
 80071a6:	e027      	b.n	80071f8 <OutputDbgTrace+0xa0>
          break;
 80071a8:	bf00      	nop
 80071aa:	e025      	b.n	80071f8 <OutputDbgTrace+0xa0>
          break;
 80071ac:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 80071ae:	e023      	b.n	80071f8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80071b4:	e020      	b.n	80071f8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	7a5b      	ldrb	r3, [r3, #9]
 80071be:	2b0e      	cmp	r3, #14
 80071c0:	d001      	beq.n	80071c6 <OutputDbgTrace+0x6e>
 80071c2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80071c4:	e000      	b.n	80071c8 <OutputDbgTrace+0x70>
          break;
 80071c6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80071c8:	e016      	b.n	80071f8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	7a5b      	ldrb	r3, [r3, #9]
 80071d2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80071d4:	e010      	b.n	80071f8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80071da:	e00d      	b.n	80071f8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	7a5b      	ldrb	r3, [r3, #9]
 80071e4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 80071e6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80071e8:	e006      	b.n	80071f8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	7a5b      	ldrb	r3, [r3, #9]
 80071f2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80071f4:	e000      	b.n	80071f8 <OutputDbgTrace+0xa0>

    default:
      break;
 80071f6:	bf00      	nop
  }

  return;
 80071f8:	bf00      	nop
}
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800720e:	4b0f      	ldr	r3, [pc, #60]	@ (800724c <OTP_Read+0x48>)
 8007210:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007212:	e002      	b.n	800721a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3b08      	subs	r3, #8
 8007218:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3307      	adds	r3, #7
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	79fa      	ldrb	r2, [r7, #7]
 8007222:	429a      	cmp	r2, r3
 8007224:	d003      	beq.n	800722e <OTP_Read+0x2a>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4a09      	ldr	r2, [pc, #36]	@ (8007250 <OTP_Read+0x4c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d1f2      	bne.n	8007214 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	3307      	adds	r3, #7
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	79fa      	ldrb	r2, [r7, #7]
 8007236:	429a      	cmp	r2, r3
 8007238:	d001      	beq.n	800723e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800723a:	2300      	movs	r3, #0
 800723c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800723e:	68fb      	ldr	r3, [r7, #12]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	1fff73f8 	.word	0x1fff73f8
 8007250:	1fff7000 	.word	0x1fff7000

08007254 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	605a      	str	r2, [r3, #4]
}
 8007268:	bf00      	nop
 800726a:	370c      	adds	r7, #12
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800727c:	f3ef 8310 	mrs	r3, PRIMASK
 8007280:	60fb      	str	r3, [r7, #12]
  return(result);
 8007282:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007286:	b672      	cpsid	i
}
 8007288:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	429a      	cmp	r2, r3
 8007292:	d102      	bne.n	800729a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007294:	2301      	movs	r3, #1
 8007296:	75fb      	strb	r3, [r7, #23]
 8007298:	e001      	b.n	800729e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800729a:	2300      	movs	r3, #0
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f383 8810 	msr	PRIMASK, r3
}
 80072a8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80072aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	371c      	adds	r7, #28
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072c2:	f3ef 8310 	mrs	r3, PRIMASK
 80072c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80072c8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80072ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072cc:	b672      	cpsid	i
}
 80072ce:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	683a      	ldr	r2, [r7, #0]
 80072e2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	605a      	str	r2, [r3, #4]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f383 8810 	msr	PRIMASK, r3
}
 80072f6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80072f8:	bf00      	nop
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800730e:	f3ef 8310 	mrs	r3, PRIMASK
 8007312:	60fb      	str	r3, [r7, #12]
  return(result);
 8007314:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007316:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007318:	b672      	cpsid	i
}
 800731a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f383 8810 	msr	PRIMASK, r3
}
 8007342:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007344:	bf00      	nop
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007358:	f3ef 8310 	mrs	r3, PRIMASK
 800735c:	60fb      	str	r3, [r7, #12]
  return(result);
 800735e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007360:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007362:	b672      	cpsid	i
}
 8007364:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6852      	ldr	r2, [r2, #4]
 8007378:	605a      	str	r2, [r3, #4]
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f383 8810 	msr	PRIMASK, r3
}
 8007384:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800739c:	f3ef 8310 	mrs	r3, PRIMASK
 80073a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80073a2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80073a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80073a6:	b672      	cpsid	i
}
 80073a8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7ff ffca 	bl	8007350 <LST_remove_node>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	f383 8810 	msr	PRIMASK, r3
}
 80073c6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073c8:	bf00      	nop
 80073ca:	3718      	adds	r7, #24
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80073d0:	b480      	push	{r7}
 80073d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80073d4:	4b03      	ldr	r3, [pc, #12]	@ (80073e4 <LL_FLASH_GetUDN+0x14>)
 80073d6:	681b      	ldr	r3, [r3, #0]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	1fff7580 	.word	0x1fff7580

080073e8 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80073ec:	4b03      	ldr	r3, [pc, #12]	@ (80073fc <LL_FLASH_GetDeviceID+0x14>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	b2db      	uxtb	r3, r3
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	1fff7584 	.word	0x1fff7584

08007400 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007404:	4b03      	ldr	r3, [pc, #12]	@ (8007414 <LL_FLASH_GetSTCompanyID+0x14>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	0a1b      	lsrs	r3, r3, #8
}
 800740a:	4618      	mov	r0, r3
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	1fff7584 	.word	0x1fff7584

08007418 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007418:	b5b0      	push	{r4, r5, r7, lr}
 800741a:	b090      	sub	sp, #64	@ 0x40
 800741c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800741e:	2392      	movs	r3, #146	@ 0x92
 8007420:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007424:	4b31      	ldr	r3, [pc, #196]	@ (80074ec <APP_BLE_Init+0xd4>)
 8007426:	1d3c      	adds	r4, r7, #4
 8007428:	461d      	mov	r5, r3
 800742a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800742c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800742e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007432:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007436:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800743a:	c403      	stmia	r4!, {r0, r1}
 800743c:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800743e:	f000 f923 	bl	8007688 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8007442:	2101      	movs	r1, #1
 8007444:	2002      	movs	r0, #2
 8007446:	f000 fdcd 	bl	8007fe4 <UTIL_LPM_SetOffMode>
#endif /* CFG_LPM_STANDBY_SUPPORTED == 0 */

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800744a:	4a29      	ldr	r2, [pc, #164]	@ (80074f0 <APP_BLE_Init+0xd8>)
 800744c:	2100      	movs	r1, #0
 800744e:	2002      	movs	r0, #2
 8007450:	f000 ff2a 	bl	80082a8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8007454:	1d3b      	adds	r3, r7, #4
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff f898 	bl	800658c <SHCI_C2_BLE_Init>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8007462:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800746a:	f7fa f9eb 	bl	8001844 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800746e:	f000 f921 	bl	80076b4 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8007472:	f7fe ffe5 	bl	8006440 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007476:	4b1f      	ldr	r3, [pc, #124]	@ (80074f4 <APP_BLE_Init+0xdc>)
 8007478:	2200      	movs	r2, #0
 800747a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800747e:	4b1d      	ldr	r3, [pc, #116]	@ (80074f4 <APP_BLE_Init+0xdc>)
 8007480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007484:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8007486:	4a1c      	ldr	r2, [pc, #112]	@ (80074f8 <APP_BLE_Init+0xe0>)
 8007488:	2100      	movs	r1, #0
 800748a:	2001      	movs	r0, #1
 800748c:	f000 ff0c 	bl	80082a8 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8007490:	2006      	movs	r0, #6
 8007492:	f7fe fcc5 	bl	8005e20 <aci_hal_set_radio_activity_mask>
 8007496:	4603      	mov	r3, r0
 8007498:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 800749c:	f000 fb40 	bl	8007b20 <P2PS_APP_Init>

  /* USER CODE BEGIN APP_BLE_Init_3 */
  SHCI_C2_ExtpaConfig((uint32_t)RFPA_CSD_GPIO_Port, RFPA_CSD_Pin, EXT_PA_ENABLED_HIGH, EXT_PA_ENABLED);
 80074a0:	2301      	movs	r3, #1
 80074a2:	2201      	movs	r2, #1
 80074a4:	2102      	movs	r1, #2
 80074a6:	4815      	ldr	r0, [pc, #84]	@ (80074fc <APP_BLE_Init+0xe4>)
 80074a8:	f7ff f89e 	bl	80065e8 <SHCI_C2_ExtpaConfig>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 80074ac:	4b14      	ldr	r3, [pc, #80]	@ (8007500 <APP_BLE_Init+0xe8>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	4914      	ldr	r1, [pc, #80]	@ (8007504 <APP_BLE_Init+0xec>)
 80074b2:	2000      	movs	r0, #0
 80074b4:	f7f9 fdac 	bl	8001010 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 80074b8:	4b13      	ldr	r3, [pc, #76]	@ (8007508 <APP_BLE_Init+0xf0>)
 80074ba:	2200      	movs	r2, #0
 80074bc:	4913      	ldr	r1, [pc, #76]	@ (800750c <APP_BLE_Init+0xf4>)
 80074be:	2000      	movs	r0, #0
 80074c0:	f7f9 fda6 	bl	8001010 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80074c4:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <APP_BLE_Init+0xdc>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80074ca:	4b0a      	ldr	r3, [pc, #40]	@ (80074f4 <APP_BLE_Init+0xdc>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 80074d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007510 <APP_BLE_Init+0xf8>)
 80074d2:	2280      	movs	r2, #128	@ 0x80
 80074d4:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80074d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <APP_BLE_Init+0xfc>)
 80074d8:	22a0      	movs	r2, #160	@ 0xa0
 80074da:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80074dc:	2001      	movs	r0, #1
 80074de:	f000 f9bb 	bl	8007858 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80074e2:	bf00      	nop
}
 80074e4:	3740      	adds	r7, #64	@ 0x40
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bdb0      	pop	{r4, r5, r7, pc}
 80074ea:	bf00      	nop
 80074ec:	080085ec 	.word	0x080085ec
 80074f0:	08006805 	.word	0x08006805
 80074f4:	20000334 	.word	0x20000334
 80074f8:	080079a1 	.word	0x080079a1
 80074fc:	48000400 	.word	0x48000400
 8007500:	080079d5 	.word	0x080079d5
 8007504:	200003b5 	.word	0x200003b5
 8007508:	080079e5 	.word	0x080079e5
 800750c:	200003b6 	.word	0x200003b6
 8007510:	200003b8 	.word	0x200003b8
 8007514:	200003ba 	.word	0x200003ba

08007518 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08a      	sub	sp, #40	@ 0x28
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007520:	2392      	movs	r3, #146	@ 0x92
 8007522:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	3301      	adds	r3, #1
 800752a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	2bff      	cmp	r3, #255	@ 0xff
 8007532:	d076      	beq.n	8007622 <SVCCTL_App_Notification+0x10a>
 8007534:	2bff      	cmp	r3, #255	@ 0xff
 8007536:	f300 809b 	bgt.w	8007670 <SVCCTL_App_Notification+0x158>
 800753a:	2b05      	cmp	r3, #5
 800753c:	d002      	beq.n	8007544 <SVCCTL_App_Notification+0x2c>
 800753e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007540:	d020      	beq.n	8007584 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007542:	e095      	b.n	8007670 <SVCCTL_App_Notification+0x158>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	3302      	adds	r3, #2
 8007548:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007550:	b29a      	uxth	r2, r3
 8007552:	4b4b      	ldr	r3, [pc, #300]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 8007554:	8adb      	ldrh	r3, [r3, #22]
 8007556:	429a      	cmp	r2, r3
 8007558:	d106      	bne.n	8007568 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800755a:	4b49      	ldr	r3, [pc, #292]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 800755c:	2200      	movs	r2, #0
 800755e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007560:	4b47      	ldr	r3, [pc, #284]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007568:	2001      	movs	r0, #1
 800756a:	f000 f975 	bl	8007858 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800756e:	4b45      	ldr	r3, [pc, #276]	@ (8007684 <SVCCTL_App_Notification+0x16c>)
 8007570:	2201      	movs	r2, #1
 8007572:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007574:	4b42      	ldr	r3, [pc, #264]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 8007576:	8ada      	ldrh	r2, [r3, #22]
 8007578:	4b42      	ldr	r3, [pc, #264]	@ (8007684 <SVCCTL_App_Notification+0x16c>)
 800757a:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800757c:	4841      	ldr	r0, [pc, #260]	@ (8007684 <SVCCTL_App_Notification+0x16c>)
 800757e:	f000 fab1 	bl	8007ae4 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8007582:	e078      	b.n	8007676 <SVCCTL_App_Notification+0x15e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	3302      	adds	r3, #2
 8007588:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	2b0c      	cmp	r3, #12
 8007590:	d005      	beq.n	800759e <SVCCTL_App_Notification+0x86>
 8007592:	2b0c      	cmp	r3, #12
 8007594:	dc41      	bgt.n	800761a <SVCCTL_App_Notification+0x102>
 8007596:	2b01      	cmp	r3, #1
 8007598:	d017      	beq.n	80075ca <SVCCTL_App_Notification+0xb2>
 800759a:	2b03      	cmp	r3, #3
          break;
 800759c:	e03d      	b.n	800761a <SVCCTL_App_Notification+0x102>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	3301      	adds	r3, #1
 80075a2:	617b      	str	r3, [r7, #20]
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 80075a4:	4b36      	ldr	r3, [pc, #216]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 80075a6:	8adb      	ldrh	r3, [r3, #22]
 80075a8:	f107 020a 	add.w	r2, r7, #10
 80075ac:	f107 010b 	add.w	r1, r7, #11
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fe fcad 	bl	8005f10 <hci_le_read_phy>
 80075b6:	4603      	mov	r3, r0
 80075b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 80075bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d12c      	bne.n	800761e <SVCCTL_App_Notification+0x106>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	2b02      	cmp	r3, #2
          break;
 80075c8:	e029      	b.n	800761e <SVCCTL_App_Notification+0x106>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	3301      	adds	r3, #1
 80075ce:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80075d0:	4b2b      	ldr	r3, [pc, #172]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 80075d2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7f9 fd94 	bl	8001104 <HW_TS_Stop>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80075dc:	4b28      	ldr	r3, [pc, #160]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 80075de:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d104      	bne.n	80075f0 <SVCCTL_App_Notification+0xd8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80075e6:	4b26      	ldr	r3, [pc, #152]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 80075e8:	2206      	movs	r2, #6
 80075ea:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80075ee:	e003      	b.n	80075f8 <SVCCTL_App_Notification+0xe0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80075f0:	4b23      	ldr	r3, [pc, #140]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 80075f2:	2205      	movs	r2, #5
 80075f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075fe:	b29a      	uxth	r2, r3
 8007600:	4b1f      	ldr	r3, [pc, #124]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 8007602:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8007604:	4b1f      	ldr	r3, [pc, #124]	@ (8007684 <SVCCTL_App_Notification+0x16c>)
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800760a:	4b1d      	ldr	r3, [pc, #116]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 800760c:	8ada      	ldrh	r2, [r3, #22]
 800760e:	4b1d      	ldr	r3, [pc, #116]	@ (8007684 <SVCCTL_App_Notification+0x16c>)
 8007610:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8007612:	481c      	ldr	r0, [pc, #112]	@ (8007684 <SVCCTL_App_Notification+0x16c>)
 8007614:	f000 fa66 	bl	8007ae4 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8007618:	e002      	b.n	8007620 <SVCCTL_App_Notification+0x108>
          break;
 800761a:	bf00      	nop
 800761c:	e02b      	b.n	8007676 <SVCCTL_App_Notification+0x15e>
          break;
 800761e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8007620:	e029      	b.n	8007676 <SVCCTL_App_Notification+0x15e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8007622:	6a3b      	ldr	r3, [r7, #32]
 8007624:	3302      	adds	r3, #2
 8007626:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29b      	uxth	r3, r3
 800762e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007632:	4293      	cmp	r3, r2
 8007634:	d010      	beq.n	8007658 <SVCCTL_App_Notification+0x140>
 8007636:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800763a:	4293      	cmp	r3, r2
 800763c:	dc1a      	bgt.n	8007674 <SVCCTL_App_Notification+0x15c>
 800763e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007642:	d00f      	beq.n	8007664 <SVCCTL_App_Notification+0x14c>
 8007644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007648:	dc14      	bgt.n	8007674 <SVCCTL_App_Notification+0x15c>
 800764a:	2b04      	cmp	r3, #4
 800764c:	d00c      	beq.n	8007668 <SVCCTL_App_Notification+0x150>
 800764e:	f240 4207 	movw	r2, #1031	@ 0x407
 8007652:	4293      	cmp	r3, r2
 8007654:	d00a      	beq.n	800766c <SVCCTL_App_Notification+0x154>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007656:	e00d      	b.n	8007674 <SVCCTL_App_Notification+0x15c>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8007658:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <SVCCTL_App_Notification+0x168>)
 800765a:	8adb      	ldrh	r3, [r3, #22]
 800765c:	4618      	mov	r0, r3
 800765e:	f7fe fa9e 	bl	8005b9e <aci_gatt_confirm_indication>
        break;
 8007662:	e004      	b.n	800766e <SVCCTL_App_Notification+0x156>
          break;
 8007664:	bf00      	nop
 8007666:	e005      	b.n	8007674 <SVCCTL_App_Notification+0x15c>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8007668:	bf00      	nop
 800766a:	e003      	b.n	8007674 <SVCCTL_App_Notification+0x15c>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800766c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800766e:	e001      	b.n	8007674 <SVCCTL_App_Notification+0x15c>
      break;
 8007670:	bf00      	nop
 8007672:	e000      	b.n	8007676 <SVCCTL_App_Notification+0x15e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007674:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8007676:	2301      	movs	r3, #1
}
 8007678:	4618      	mov	r0, r3
 800767a:	3728      	adds	r7, #40	@ 0x28
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000334 	.word	0x20000334
 8007684:	200003bc 	.word	0x200003bc

08007688 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800768e:	4b06      	ldr	r3, [pc, #24]	@ (80076a8 <Ble_Tl_Init+0x20>)
 8007690:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8007692:	4b06      	ldr	r3, [pc, #24]	@ (80076ac <Ble_Tl_Init+0x24>)
 8007694:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8007696:	463b      	mov	r3, r7
 8007698:	4619      	mov	r1, r3
 800769a:	4805      	ldr	r0, [pc, #20]	@ (80076b0 <Ble_Tl_Init+0x28>)
 800769c:	f7ff f896 	bl	80067cc <hci_init>

  return;
 80076a0:	bf00      	nop
}
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	200300d8 	.word	0x200300d8
 80076ac:	08007a6f 	.word	0x08007a6f
 80076b0:	08007a37 	.word	0x08007a37

080076b4 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80076b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076b6:	b08d      	sub	sp, #52	@ 0x34
 80076b8:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80076ba:	2300      	movs	r3, #0
 80076bc:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80076be:	2392      	movs	r3, #146	@ 0x92
 80076c0:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80076c2:	f7fe fc01 	bl	8005ec8 <hci_reset>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80076ca:	f000 f925 	bl	8007918 <BleGetBdAddress>
 80076ce:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	2106      	movs	r1, #6
 80076d4:	2000      	movs	r0, #0
 80076d6:	f7fe fab7 	bl	8005c48 <aci_hal_write_config_data>
 80076da:	4603      	mov	r3, r0
 80076dc:	75fb      	strb	r3, [r7, #23]
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	3305      	adds	r3, #5
 80076e2:	781a      	ldrb	r2, [r3, #0]
 80076e4:	4b56      	ldr	r3, [pc, #344]	@ (8007840 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80076e6:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	3304      	adds	r3, #4
 80076ec:	781a      	ldrb	r2, [r3, #0]
 80076ee:	4b54      	ldr	r3, [pc, #336]	@ (8007840 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80076f0:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	3303      	adds	r3, #3
 80076f6:	781a      	ldrb	r2, [r3, #0]
 80076f8:	4b51      	ldr	r3, [pc, #324]	@ (8007840 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 80076fa:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	3302      	adds	r3, #2
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	4b4f      	ldr	r3, [pc, #316]	@ (8007840 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8007704:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	3301      	adds	r3, #1
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	4b4c      	ldr	r3, [pc, #304]	@ (8007840 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 800770e:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	4b4a      	ldr	r3, [pc, #296]	@ (8007840 <Ble_Hci_Gap_Gatt_Init+0x18c>)
 8007716:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8007718:	4a4a      	ldr	r2, [pc, #296]	@ (8007844 <Ble_Hci_Gap_Gatt_Init+0x190>)
 800771a:	2110      	movs	r1, #16
 800771c:	2018      	movs	r0, #24
 800771e:	f7fe fa93 	bl	8005c48 <aci_hal_write_config_data>
 8007722:	4603      	mov	r3, r0
 8007724:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007726:	4a48      	ldr	r2, [pc, #288]	@ (8007848 <Ble_Hci_Gap_Gatt_Init+0x194>)
 8007728:	2110      	movs	r1, #16
 800772a:	2008      	movs	r0, #8
 800772c:	f7fe fa8c 	bl	8005c48 <aci_hal_write_config_data>
 8007730:	4603      	mov	r3, r0
 8007732:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007734:	211d      	movs	r1, #29
 8007736:	2001      	movs	r0, #1
 8007738:	f7fe fb0b 	bl	8005d52 <aci_hal_set_tx_power_level>
 800773c:	4603      	mov	r3, r0
 800773e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007740:	f7fd ff81 	bl	8005646 <aci_gatt_init>
 8007744:	4603      	mov	r3, r0
 8007746:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8007748:	2300      	movs	r3, #0
 800774a:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800774c:	7bfb      	ldrb	r3, [r7, #15]
 800774e:	f043 0301 	orr.w	r3, r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007754:	7bfb      	ldrb	r3, [r7, #15]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d01f      	beq.n	800779a <Ble_Hci_Gap_Gatt_Init+0xe6>
  {
    const char *name = "P2PSRV1";
 800775a:	4b3c      	ldr	r3, [pc, #240]	@ (800784c <Ble_Hci_Gap_Gatt_Init+0x198>)
 800775c:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800775e:	1dba      	adds	r2, r7, #6
 8007760:	7bf8      	ldrb	r0, [r7, #15]
 8007762:	1cbb      	adds	r3, r7, #2
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	1d3b      	adds	r3, r7, #4
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	4613      	mov	r3, r2
 800776c:	2207      	movs	r2, #7
 800776e:	2100      	movs	r1, #0
 8007770:	f7fd fe26 	bl	80053c0 <aci_gap_init>
 8007774:	4603      	mov	r3, r0
 8007776:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8007778:	88fc      	ldrh	r4, [r7, #6]
 800777a:	88bd      	ldrh	r5, [r7, #4]
 800777c:	68b8      	ldr	r0, [r7, #8]
 800777e:	f7f8 fcfd 	bl	800017c <strlen>
 8007782:	4603      	mov	r3, r0
 8007784:	b2da      	uxtb	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	4613      	mov	r3, r2
 800778c:	2200      	movs	r2, #0
 800778e:	4629      	mov	r1, r5
 8007790:	4620      	mov	r0, r4
 8007792:	f7fe f95b 	bl	8005a4c <aci_gatt_update_char_value>
 8007796:	4603      	mov	r3, r0
 8007798:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800779a:	88f8      	ldrh	r0, [r7, #6]
 800779c:	8879      	ldrh	r1, [r7, #2]
 800779e:	463b      	mov	r3, r7
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	2302      	movs	r3, #2
 80077a4:	2200      	movs	r2, #0
 80077a6:	f7fe f951 	bl	8005a4c <aci_gatt_update_char_value>
 80077aa:	4603      	mov	r3, r0
 80077ac:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_1M,RX_1M);
 80077ae:	2201      	movs	r2, #1
 80077b0:	2101      	movs	r1, #1
 80077b2:	2000      	movs	r0, #0
 80077b4:	f7fe fc2a 	bl	800600c <hci_le_set_default_phy>
 80077b8:	4603      	mov	r3, r0
 80077ba:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80077bc:	4b24      	ldr	r3, [pc, #144]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077be:	2201      	movs	r2, #1
 80077c0:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80077c2:	4b23      	ldr	r3, [pc, #140]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	4618      	mov	r0, r3
 80077c8:	f7fd fce2 	bl	8005190 <aci_gap_set_io_capability>
 80077cc:	4603      	mov	r3, r0
 80077ce:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80077d0:	4b1f      	ldr	r3, [pc, #124]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077d2:	2201      	movs	r2, #1
 80077d4:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80077d6:	4b1e      	ldr	r3, [pc, #120]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077d8:	2208      	movs	r2, #8
 80077da:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80077dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077de:	2210      	movs	r2, #16
 80077e0:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80077e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80077e8:	4b19      	ldr	r3, [pc, #100]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007854 <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 80077ec:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80077ee:	4b18      	ldr	r3, [pc, #96]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80077f4:	4b16      	ldr	r3, [pc, #88]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077f6:	789c      	ldrb	r4, [r3, #2]
 80077f8:	4b15      	ldr	r3, [pc, #84]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077fa:	785d      	ldrb	r5, [r3, #1]
 80077fc:	4b14      	ldr	r3, [pc, #80]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80077fe:	791b      	ldrb	r3, [r3, #4]
 8007800:	4a13      	ldr	r2, [pc, #76]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8007802:	7952      	ldrb	r2, [r2, #5]
 8007804:	4912      	ldr	r1, [pc, #72]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 8007806:	78c9      	ldrb	r1, [r1, #3]
 8007808:	4811      	ldr	r0, [pc, #68]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800780a:	6880      	ldr	r0, [r0, #8]
 800780c:	2600      	movs	r6, #0
 800780e:	9604      	str	r6, [sp, #16]
 8007810:	9003      	str	r0, [sp, #12]
 8007812:	9102      	str	r1, [sp, #8]
 8007814:	9201      	str	r2, [sp, #4]
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	2300      	movs	r3, #0
 800781a:	2201      	movs	r2, #1
 800781c:	4629      	mov	r1, r5
 800781e:	4620      	mov	r0, r4
 8007820:	f7fd fd0a 	bl	8005238 <aci_gap_set_authentication_requirement>
 8007824:	4603      	mov	r3, r0
 8007826:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8007828:	4b09      	ldr	r3, [pc, #36]	@ (8007850 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800782a:	789b      	ldrb	r3, [r3, #2]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d003      	beq.n	8007838 <Ble_Hci_Gap_Gatt_Init+0x184>
  {
    ret = aci_gap_configure_whitelist();
 8007830:	f7fd fee5 	bl	80055fe <aci_gap_configure_filter_accept_list>
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8007838:	bf00      	nop
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007840:	20000020 	.word	0x20000020
 8007844:	08008800 	.word	0x08008800
 8007848:	08008810 	.word	0x08008810
 800784c:	08008628 	.word	0x08008628
 8007850:	20000334 	.word	0x20000334
 8007854:	0001b207 	.word	0x0001b207

08007858 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08c      	sub	sp, #48	@ 0x30
 800785c:	af08      	add	r7, sp, #32
 800785e:	4603      	mov	r3, r0
 8007860:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007862:	2392      	movs	r3, #146	@ 0x92
 8007864:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8007866:	79fb      	ldrb	r3, [r7, #7]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d106      	bne.n	800787a <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 800786c:	4b24      	ldr	r3, [pc, #144]	@ (8007900 <Adv_Request+0xa8>)
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8007872:	4b24      	ldr	r3, [pc, #144]	@ (8007904 <Adv_Request+0xac>)
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	81bb      	strh	r3, [r7, #12]
 8007878:	e005      	b.n	8007886 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 800787a:	f44f 63c8 	mov.w	r3, #1600	@ 0x640
 800787e:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8007880:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8007884:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8007886:	4b20      	ldr	r3, [pc, #128]	@ (8007908 <Adv_Request+0xb0>)
 8007888:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800788c:	4618      	mov	r0, r3
 800788e:	f7f9 fc39 	bl	8001104 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 8007892:	79fb      	ldrb	r3, [r7, #7]
 8007894:	2b02      	cmp	r3, #2
 8007896:	d10d      	bne.n	80078b4 <Adv_Request+0x5c>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8007898:	4b1b      	ldr	r3, [pc, #108]	@ (8007908 <Adv_Request+0xb0>)
 800789a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800789e:	2b01      	cmp	r3, #1
 80078a0:	d004      	beq.n	80078ac <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80078a2:	4b19      	ldr	r3, [pc, #100]	@ (8007908 <Adv_Request+0xb0>)
 80078a4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d103      	bne.n	80078b4 <Adv_Request+0x5c>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 80078ac:	f7fd fb52 	bl	8004f54 <aci_gap_set_non_discoverable>
 80078b0:	4603      	mov	r3, r0
 80078b2:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80078b4:	4a14      	ldr	r2, [pc, #80]	@ (8007908 <Adv_Request+0xb0>)
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 80078bc:	4b12      	ldr	r3, [pc, #72]	@ (8007908 <Adv_Request+0xb0>)
 80078be:	7e1b      	ldrb	r3, [r3, #24]
 80078c0:	89ba      	ldrh	r2, [r7, #12]
 80078c2:	89f9      	ldrh	r1, [r7, #14]
 80078c4:	2000      	movs	r0, #0
 80078c6:	9006      	str	r0, [sp, #24]
 80078c8:	2000      	movs	r0, #0
 80078ca:	9005      	str	r0, [sp, #20]
 80078cc:	480f      	ldr	r0, [pc, #60]	@ (800790c <Adv_Request+0xb4>)
 80078ce:	9004      	str	r0, [sp, #16]
 80078d0:	9303      	str	r3, [sp, #12]
 80078d2:	4b0f      	ldr	r3, [pc, #60]	@ (8007910 <Adv_Request+0xb8>)
 80078d4:	9302      	str	r3, [sp, #8]
 80078d6:	2308      	movs	r3, #8
 80078d8:	9301      	str	r3, [sp, #4]
 80078da:	2300      	movs	r3, #0
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	2300      	movs	r3, #0
 80078e0:	2000      	movs	r0, #0
 80078e2:	f7fd fb5b 	bl	8004f9c <aci_gap_set_discoverable>
 80078e6:	4603      	mov	r3, r0
 80078e8:	72fb      	strb	r3, [r7, #11]
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 80078ea:	490a      	ldr	r1, [pc, #40]	@ (8007914 <Adv_Request+0xbc>)
 80078ec:	200e      	movs	r0, #14
 80078ee:	f7fd fe14 	bl	800551a <aci_gap_update_adv_data>
 80078f2:	4603      	mov	r3, r0
 80078f4:	72fb      	strb	r3, [r7, #11]
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 80078f6:	bf00      	nop
}
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	200003b8 	.word	0x200003b8
 8007904:	200003ba 	.word	0x200003ba
 8007908:	20000334 	.word	0x20000334
 800790c:	2000034d 	.word	0x2000034d
 8007910:	08008820 	.word	0x08008820
 8007914:	20000020 	.word	0x20000020

08007918 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800791e:	f7ff fd57 	bl	80073d0 <LL_FLASH_GetUDN>
 8007922:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800792a:	d023      	beq.n	8007974 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800792c:	f7ff fd68 	bl	8007400 <LL_FLASH_GetSTCompanyID>
 8007930:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8007932:	f7ff fd59 	bl	80073e8 <LL_FLASH_GetDeviceID>
 8007936:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	b2da      	uxtb	r2, r3
 800793c:	4b16      	ldr	r3, [pc, #88]	@ (8007998 <BleGetBdAddress+0x80>)
 800793e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	0a1b      	lsrs	r3, r3, #8
 8007944:	b2da      	uxtb	r2, r3
 8007946:	4b14      	ldr	r3, [pc, #80]	@ (8007998 <BleGetBdAddress+0x80>)
 8007948:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	b2da      	uxtb	r2, r3
 800794e:	4b12      	ldr	r3, [pc, #72]	@ (8007998 <BleGetBdAddress+0x80>)
 8007950:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	b2da      	uxtb	r2, r3
 8007956:	4b10      	ldr	r3, [pc, #64]	@ (8007998 <BleGetBdAddress+0x80>)
 8007958:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	0a1b      	lsrs	r3, r3, #8
 800795e:	b2da      	uxtb	r2, r3
 8007960:	4b0d      	ldr	r3, [pc, #52]	@ (8007998 <BleGetBdAddress+0x80>)
 8007962:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	0c1b      	lsrs	r3, r3, #16
 8007968:	b2da      	uxtb	r2, r3
 800796a:	4b0b      	ldr	r3, [pc, #44]	@ (8007998 <BleGetBdAddress+0x80>)
 800796c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800796e:	4b0a      	ldr	r3, [pc, #40]	@ (8007998 <BleGetBdAddress+0x80>)
 8007970:	617b      	str	r3, [r7, #20]
 8007972:	e00b      	b.n	800798c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007974:	2000      	movs	r0, #0
 8007976:	f7ff fc45 	bl	8007204 <OTP_Read>
 800797a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	617b      	str	r3, [r7, #20]
 8007986:	e001      	b.n	800798c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007988:	4b04      	ldr	r3, [pc, #16]	@ (800799c <BleGetBdAddress+0x84>)
 800798a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800798c:	697b      	ldr	r3, [r7, #20]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	2000032c 	.word	0x2000032c
 800799c:	080087f8 	.word	0x080087f8

080079a0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80079a6:	4b0a      	ldr	r3, [pc, #40]	@ (80079d0 <Adv_Cancel+0x30>)
 80079a8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80079ac:	2b05      	cmp	r3, #5
 80079ae:	d00a      	beq.n	80079c6 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80079b0:	2392      	movs	r3, #146	@ 0x92
 80079b2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80079b4:	f7fd face 	bl	8004f54 <aci_gap_set_non_discoverable>
 80079b8:	4603      	mov	r3, r0
 80079ba:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80079bc:	4b04      	ldr	r3, [pc, #16]	@ (80079d0 <Adv_Cancel+0x30>)
 80079be:	2200      	movs	r2, #0
 80079c0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80079c4:	bf00      	nop
 80079c6:	bf00      	nop
}
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000334 	.word	0x20000334

080079d4 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80079d8:	2100      	movs	r1, #0
 80079da:	2001      	movs	r0, #1
 80079dc:	f000 fc86 	bl	80082ec <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 80079e0:	bf00      	nop
}
 80079e2:	bd80      	pop	{r7, pc}

080079e4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 80079e4:	b480      	push	{r7}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */

  /* USER CODE END Switch_OFF_GPIO */
}
 80079e8:	bf00      	nop
 80079ea:	46bd      	mov	sp, r7
 80079ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f0:	4770      	bx	lr

080079f2 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80079fa:	2100      	movs	r1, #0
 80079fc:	2002      	movs	r0, #2
 80079fe:	f000 fc75 	bl	80082ec <UTIL_SEQ_SetTask>

  return;
 8007a02:	bf00      	nop
}
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007a12:	2001      	movs	r0, #1
 8007a14:	f000 fcd6 	bl	80083c4 <UTIL_SEQ_SetEvt>

  return;
 8007a18:	bf00      	nop
}
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8007a28:	2001      	movs	r0, #1
 8007a2a:	f000 fceb 	bl	8008404 <UTIL_SEQ_WaitEvt>

  return;
 8007a2e:	bf00      	nop
}
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b084      	sub	sp, #16
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	3308      	adds	r3, #8
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7fe fd4b 	bl	80064e4 <SVCCTL_UserEvtRx>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8007a52:	7afb      	ldrb	r3, [r7, #11]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8007a5e:	e003      	b.n	8007a68 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	701a      	strb	r2, [r3, #0]
  return;
 8007a66:	bf00      	nop
}
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	4603      	mov	r3, r0
 8007a76:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007a78:	79fb      	ldrb	r3, [r7, #7]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <BLE_StatusNot+0x16>
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d006      	beq.n	8007a90 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007a82:	e00b      	b.n	8007a9c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007a84:	2307      	movs	r3, #7
 8007a86:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fc5b 	bl	8008344 <UTIL_SEQ_PauseTask>
      break;
 8007a8e:	e005      	b.n	8007a9c <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007a90:	2307      	movs	r3, #7
 8007a92:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fc75 	bl	8008384 <UTIL_SEQ_ResumeTask>
      break;
 8007a9a:	bf00      	nop
  }

  return;
 8007a9c:	bf00      	nop
}
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <P2PS_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b03      	cmp	r3, #3
 8007ab2:	d006      	beq.n	8007ac2 <P2PS_STM_App_Notification+0x1e>
 8007ab4:	2b03      	cmp	r3, #3
 8007ab6:	dc09      	bgt.n	8007acc <P2PS_STM_App_Notification+0x28>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d009      	beq.n	8007ad0 <P2PS_STM_App_Notification+0x2c>
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d009      	beq.n	8007ad4 <P2PS_STM_App_Notification+0x30>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8007ac0:	e004      	b.n	8007acc <P2PS_STM_App_Notification+0x28>
    	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007ac2:	2110      	movs	r1, #16
 8007ac4:	4806      	ldr	r0, [pc, #24]	@ (8007ae0 <P2PS_STM_App_Notification+0x3c>)
 8007ac6:	f7fa fef3 	bl	80028b0 <HAL_GPIO_TogglePin>
      break;
 8007aca:	e004      	b.n	8007ad6 <P2PS_STM_App_Notification+0x32>
      break;
 8007acc:	bf00      	nop
 8007ace:	e002      	b.n	8007ad6 <P2PS_STM_App_Notification+0x32>
      break;
 8007ad0:	bf00      	nop
 8007ad2:	e000      	b.n	8007ad6 <P2PS_STM_App_Notification+0x32>
      break;
 8007ad4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8007ad6:	bf00      	nop
}
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	48000400 	.word	0x48000400

08007ae4 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b082      	sub	sp, #8
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	781b      	ldrb	r3, [r3, #0]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d002      	beq.n	8007afa <P2PS_APP_Notification+0x16>
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d006      	beq.n	8007b06 <P2PS_APP_Notification+0x22>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8007af8:	e00b      	b.n	8007b12 <P2PS_APP_Notification+0x2e>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 8007afa:	2201      	movs	r2, #1
 8007afc:	2120      	movs	r1, #32
 8007afe:	4807      	ldr	r0, [pc, #28]	@ (8007b1c <P2PS_APP_Notification+0x38>)
 8007b00:	f7fa febe 	bl	8002880 <HAL_GPIO_WritePin>
    break;
 8007b04:	e005      	b.n	8007b12 <P2PS_APP_Notification+0x2e>
    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 8007b06:	2200      	movs	r2, #0
 8007b08:	2120      	movs	r1, #32
 8007b0a:	4804      	ldr	r0, [pc, #16]	@ (8007b1c <P2PS_APP_Notification+0x38>)
 8007b0c:	f7fa feb8 	bl	8002880 <HAL_GPIO_WritePin>
    break;
 8007b10:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 8007b12:	bf00      	nop
}
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	48000400 	.word	0x48000400

08007b20 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8007b20:	b480      	push	{r7}
 8007b22:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */

/* USER CODE END P2PS_APP_Init */
  return;
 8007b24:	bf00      	nop
}
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr
	...

08007b30 <LL_PWR_EnableBootC2>:
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8007b34:	4b05      	ldr	r3, [pc, #20]	@ (8007b4c <LL_PWR_EnableBootC2+0x1c>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	4a04      	ldr	r2, [pc, #16]	@ (8007b4c <LL_PWR_EnableBootC2+0x1c>)
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b3e:	60d3      	str	r3, [r2, #12]
}
 8007b40:	bf00      	nop
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	58000400 	.word	0x58000400

08007b50 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007b58:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007b5a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8007b5e:	4905      	ldr	r1, [pc, #20]	@ (8007b74 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr
 8007b74:	58000800 	.word	0x58000800

08007b78 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007b80:	4b05      	ldr	r3, [pc, #20]	@ (8007b98 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007b82:	6a1a      	ldr	r2, [r3, #32]
 8007b84:	4904      	ldr	r1, [pc, #16]	@ (8007b98 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	620b      	str	r3, [r1, #32]
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b96:	4770      	bx	lr
 8007b98:	58000800 	.word	0x58000800

08007b9c <LL_AHB3_GRP1_EnableClock>:
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8007ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007baa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007bb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
}
 8007bc2:	bf00      	nop
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b085      	sub	sp, #20
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bda:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8007bde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007bea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bee:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
}
 8007bfa:	bf00      	nop
 8007bfc:	3714      	adds	r7, #20
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	601a      	str	r2, [r3, #0]
}
 8007c1a:	bf00      	nop
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f043 0201 	orr.w	r2, r3, #1
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	601a      	str	r2, [r3, #0]
}
 8007c3a:	bf00      	nop
 8007c3c:	370c      	adds	r7, #12
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b083      	sub	sp, #12
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
 8007c4e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	041b      	lsls	r3, r3, #16
 8007c58:	43db      	mvns	r3, r3
 8007c5a:	401a      	ands	r2, r3
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	605a      	str	r2, [r3, #4]
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	041b      	lsls	r3, r3, #16
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	605a      	str	r2, [r3, #4]
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr

08007c90 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	401a      	ands	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	605a      	str	r2, [r3, #4]
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	609a      	str	r2, [r3, #8]
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	041a      	lsls	r2, r3, #16
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	609a      	str	r2, [r3, #8]
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	4013      	ands	r3, r2
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d101      	bne.n	8007d0a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	69da      	ldr	r2, [r3, #28]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d101      	bne.n	8007d34 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007d30:	2301      	movs	r3, #1
 8007d32:	e000      	b.n	8007d36 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
	...

08007d44 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007d48:	2102      	movs	r1, #2
 8007d4a:	4818      	ldr	r0, [pc, #96]	@ (8007dac <HW_IPCC_Rx_Handler+0x68>)
 8007d4c:	f7ff ffe4 	bl	8007d18 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d008      	beq.n	8007d68 <HW_IPCC_Rx_Handler+0x24>
 8007d56:	4b15      	ldr	r3, [pc, #84]	@ (8007dac <HW_IPCC_Rx_Handler+0x68>)
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d102      	bne.n	8007d68 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8007d62:	f000 f8d5 	bl	8007f10 <HW_IPCC_SYS_EvtHandler>
 8007d66:	e01e      	b.n	8007da6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8007d68:	2101      	movs	r1, #1
 8007d6a:	4810      	ldr	r0, [pc, #64]	@ (8007dac <HW_IPCC_Rx_Handler+0x68>)
 8007d6c:	f7ff ffd4 	bl	8007d18 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007d70:	4603      	mov	r3, r0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d008      	beq.n	8007d88 <HW_IPCC_Rx_Handler+0x44>
 8007d76:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <HW_IPCC_Rx_Handler+0x68>)
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d102      	bne.n	8007d88 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8007d82:	f000 f889 	bl	8007e98 <HW_IPCC_BLE_EvtHandler>
 8007d86:	e00e      	b.n	8007da6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8007d88:	2108      	movs	r1, #8
 8007d8a:	4808      	ldr	r0, [pc, #32]	@ (8007dac <HW_IPCC_Rx_Handler+0x68>)
 8007d8c:	f7ff ffc4 	bl	8007d18 <LL_C2_IPCC_IsActiveFlag_CHx>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d008      	beq.n	8007da8 <HW_IPCC_Rx_Handler+0x64>
 8007d96:	4b05      	ldr	r3, [pc, #20]	@ (8007dac <HW_IPCC_Rx_Handler+0x68>)
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	f003 0308 	and.w	r3, r3, #8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d102      	bne.n	8007da8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8007da2:	f000 f901 	bl	8007fa8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8007da6:	bf00      	nop
 8007da8:	bf00      	nop
}
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	58000c00 	.word	0x58000c00

08007db0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007db4:	2102      	movs	r1, #2
 8007db6:	4818      	ldr	r0, [pc, #96]	@ (8007e18 <HW_IPCC_Tx_Handler+0x68>)
 8007db8:	f7ff ff99 	bl	8007cee <LL_C1_IPCC_IsActiveFlag_CHx>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d108      	bne.n	8007dd4 <HW_IPCC_Tx_Handler+0x24>
 8007dc2:	4b15      	ldr	r3, [pc, #84]	@ (8007e18 <HW_IPCC_Tx_Handler+0x68>)
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d102      	bne.n	8007dd4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007dce:	f000 f893 	bl	8007ef8 <HW_IPCC_SYS_CmdEvtHandler>
 8007dd2:	e01e      	b.n	8007e12 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007dd4:	2108      	movs	r1, #8
 8007dd6:	4810      	ldr	r0, [pc, #64]	@ (8007e18 <HW_IPCC_Tx_Handler+0x68>)
 8007dd8:	f7ff ff89 	bl	8007cee <LL_C1_IPCC_IsActiveFlag_CHx>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d108      	bne.n	8007df4 <HW_IPCC_Tx_Handler+0x44>
 8007de2:	4b0d      	ldr	r3, [pc, #52]	@ (8007e18 <HW_IPCC_Tx_Handler+0x68>)
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d102      	bne.n	8007df4 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8007dee:	f000 f8bd 	bl	8007f6c <HW_IPCC_MM_FreeBufHandler>
 8007df2:	e00e      	b.n	8007e12 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007df4:	2120      	movs	r1, #32
 8007df6:	4808      	ldr	r0, [pc, #32]	@ (8007e18 <HW_IPCC_Tx_Handler+0x68>)
 8007df8:	f7ff ff79 	bl	8007cee <LL_C1_IPCC_IsActiveFlag_CHx>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d108      	bne.n	8007e14 <HW_IPCC_Tx_Handler+0x64>
 8007e02:	4b05      	ldr	r3, [pc, #20]	@ (8007e18 <HW_IPCC_Tx_Handler+0x68>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d102      	bne.n	8007e14 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007e0e:	f000 f84f 	bl	8007eb0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
}
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	58000c00 	.word	0x58000c00

08007e1c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8007e20:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007e24:	f7ff fed3 	bl	8007bce <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8007e28:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007e2c:	f7ff fea4 	bl	8007b78 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8007e30:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8007e34:	f7ff fe8c 	bl	8007b50 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007e38:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007e3a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007e3c:	f7ff fe78 	bl	8007b30 <LL_PWR_EnableBootC2>

  return;
 8007e40:	bf00      	nop
}
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8007e48:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8007e4c:	f7ff fea6 	bl	8007b9c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8007e50:	4806      	ldr	r0, [pc, #24]	@ (8007e6c <HW_IPCC_Init+0x28>)
 8007e52:	f7ff fee8 	bl	8007c26 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8007e56:	4805      	ldr	r0, [pc, #20]	@ (8007e6c <HW_IPCC_Init+0x28>)
 8007e58:	f7ff fed5 	bl	8007c06 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8007e5c:	202c      	movs	r0, #44	@ 0x2c
 8007e5e:	f7fa fb62 	bl	8002526 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8007e62:	202d      	movs	r0, #45	@ 0x2d
 8007e64:	f7fa fb5f 	bl	8002526 <HAL_NVIC_EnableIRQ>

  return;
 8007e68:	bf00      	nop
}
 8007e6a:	bd80      	pop	{r7, pc}
 8007e6c:	58000c00 	.word	0x58000c00

08007e70 <HW_IPCC_BLE_Init>:
#endif
/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007e74:	2101      	movs	r1, #1
 8007e76:	4802      	ldr	r0, [pc, #8]	@ (8007e80 <HW_IPCC_BLE_Init+0x10>)
 8007e78:	f7ff ff0a 	bl	8007c90 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007e7c:	bf00      	nop
}
 8007e7e:	bd80      	pop	{r7, pc}
 8007e80:	58000c00 	.word	0x58000c00

08007e84 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_BLE_CMD_CHANNEL );
 8007e88:	2101      	movs	r1, #1
 8007e8a:	4802      	ldr	r0, [pc, #8]	@ (8007e94 <HW_IPCC_BLE_SendCmd+0x10>)
 8007e8c:	f7ff ff20 	bl	8007cd0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007e90:	bf00      	nop
}
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	58000c00 	.word	0x58000c00

08007e98 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007e9c:	f7fe fffa 	bl	8006e94 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007ea0:	2101      	movs	r1, #1
 8007ea2:	4802      	ldr	r0, [pc, #8]	@ (8007eac <HW_IPCC_BLE_EvtHandler+0x14>)
 8007ea4:	f7ff ff06 	bl	8007cb4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007ea8:	bf00      	nop
}
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	58000c00 	.word	0x58000c00

08007eb0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007eb4:	2120      	movs	r1, #32
 8007eb6:	4803      	ldr	r0, [pc, #12]	@ (8007ec4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8007eb8:	f7ff fed8 	bl	8007c6c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007ebc:	f7ff f81a 	bl	8006ef4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007ec0:	bf00      	nop
}
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	58000c00 	.word	0x58000c00

08007ec8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007ecc:	2102      	movs	r1, #2
 8007ece:	4802      	ldr	r0, [pc, #8]	@ (8007ed8 <HW_IPCC_SYS_Init+0x10>)
 8007ed0:	f7ff fede 	bl	8007c90 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007ed4:	bf00      	nop
}
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	58000c00 	.word	0x58000c00

08007edc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	af00      	add	r7, sp, #0
  HW_IPCC_SET_FLAG_CHX( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007ee0:	2102      	movs	r1, #2
 8007ee2:	4804      	ldr	r0, [pc, #16]	@ (8007ef4 <HW_IPCC_SYS_SendCmd+0x18>)
 8007ee4:	f7ff fef4 	bl	8007cd0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007ee8:	2102      	movs	r1, #2
 8007eea:	4802      	ldr	r0, [pc, #8]	@ (8007ef4 <HW_IPCC_SYS_SendCmd+0x18>)
 8007eec:	f7ff feab 	bl	8007c46 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8007ef0:	bf00      	nop
}
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	58000c00 	.word	0x58000c00

08007ef8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007efc:	2102      	movs	r1, #2
 8007efe:	4803      	ldr	r0, [pc, #12]	@ (8007f0c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007f00:	f7ff feb4 	bl	8007c6c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007f04:	f7ff f846 	bl	8006f94 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007f08:	bf00      	nop
}
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	58000c00 	.word	0x58000c00

08007f10 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007f14:	f7ff f854 	bl	8006fc0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007f18:	2102      	movs	r1, #2
 8007f1a:	4802      	ldr	r0, [pc, #8]	@ (8007f24 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007f1c:	f7ff feca 	bl	8007cb4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007f20:	bf00      	nop
}
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	58000c00 	.word	0x58000c00

08007f28 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8007f30:	2108      	movs	r1, #8
 8007f32:	480c      	ldr	r0, [pc, #48]	@ (8007f64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007f34:	f7ff fedb 	bl	8007cee <LL_C1_IPCC_IsActiveFlag_CHx>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d007      	beq.n	8007f4e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8007f3e:	4a0a      	ldr	r2, [pc, #40]	@ (8007f68 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007f44:	2108      	movs	r1, #8
 8007f46:	4807      	ldr	r0, [pc, #28]	@ (8007f64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007f48:	f7ff fe7d 	bl	8007c46 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8007f4c:	e006      	b.n	8007f5c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4798      	blx	r3
    HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007f52:	2108      	movs	r1, #8
 8007f54:	4803      	ldr	r0, [pc, #12]	@ (8007f64 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007f56:	f7ff febb 	bl	8007cd0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8007f5a:	bf00      	nop
}
 8007f5c:	3708      	adds	r7, #8
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}
 8007f62:	bf00      	nop
 8007f64:	58000c00 	.word	0x58000c00
 8007f68:	200003c0 	.word	0x200003c0

08007f6c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007f70:	2108      	movs	r1, #8
 8007f72:	4806      	ldr	r0, [pc, #24]	@ (8007f8c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007f74:	f7ff fe7a 	bl	8007c6c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8007f78:	4b05      	ldr	r3, [pc, #20]	@ (8007f90 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4798      	blx	r3

  HW_IPCC_SET_FLAG_CHX( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007f7e:	2108      	movs	r1, #8
 8007f80:	4802      	ldr	r0, [pc, #8]	@ (8007f8c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007f82:	f7ff fea5 	bl	8007cd0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007f86:	bf00      	nop
}
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	58000c00 	.word	0x58000c00
 8007f90:	200003c0 	.word	0x200003c0

08007f94 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007f98:	2108      	movs	r1, #8
 8007f9a:	4802      	ldr	r0, [pc, #8]	@ (8007fa4 <HW_IPCC_TRACES_Init+0x10>)
 8007f9c:	f7ff fe78 	bl	8007c90 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007fa0:	bf00      	nop
}
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	58000c00 	.word	0x58000c00

08007fa8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007fac:	f7ff f8b0 	bl	8007110 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007fb0:	2108      	movs	r1, #8
 8007fb2:	4802      	ldr	r0, [pc, #8]	@ (8007fbc <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007fb4:	f7ff fe7e 	bl	8007cb4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007fb8:	bf00      	nop
}
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	58000c00 	.word	0x58000c00

08007fc0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8007fc4:	4b05      	ldr	r3, [pc, #20]	@ (8007fdc <UTIL_LPM_Init+0x1c>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8007fca:	4b05      	ldr	r3, [pc, #20]	@ (8007fe0 <UTIL_LPM_Init+0x20>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8007fd0:	bf00      	nop
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	200003c4 	.word	0x200003c4
 8007fe0:	200003c8 	.word	0x200003c8

08007fe4 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	460b      	mov	r3, r1
 8007fee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff4:	613b      	str	r3, [r7, #16]
  return(result);
 8007ff6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8007ff8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ffa:	b672      	cpsid	i
}
 8007ffc:	bf00      	nop
  
  switch(state)
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d008      	beq.n	8008016 <UTIL_LPM_SetOffMode+0x32>
 8008004:	2b01      	cmp	r3, #1
 8008006:	d10e      	bne.n	8008026 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008008:	4b0d      	ldr	r3, [pc, #52]	@ (8008040 <UTIL_LPM_SetOffMode+0x5c>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4313      	orrs	r3, r2
 8008010:	4a0b      	ldr	r2, [pc, #44]	@ (8008040 <UTIL_LPM_SetOffMode+0x5c>)
 8008012:	6013      	str	r3, [r2, #0]
      break;
 8008014:	e008      	b.n	8008028 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	43da      	mvns	r2, r3
 800801a:	4b09      	ldr	r3, [pc, #36]	@ (8008040 <UTIL_LPM_SetOffMode+0x5c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4013      	ands	r3, r2
 8008020:	4a07      	ldr	r2, [pc, #28]	@ (8008040 <UTIL_LPM_SetOffMode+0x5c>)
 8008022:	6013      	str	r3, [r2, #0]
      break;
 8008024:	e000      	b.n	8008028 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008026:	bf00      	nop
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f383 8810 	msr	PRIMASK, r3
}
 8008032:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008034:	bf00      	nop
 8008036:	371c      	adds	r7, #28
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr
 8008040:	200003c8 	.word	0x200003c8

08008044 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800804a:	f3ef 8310 	mrs	r3, PRIMASK
 800804e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008050:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8008052:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8008054:	b672      	cpsid	i
}
 8008056:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8008058:	4b12      	ldr	r3, [pc, #72]	@ (80080a4 <UTIL_LPM_EnterLowPower+0x60>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d006      	beq.n	800806e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8008060:	4b11      	ldr	r3, [pc, #68]	@ (80080a8 <UTIL_LPM_EnterLowPower+0x64>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8008066:	4b10      	ldr	r3, [pc, #64]	@ (80080a8 <UTIL_LPM_EnterLowPower+0x64>)
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	4798      	blx	r3
 800806c:	e010      	b.n	8008090 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800806e:	4b0f      	ldr	r3, [pc, #60]	@ (80080ac <UTIL_LPM_EnterLowPower+0x68>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d006      	beq.n	8008084 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8008076:	4b0c      	ldr	r3, [pc, #48]	@ (80080a8 <UTIL_LPM_EnterLowPower+0x64>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800807c:	4b0a      	ldr	r3, [pc, #40]	@ (80080a8 <UTIL_LPM_EnterLowPower+0x64>)
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	4798      	blx	r3
 8008082:	e005      	b.n	8008090 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8008084:	4b08      	ldr	r3, [pc, #32]	@ (80080a8 <UTIL_LPM_EnterLowPower+0x64>)
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800808a:	4b07      	ldr	r3, [pc, #28]	@ (80080a8 <UTIL_LPM_EnterLowPower+0x64>)
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	4798      	blx	r3
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f383 8810 	msr	PRIMASK, r3
}
 800809a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800809c:	bf00      	nop
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	200003c4 	.word	0x200003c4
 80080a8:	08008760 	.word	0x08008760
 80080ac:	200003c8 	.word	0x200003c8

080080b0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b090      	sub	sp, #64	@ 0x40
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80080b8:	4b73      	ldr	r3, [pc, #460]	@ (8008288 <UTIL_SEQ_Run+0x1d8>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80080be:	4b72      	ldr	r3, [pc, #456]	@ (8008288 <UTIL_SEQ_Run+0x1d8>)
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4013      	ands	r3, r2
 80080c6:	4a70      	ldr	r2, [pc, #448]	@ (8008288 <UTIL_SEQ_Run+0x1d8>)
 80080c8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80080ca:	4b70      	ldr	r3, [pc, #448]	@ (800828c <UTIL_SEQ_Run+0x1dc>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80080d0:	4b6f      	ldr	r3, [pc, #444]	@ (8008290 <UTIL_SEQ_Run+0x1e0>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80080d6:	4b6f      	ldr	r3, [pc, #444]	@ (8008294 <UTIL_SEQ_Run+0x1e4>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80080dc:	4b6e      	ldr	r3, [pc, #440]	@ (8008298 <UTIL_SEQ_Run+0x1e8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80080e2:	e08d      	b.n	8008200 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80080e4:	2300      	movs	r3, #0
 80080e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80080e8:	e002      	b.n	80080f0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80080ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ec:	3301      	adds	r3, #1
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80080f0:	4a6a      	ldr	r2, [pc, #424]	@ (800829c <UTIL_SEQ_Run+0x1ec>)
 80080f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80080f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fa:	401a      	ands	r2, r3
 80080fc:	4b62      	ldr	r3, [pc, #392]	@ (8008288 <UTIL_SEQ_Run+0x1d8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4013      	ands	r3, r2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0f1      	beq.n	80080ea <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008106:	4a65      	ldr	r2, [pc, #404]	@ (800829c <UTIL_SEQ_Run+0x1ec>)
 8008108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800810a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	401a      	ands	r2, r3
 8008112:	4b5d      	ldr	r3, [pc, #372]	@ (8008288 <UTIL_SEQ_Run+0x1d8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4013      	ands	r3, r2
 8008118:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800811a:	4a60      	ldr	r2, [pc, #384]	@ (800829c <UTIL_SEQ_Run+0x1ec>)
 800811c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800811e:	00db      	lsls	r3, r3, #3
 8008120:	4413      	add	r3, r2
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	4013      	ands	r3, r2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800812c:	4a5b      	ldr	r2, [pc, #364]	@ (800829c <UTIL_SEQ_Run+0x1ec>)
 800812e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008130:	00db      	lsls	r3, r3, #3
 8008132:	4413      	add	r3, r2
 8008134:	f04f 32ff 	mov.w	r2, #4294967295
 8008138:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800813a:	4a58      	ldr	r2, [pc, #352]	@ (800829c <UTIL_SEQ_Run+0x1ec>)
 800813c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800813e:	00db      	lsls	r3, r3, #3
 8008140:	4413      	add	r3, r2
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008146:	4013      	ands	r3, r2
 8008148:	4618      	mov	r0, r3
 800814a:	f000 f9b3 	bl	80084b4 <SEQ_BitPosition>
 800814e:	4603      	mov	r3, r0
 8008150:	461a      	mov	r2, r3
 8008152:	4b53      	ldr	r3, [pc, #332]	@ (80082a0 <UTIL_SEQ_Run+0x1f0>)
 8008154:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8008156:	4a51      	ldr	r2, [pc, #324]	@ (800829c <UTIL_SEQ_Run+0x1ec>)
 8008158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4413      	add	r3, r2
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	4b4f      	ldr	r3, [pc, #316]	@ (80082a0 <UTIL_SEQ_Run+0x1f0>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2101      	movs	r1, #1
 8008166:	fa01 f303 	lsl.w	r3, r1, r3
 800816a:	43db      	mvns	r3, r3
 800816c:	401a      	ands	r2, r3
 800816e:	494b      	ldr	r1, [pc, #300]	@ (800829c <UTIL_SEQ_Run+0x1ec>)
 8008170:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	440b      	add	r3, r1
 8008176:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008178:	f3ef 8310 	mrs	r3, PRIMASK
 800817c:	61bb      	str	r3, [r7, #24]
  return(result);
 800817e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008180:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008182:	b672      	cpsid	i
}
 8008184:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008186:	4b46      	ldr	r3, [pc, #280]	@ (80082a0 <UTIL_SEQ_Run+0x1f0>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2201      	movs	r2, #1
 800818c:	fa02 f303 	lsl.w	r3, r2, r3
 8008190:	43da      	mvns	r2, r3
 8008192:	4b3e      	ldr	r3, [pc, #248]	@ (800828c <UTIL_SEQ_Run+0x1dc>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4013      	ands	r3, r2
 8008198:	4a3c      	ldr	r2, [pc, #240]	@ (800828c <UTIL_SEQ_Run+0x1dc>)
 800819a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800819c:	2302      	movs	r3, #2
 800819e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081a0:	e013      	b.n	80081ca <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80081a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081a4:	3b01      	subs	r3, #1
 80081a6:	4a3d      	ldr	r2, [pc, #244]	@ (800829c <UTIL_SEQ_Run+0x1ec>)
 80081a8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80081ac:	4b3c      	ldr	r3, [pc, #240]	@ (80082a0 <UTIL_SEQ_Run+0x1f0>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2201      	movs	r2, #1
 80081b2:	fa02 f303 	lsl.w	r3, r2, r3
 80081b6:	43da      	mvns	r2, r3
 80081b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ba:	3b01      	subs	r3, #1
 80081bc:	400a      	ands	r2, r1
 80081be:	4937      	ldr	r1, [pc, #220]	@ (800829c <UTIL_SEQ_Run+0x1ec>)
 80081c0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80081c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081c6:	3b01      	subs	r3, #1
 80081c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1e8      	bne.n	80081a2 <UTIL_SEQ_Run+0xf2>
 80081d0:	6a3b      	ldr	r3, [r7, #32]
 80081d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f383 8810 	msr	PRIMASK, r3
}
 80081da:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80081dc:	4b30      	ldr	r3, [pc, #192]	@ (80082a0 <UTIL_SEQ_Run+0x1f0>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a30      	ldr	r2, [pc, #192]	@ (80082a4 <UTIL_SEQ_Run+0x1f4>)
 80081e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081e6:	4798      	blx	r3

    local_taskset = TaskSet;
 80081e8:	4b28      	ldr	r3, [pc, #160]	@ (800828c <UTIL_SEQ_Run+0x1dc>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80081ee:	4b28      	ldr	r3, [pc, #160]	@ (8008290 <UTIL_SEQ_Run+0x1e0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80081f4:	4b27      	ldr	r3, [pc, #156]	@ (8008294 <UTIL_SEQ_Run+0x1e4>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80081fa:	4b27      	ldr	r3, [pc, #156]	@ (8008298 <UTIL_SEQ_Run+0x1e8>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008200:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008204:	401a      	ands	r2, r3
 8008206:	4b20      	ldr	r3, [pc, #128]	@ (8008288 <UTIL_SEQ_Run+0x1d8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4013      	ands	r3, r2
 800820c:	2b00      	cmp	r3, #0
 800820e:	d005      	beq.n	800821c <UTIL_SEQ_Run+0x16c>
 8008210:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008214:	4013      	ands	r3, r2
 8008216:	2b00      	cmp	r3, #0
 8008218:	f43f af64 	beq.w	80080e4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800821c:	4b20      	ldr	r3, [pc, #128]	@ (80082a0 <UTIL_SEQ_Run+0x1f0>)
 800821e:	f04f 32ff 	mov.w	r2, #4294967295
 8008222:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008224:	f000 f938 	bl	8008498 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008228:	f3ef 8310 	mrs	r3, PRIMASK
 800822c:	613b      	str	r3, [r7, #16]
  return(result);
 800822e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008232:	b672      	cpsid	i
}
 8008234:	bf00      	nop
  local_taskset = TaskSet;
 8008236:	4b15      	ldr	r3, [pc, #84]	@ (800828c <UTIL_SEQ_Run+0x1dc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800823c:	4b14      	ldr	r3, [pc, #80]	@ (8008290 <UTIL_SEQ_Run+0x1e0>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008242:	4b14      	ldr	r3, [pc, #80]	@ (8008294 <UTIL_SEQ_Run+0x1e4>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8008248:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800824a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800824c:	401a      	ands	r2, r3
 800824e:	4b0e      	ldr	r3, [pc, #56]	@ (8008288 <UTIL_SEQ_Run+0x1d8>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4013      	ands	r3, r2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d107      	bne.n	8008268 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8008258:	4b0f      	ldr	r3, [pc, #60]	@ (8008298 <UTIL_SEQ_Run+0x1e8>)
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825e:	4013      	ands	r3, r2
 8008260:	2b00      	cmp	r3, #0
 8008262:	d101      	bne.n	8008268 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008264:	f7f8 f9b1 	bl	80005ca <UTIL_SEQ_Idle>
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f383 8810 	msr	PRIMASK, r3
}
 8008272:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008274:	f000 f917 	bl	80084a6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8008278:	4a03      	ldr	r2, [pc, #12]	@ (8008288 <UTIL_SEQ_Run+0x1d8>)
 800827a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800827c:	6013      	str	r3, [r2, #0]

  return;
 800827e:	bf00      	nop
}
 8008280:	3740      	adds	r7, #64	@ 0x40
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000034 	.word	0x20000034
 800828c:	200003cc 	.word	0x200003cc
 8008290:	200003d0 	.word	0x200003d0
 8008294:	20000030 	.word	0x20000030
 8008298:	200003d4 	.word	0x200003d4
 800829c:	2000045c 	.word	0x2000045c
 80082a0:	200003d8 	.word	0x200003d8
 80082a4:	200003dc 	.word	0x200003dc

080082a8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b088      	sub	sp, #32
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082b4:	f3ef 8310 	mrs	r3, PRIMASK
 80082b8:	617b      	str	r3, [r7, #20]
  return(result);
 80082ba:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80082bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80082be:	b672      	cpsid	i
}
 80082c0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f000 f8f6 	bl	80084b4 <SEQ_BitPosition>
 80082c8:	4603      	mov	r3, r0
 80082ca:	4619      	mov	r1, r3
 80082cc:	4a06      	ldr	r2, [pc, #24]	@ (80082e8 <UTIL_SEQ_RegTask+0x40>)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082d8:	69bb      	ldr	r3, [r7, #24]
 80082da:	f383 8810 	msr	PRIMASK, r3
}
 80082de:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80082e0:	bf00      	nop
}
 80082e2:	3720      	adds	r7, #32
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	200003dc 	.word	0x200003dc

080082ec <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f6:	f3ef 8310 	mrs	r3, PRIMASK
 80082fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80082fc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80082fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008300:	b672      	cpsid	i
}
 8008302:	bf00      	nop

  TaskSet |= TaskId_bm;
 8008304:	4b0d      	ldr	r3, [pc, #52]	@ (800833c <UTIL_SEQ_SetTask+0x50>)
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4313      	orrs	r3, r2
 800830c:	4a0b      	ldr	r2, [pc, #44]	@ (800833c <UTIL_SEQ_SetTask+0x50>)
 800830e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8008310:	4a0b      	ldr	r2, [pc, #44]	@ (8008340 <UTIL_SEQ_SetTask+0x54>)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	431a      	orrs	r2, r3
 800831c:	4908      	ldr	r1, [pc, #32]	@ (8008340 <UTIL_SEQ_SetTask+0x54>)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f383 8810 	msr	PRIMASK, r3
}
 800832e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008330:	bf00      	nop
}
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	200003cc 	.word	0x200003cc
 8008340:	2000045c 	.word	0x2000045c

08008344 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800834c:	f3ef 8310 	mrs	r3, PRIMASK
 8008350:	60fb      	str	r3, [r7, #12]
  return(result);
 8008352:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008354:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008356:	b672      	cpsid	i
}
 8008358:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	43da      	mvns	r2, r3
 800835e:	4b08      	ldr	r3, [pc, #32]	@ (8008380 <UTIL_SEQ_PauseTask+0x3c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4013      	ands	r3, r2
 8008364:	4a06      	ldr	r2, [pc, #24]	@ (8008380 <UTIL_SEQ_PauseTask+0x3c>)
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	f383 8810 	msr	PRIMASK, r3
}
 8008372:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008374:	bf00      	nop
}
 8008376:	371c      	adds	r7, #28
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr
 8008380:	20000030 	.word	0x20000030

08008384 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008384:	b480      	push	{r7}
 8008386:	b087      	sub	sp, #28
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800838c:	f3ef 8310 	mrs	r3, PRIMASK
 8008390:	60fb      	str	r3, [r7, #12]
  return(result);
 8008392:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008396:	b672      	cpsid	i
}
 8008398:	bf00      	nop

  TaskMask |= TaskId_bm;
 800839a:	4b09      	ldr	r3, [pc, #36]	@ (80083c0 <UTIL_SEQ_ResumeTask+0x3c>)
 800839c:	681a      	ldr	r2, [r3, #0]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	4a07      	ldr	r2, [pc, #28]	@ (80083c0 <UTIL_SEQ_ResumeTask+0x3c>)
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f383 8810 	msr	PRIMASK, r3
}
 80083b0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80083b2:	bf00      	nop
}
 80083b4:	371c      	adds	r7, #28
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	20000030 	.word	0x20000030

080083c4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083cc:	f3ef 8310 	mrs	r3, PRIMASK
 80083d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80083d2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80083d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80083d6:	b672      	cpsid	i
}
 80083d8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80083da:	4b09      	ldr	r3, [pc, #36]	@ (8008400 <UTIL_SEQ_SetEvt+0x3c>)
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	4a07      	ldr	r2, [pc, #28]	@ (8008400 <UTIL_SEQ_SetEvt+0x3c>)
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f383 8810 	msr	PRIMASK, r3
}
 80083f0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80083f2:	bf00      	nop
}
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	200003d0 	.word	0x200003d0

08008404 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800840c:	4b1f      	ldr	r3, [pc, #124]	@ (800848c <UTIL_SEQ_WaitEvt+0x88>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8008412:	4b1e      	ldr	r3, [pc, #120]	@ (800848c <UTIL_SEQ_WaitEvt+0x88>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800841a:	d102      	bne.n	8008422 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800841c:	2300      	movs	r3, #0
 800841e:	61fb      	str	r3, [r7, #28]
 8008420:	e005      	b.n	800842e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008422:	4b1a      	ldr	r3, [pc, #104]	@ (800848c <UTIL_SEQ_WaitEvt+0x88>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2201      	movs	r2, #1
 8008428:	fa02 f303 	lsl.w	r3, r2, r3
 800842c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800842e:	4b18      	ldr	r3, [pc, #96]	@ (8008490 <UTIL_SEQ_WaitEvt+0x8c>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008434:	4a16      	ldr	r2, [pc, #88]	@ (8008490 <UTIL_SEQ_WaitEvt+0x8c>)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800843a:	e003      	b.n	8008444 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800843c:	6879      	ldr	r1, [r7, #4]
 800843e:	69f8      	ldr	r0, [r7, #28]
 8008440:	f7f8 f8c9 	bl	80005d6 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008444:	4b13      	ldr	r3, [pc, #76]	@ (8008494 <UTIL_SEQ_WaitEvt+0x90>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4013      	ands	r3, r2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0f5      	beq.n	800843c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008450:	4a0e      	ldr	r2, [pc, #56]	@ (800848c <UTIL_SEQ_WaitEvt+0x88>)
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008456:	f3ef 8310 	mrs	r3, PRIMASK
 800845a:	60bb      	str	r3, [r7, #8]
  return(result);
 800845c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800845e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008460:	b672      	cpsid	i
}
 8008462:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	43da      	mvns	r2, r3
 8008468:	4b0a      	ldr	r3, [pc, #40]	@ (8008494 <UTIL_SEQ_WaitEvt+0x90>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4013      	ands	r3, r2
 800846e:	4a09      	ldr	r2, [pc, #36]	@ (8008494 <UTIL_SEQ_WaitEvt+0x90>)
 8008470:	6013      	str	r3, [r2, #0]
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f383 8810 	msr	PRIMASK, r3
}
 800847c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800847e:	4a04      	ldr	r2, [pc, #16]	@ (8008490 <UTIL_SEQ_WaitEvt+0x8c>)
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	6013      	str	r3, [r2, #0]
  return;
 8008484:	bf00      	nop
}
 8008486:	3720      	adds	r7, #32
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	200003d8 	.word	0x200003d8
 8008490:	200003d4 	.word	0x200003d4
 8008494:	200003d0 	.word	0x200003d0

08008498 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800849c:	bf00      	nop
}
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80084a6:	b480      	push	{r7}
 80084a8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80084aa:	bf00      	nop
}
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084ca:	d204      	bcs.n	80084d6 <SEQ_BitPosition+0x22>
 80084cc:	2310      	movs	r3, #16
 80084ce:	73fb      	strb	r3, [r7, #15]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	041b      	lsls	r3, r3, #16
 80084d4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084dc:	d205      	bcs.n	80084ea <SEQ_BitPosition+0x36>
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	3308      	adds	r3, #8
 80084e2:	73fb      	strb	r3, [r7, #15]
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	021b      	lsls	r3, r3, #8
 80084e8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80084f0:	d205      	bcs.n	80084fe <SEQ_BitPosition+0x4a>
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	3304      	adds	r3, #4
 80084f6:	73fb      	strb	r3, [r7, #15]
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	0f1b      	lsrs	r3, r3, #28
 8008502:	4a07      	ldr	r2, [pc, #28]	@ (8008520 <SEQ_BitPosition+0x6c>)
 8008504:	5cd2      	ldrb	r2, [r2, r3]
 8008506:	7bfb      	ldrb	r3, [r7, #15]
 8008508:	4413      	add	r3, r2
 800850a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	f1c3 031f 	rsb	r3, r3, #31
 8008512:	b2db      	uxtb	r3, r3
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	08008828 	.word	0x08008828

08008524 <memset>:
 8008524:	4402      	add	r2, r0
 8008526:	4603      	mov	r3, r0
 8008528:	4293      	cmp	r3, r2
 800852a:	d100      	bne.n	800852e <memset+0xa>
 800852c:	4770      	bx	lr
 800852e:	f803 1b01 	strb.w	r1, [r3], #1
 8008532:	e7f9      	b.n	8008528 <memset+0x4>

08008534 <__libc_init_array>:
 8008534:	b570      	push	{r4, r5, r6, lr}
 8008536:	4d0d      	ldr	r5, [pc, #52]	@ (800856c <__libc_init_array+0x38>)
 8008538:	4c0d      	ldr	r4, [pc, #52]	@ (8008570 <__libc_init_array+0x3c>)
 800853a:	1b64      	subs	r4, r4, r5
 800853c:	10a4      	asrs	r4, r4, #2
 800853e:	2600      	movs	r6, #0
 8008540:	42a6      	cmp	r6, r4
 8008542:	d109      	bne.n	8008558 <__libc_init_array+0x24>
 8008544:	4d0b      	ldr	r5, [pc, #44]	@ (8008574 <__libc_init_array+0x40>)
 8008546:	4c0c      	ldr	r4, [pc, #48]	@ (8008578 <__libc_init_array+0x44>)
 8008548:	f000 f826 	bl	8008598 <_init>
 800854c:	1b64      	subs	r4, r4, r5
 800854e:	10a4      	asrs	r4, r4, #2
 8008550:	2600      	movs	r6, #0
 8008552:	42a6      	cmp	r6, r4
 8008554:	d105      	bne.n	8008562 <__libc_init_array+0x2e>
 8008556:	bd70      	pop	{r4, r5, r6, pc}
 8008558:	f855 3b04 	ldr.w	r3, [r5], #4
 800855c:	4798      	blx	r3
 800855e:	3601      	adds	r6, #1
 8008560:	e7ee      	b.n	8008540 <__libc_init_array+0xc>
 8008562:	f855 3b04 	ldr.w	r3, [r5], #4
 8008566:	4798      	blx	r3
 8008568:	3601      	adds	r6, #1
 800856a:	e7f2      	b.n	8008552 <__libc_init_array+0x1e>
 800856c:	08008840 	.word	0x08008840
 8008570:	08008840 	.word	0x08008840
 8008574:	08008840 	.word	0x08008840
 8008578:	08008844 	.word	0x08008844

0800857c <memcpy>:
 800857c:	440a      	add	r2, r1
 800857e:	4291      	cmp	r1, r2
 8008580:	f100 33ff 	add.w	r3, r0, #4294967295
 8008584:	d100      	bne.n	8008588 <memcpy+0xc>
 8008586:	4770      	bx	lr
 8008588:	b510      	push	{r4, lr}
 800858a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800858e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008592:	4291      	cmp	r1, r2
 8008594:	d1f9      	bne.n	800858a <memcpy+0xe>
 8008596:	bd10      	pop	{r4, pc}

08008598 <_init>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr

080085a4 <_fini>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr
